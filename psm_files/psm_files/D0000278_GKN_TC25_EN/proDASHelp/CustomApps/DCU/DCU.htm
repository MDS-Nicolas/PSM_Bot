<!DOCTYPE HTML>
<html>
<!-- #BeginTemplate "/Templates/Modules.dwt" --><!-- DW6 -->

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">  

<!--Start, needed for Search highlighting-->
<style type="text/css">.highlight { background: #FFFF40; }</style>
<script type="text/javascript" src="../../highlight.js"></script>
<!--End, needed for Search highlighting-->

<!-- #BeginEditable "doctitle" --> 
<title>Data Conversion Utility (DCU)</title>
<!-- #EndEditable --> 
<link rel="stylesheet" href="../../stylemodule.css" type="text/css">
</head>

<body>
<!-- #BeginEditable "Main" -->
<div float:left><h1 id="DataConversion">Data Conversion Utility (DCU) (Option*)<a href="#" onClick="window.print(); return false;"><img src="../../Images/IconPrint.png" alt="Print Icon" width="45" height="62" style="display:block; float: right;" ></a></h1></div>
<h2 id="Overview">Overview</h2>
<p>The Data Conversion Utility (DCU) is a Windows based console application which converts Steady-State Fullset and selected Transient Logs into specific file formats as defined by their associated DLLs. DCU is comprised of the following components:</p>
<ul>
 <li>the main application</li>
 <li>associated formatting DLLs</li>
</ul>
<p>The DCU obtains its fullset input data from the proDAS Test Results and Sensor Calibration Database (TRSCDB) in the form of Fullset, Events, Test Header and Customer Specific tables. The DCU obtains its transient log input data from the binary transient log files on the proDAS RTE (Host Computer) file system as well as from the Test Header and Customer Specific tables in the proDAS TRSCDB.</p>
<p>Currently, the following file conversion standards are implemented:</p>
<ul>
 <li><a href="#GECDF">GE CDF File Format Conversion DLL</a></li>
 <li><a href="#PWCDF">PW CDF File Format Conversion DLL</a></li>
 <li><a href="#REC">REC File Format Conversion DLL</a></li>
</ul>
<h2 id="GECDF">GE CDF File Format Conversion DLL</h2>
<p>The GE CDF conversion utility can process the following data files that are generated by proDAS:</p>
<ul>
  <li>convert fullsets (steady state data) to GE CDF File Format</li>
  <li>convert transient logs (transient data) to GE CDF File Format</li>
  <li>maintain a log file which provides a failure indication of the most recently converted fullset or transient log</li>
</ul>
<p>Successful and failed conversion messages are recorded in the UEL along with the corresponding generated GE CDF filename, test name, and event ID in the case of a fullset or transient log filename in the case of a transient log.</p>
<h3 id="GEAutoTransmit">Automatic Transmission of GE CDF Files</h3>
<p>The Real-Time Engine (RTE) and Database Server are configured to automatically start the DCU application and control the transmission of transient log files and fullset data. Transmissions are controlled by command line interface or by the editable configuration files <a href="?5#GERTEini">RTE Initialisation File</a> and <a href="?6#GEpDBconfigini">Real-Time .pDB_config Server Initialisation File</a>.</p>
<h3 id="GEChanNameFormat">Channel Name Format</h3>
<p>The GE CDF DLL converts the data for a given channel to conform to the following standard:</p>
<ul>
  <li>the channel name is truncated to a maximum of 6 characters</li>
  <li>if specified, the alternate channel name can be recorded in the output file instead of the channel name. The alternate channel name is also truncated if it exceeds 6 characters</li>
  <li>the use of site specific channel attributes allows the identification of a subset of channels to be processed</li>
</ul>
<h3 id="GERTEini">RTE Initialisation File</h3>
<p>The following entry must be present in the LOG_PLAYBACK section of the RTE initialisation file to automatically start the conversion of transient log files by GE CDF:</p>
<blockquote>
  <p>CI log_conversion CDF /usr/bin/rsh/mgthost&quot;&lt;[MIN]&gt;&quot; c:\\proDAS\\bin\\DCU.exe /testname=$TESTNAME$ /log=$LOGNAME$</p>
</blockquote>
<p>In addition, the Transient Log Editor must be used to modify the description field of any transient log file to include the text &ldquo;CDF&rdquo;. This results in each instance of the transient log file being automatically converted to GE CDF format when the log finishes recording. </p>
<h3 id="GEpDBconfigini">Real-Time .pDB_config Server Initialisation File</h3>
<p>The following entry must be present in the Real-Time Database Server initialisation file to automatically start the conversion of fullsets:</p>
<blockquote>
  <p>CI	FS_CONVERSION  /usr/bin/rsh mgthost &quot;&lt;[MIN]&gt;&quot; c:\\proDAS\\bin\\DCU.exe /testname $TESTNAME$ /eventid $EVENTID$ </p>
</blockquote>
<p class="Note">Multiple requests to generate an output data file do not affect the overall performance of proDAS.</p>
<h3 id="GEManualCDF">Manual GE CDF File Generation</h3>
<p>In the event that a transient log or fullset failed to convert because of a lack of available disk space or failed database access, the conversion can be manually performed by the user via the command line. </p>
<p>For steady state data:</p>
<ul>
  <li>review the UEL message to obtain the fullset EVENT_ID</li>
  <li>using a DOS command prompt window, from the C:\proDAS\bin directory, execute the following command:
    <ul>
      <li> DCU.exe /testname &lt;test_name&gt; /eventid &lt;event_id&gt;</li>
    </ul>
    A fullset CDF file is generated and saved to the folder specified in the DCU initialization file:<br>
    <br>
    &lt;SITE&gt;_&lt;SS&gt;_&lt;ESNbuildNo&gt;_&lt;TEST&gt;_&lt;RDG&gt;_&lt;YYYY_MM_DD&gt;-&lt;HH_MM_SS&gt;.CDF<br>
    <br>
    Once the CDF file is successfully created, a tag file is created and saved to the same folder. The tag file is named as per the CDF file prefixed with tag_.</li>
</ul>
<p>For transient log data:</p>
<ul>
  <li>review the UEL message to obtain the transient log filename</li>
  <li>using a DOS command prompt window, from the C:\proDAS\bin directory, execute the following command:<br>
    <br>
    DCU.exe /testname &lt;test_name&gt;  /log \\rtehost\logs\&lt;engine name&gt;\&lt;test name&gt;\&lt;hist_logs&gt;\&lt;transient log file name&gt;<br>
    <br>
    A transient CDF file is generated and saved to the results directory specified in the DCU initialization file:<br>
    <br>
    &lt;SITE&gt;_&lt;TR&gt;_&lt;ESNbuildNo&gt;_&lt;TEST&gt;_&lt;RDG&gt;_&lt;YYYY_MM_DD&gt;-&lt;HH_MM_SS&gt;.CDF<br>
    <br>
  </li>
  <li>similarly to the fullset output file, a tag file is created in the same folder as the transient CDF file once the transient CDF file is successfully created</li>
</ul>
<p class="Note">Any continuous log file and any transient log file containing more than 100,000,000 channel samples are not processed by DCU. A resulting message stating the file was too large to process is logged to the UEL.</p>
<h2 id="PWCDF">PW CDF File Format Conversion DLL</h2>
<p>The PW CDF conversion utility can process the following data files that are generated by proDAS:</p>
<ul>
  <li>convert fullsets (steady state data) to PW CDF File Format</li>
  <li>convert transient logs (transient data) to PW CDF File Format</li>
  <li>the converted PW CDF file is transferred to the PW System using the CDF Watcher application</li>
</ul>
<p>Successful and failed conversion messages are recorded in the UEL along with the corresponding generated PW CDF filename, test name, and event ID in the case of a fullset or transient log filename in the case of a transient log.</p>
<h3 id="PWAutoTransmit">Automatic Transmission of PW CDF Files</h3>
<p>The Real-Time Engine (RTE) and Database Server are configured to automatically start the DCU application and control the transmission of transient log files and fullset data. Transmissions are controlled by command line interface or by the editable configuration files <a href="?7#PWRTEini">RTE Initialisation File</a> and <a href="?8#PWpDBconfigini">Real-Time .pDB_config Server Initialisation File</a>.</p>
<h3 id="PWChanNameFormat">Channel Name Format</h3>
<p>The PW CDF DLL converts the data for a given channel to conform to the following standard:</p>
<ul>
  <li>if specified, the alternate channel name can be recorded in the output file instead of the channel name</li>
  <li>the use of site specific channel attributes allows the identification of a subset of channels to be processed</li>
</ul>
<h3 id="PWRTEini">RTE Initialisation File</h3>
<p>The following entry must be present in the LOG_PLAYBACK section of the RTE initialisation file to automatically start the conversion of transient log files by PW CDF:</p>
<blockquote>
  <p>CI log_conversion CDF /usr/bin/rsh/mgthost&quot;&lt;[MIN]&gt;&quot; c:\\proDAS\\bin\\DCU.exe /testname=$TESTNAME$ /log=$LOGNAME$</p>
</blockquote>
<p>In addition, the Transient Log Editor must be used to modify the description field of any transient log file to include the text &ldquo;CDF&rdquo;. This results in each instance of the transient log file being automatically converted to CDF format when the log finishes recording.</p>
<h3 id="PWpDBconfigini">Real-Time .pDB_config Server Initialisation File</h3>
<p>The following entry must be present in the Real-Time Database Server initialisation file to automatically start the conversion of fullsets:</p>
<blockquote>
  <p>CI	FS_CONVERSION  /usr/bin/rsh mgthost &quot;&lt;[MIN]&gt;&quot; c:\\proDAS\\bin\\DCU.exe /testname $TESTNAME$ /eventid $EVENTID$ </p>
</blockquote>
<p class="Note">Multiple requests to generate an output data file do not affect the overall performance of proDAS.</p>
<h3 id="PWManualCDF">Manual PW CDF File Generation</h3>
<p>In the event that a transient log or fullset failed to convert because of a lack of available disk space or failed database access, the conversion can be manually performed by the user via the command line.</p>
<p>For steady state data:</p>
<ul>
  <li>review the UEL message to obtain the fullset EVENT_ID</li>
  <li>using a DOS command prompt window, from the C:\proDAS\bin directory, execute the following command:
    <ul>
      <li> DCU.exe /testname &lt;test_name&gt; /eventid &lt;event_id&gt;</li>
    </ul>
    A fullset CDF file is generated and saved to the folder specified in the DCU initialization file: <br>
    <br>
    proYYYYMMDDHHMMs.0000_00001.cdf<br>
    where <strong>s</strong> indicates a fullset, <strong>0000</strong> is the test run number and <strong>00001</strong> is the five digit test event reading number</li>
</ul>
<p>For transient log data:</p>
<ul>
  <li>review the UEL message to obtain the transient log filename</li>
  <li>using a DOS command prompt window, from the C:\proDAS\bin directory, execute the following command:<br>
    <br>
    DCU.exe /testname &lt;test_name&gt;  /log \\rtehost\logs\&lt;engine name&gt;\&lt;test name&gt;\&lt;hist_logs&gt;\&lt;transient log file name&gt;<br>
    <br>
    A transient CDF file is generated and saved to the results directory specified in the DCU initialization file and transferred to the PW System if CDF Watcher application is running:<br>
    <br>
    proYYYYMMDDHHMMt0000_00001.cdf<br>
    where t indicates a transient log, 0000 is the test run number and 00001 is the five digit test event reading number</li>
</ul>
<p class="Note">Any continuous log file and any transient log file containing more than 100,000,000 channel samples are not processed by DCU. A resulting message stating the file was too large to process is logged to the UEL.</p>
<h2 id="REC">REC File Format Conversion DLL</h2>
<p>Using data files that are generated by proDAS, the REC conversion utility can:</p>
<ul>
  <li>convert fullsets (steady state data) to REC File Format</li>
  <li>convert critical and transient logs (transient data) to REC File Format</li>
  <li>maintain a log file which provides a failure indication of the most recently converted fullset or critical/transient log</li>
</ul>
<p>Successful and failed conversion messages are recorded in the UEL along with the corresponding generated REC filename, test name, and event ID in the case of a fullset or transient/critical log filename in the case of a transient/critical log.</p>
<h3 id="GEAutoTransmit2">Automatic Transmission of REC Files</h3>
<p>The Real-Time Engine (RTE) and Database Server are configured to automatically start the DCU application and control the transmission of transient/critical log files and fullset data. Transmissions are controlled by the command line interface or by the editable configuration files <a href="?9#GERTEini">RTE Initialisation File</a> and <a href="?10#GEpDBconfigini">Real-Time .pDB_config Server Initialisation File</a>.</p>
<p>REC files are initially generated and saved in the results directory, then transferred to the directory specified in the DCU initialization file. Based on the RTE Host .config file settings, the file is transferred to the Target Directory or Test File Directory.</p>
<p class="Note">Any previous REC files in the results directory that did not automatically transfer along with the newly generated REC files to the directory specified in the DCU initialization file.</p>
<h4>Automatic Start of Critical Log for K_REC</h4>
<p>The K-REC (critical log recording) is triggered as an action to a silent alarm which is configured on the channel &quot;<strong>K_Rec_Flag</strong>&quot;. This channel is set based on a timer and defined to become true every 900 seconds (15 minutes). The channel equations are as follows:</p>
<blockquote>
  <p><strong>K_Rec_Flag</strong> = mux(1,0,K_Rec_Count&lt;900)</p>
  <p><strong>K_Rec_Count</strong> = mux(0,mux(1,K_Rec_Count+1,K_Rec_Count&lt;900),K_Rec_Switch)</p>
</blockquote>
<p>There are two options to stop the K-REC from being recorded.</p>
<p><strong>Option 1:</strong></p>
<p>Ensure that the channel ENABLE_ALARMS is set to FALSE when the engine is not running.</p>
<p>The ENABLE_ALARMS is a standard channel which controls whether proDAS processes any configured alarms and actions. Typically, this channel is defined to be set to TRUE based on an engine parameter such as speed. This is done to disable nuisance alarms when the engine is not running. For example, the oil pressure indication is likely to be below the minimum limit when the engine is not running but it is not desired for this alarm to be processed at that time.</p>
<p>One could define the ENABLE_ALARMS channel with an equations such as:</p>
<blockquote>
  <p><strong>ENABLE_ALARMS</strong> = N2&gt;150.</p>
</blockquote>
<p>This will disable processing of ALL alarms and actions when the N2 channel is below 150 rpm. N2 is only an example, the user can chose whatever parameter and limit value they feel is appropriate. Having the <strong>ENABLE_ALARMS</strong> channel set to FALSE will stop the alarm and action of the <strong>K_Rec_Flag</strong> channel from being processed and the K-REC will not be triggered to record.</p>
<p class="Note">For the example above, the ENABLE_ALARMS channel is defined as a 0Hz settable channel. If the channel definition is updated according to the example above, the acquisition rate MUST be set to a NON-ZERO value.</p>
<p><strong>Option 2:</strong></p>
<p>Incorporate similar logic directly into the K_Rec_Flag channel definition where the flag is not set unless some parameter is above a certain limit (see example below). Again, the N2 parameter is just an example and the user is free to choose whatever parameter they deem appropriate.</p>
<p>Original:</p>
<blockquote>
  <p><strong>K_Rec_Flag</strong> = mux(1,0,K_Rec_Count&lt;900)</p>
</blockquote>
<p>Updated:</p>
<blockquote>
  <p><strong>K_Rec_Flag</strong> = <strong>mux(0,</strong>mux(1,0,K_Rec_Count&lt;900)<strong>,N2&gt;150)</strong></p>
</blockquote>
<p>In the updated definition, the <strong>K_Rec_Flag</strong> will be set to 0 or 1 based on the <strong>K_Rec_Count</strong> channel value only if the N2 channel value is above 150. Otherwise, the <strong>K_Rec_Flag</strong> will stay at a value of 0 and the alarm will and action to record the critical log will not be triggered.</p>
<p>The REC mode parameter is used to toggle the location of all REC files. Depending on the value of this flag, the REC files will either be sent by the DCU to a downstream system (shared location) or copied to a local directory on the Management GUI.</p>
<h4 id="RECNames">REC File Names</h4>
<p>REC Files are saved using the following naming conventions:</p>
<ul>
  <li>Steady state data and transient log files are saved as:<br>
    <br>
    &lt;PROJECTNO&gt;_&lt;TESTNO&gt;_&lt;READINGNUMBER&gt;.&lt;STA/TRA_TXT&gt;<br>
    <p class="Note">The string STA identifies steady state data and the string TRA identifies transient log data.</p>
    If the steady state data or transient log data is for testing only (negative test reading number), the file is saved as:<br>
    <br>
    &lt;PROJECTNO&gt;_&lt;TESTNO&gt;_&lt;YYYYMMDDHHMM&gt;.&lt;STA/TRA_TXT&gt;<br>
    <p class="Note">There are no negative test reading numbers for critical logs. </p>
  </li>
  <li>Critical log data is saved as:<br>
    <br>
    &lt;PROJECTNO&gt;_&lt;TESTNO&gt;_&lt;DATE&gt;_&lt;TIME&gt;.&lt;CON  _TXT&gt;<br>
    <br>
    <p class="Note">The string CON identifies critical log data.</p>
    <p class="Note">The DATE is in YYYYMMDD format. The TIME is in H24MMSS format.</p>
  </li>
</ul>
<h3 id="GEChanNameFormat2">Channel Name Format</h3>
<p>The REC DLL converts the data for a given channel to conform to the following standard:</p>
<ul>
  <li>the use of site specific channel attributes allows the identification of a subset of channels to be processed</li>
  <li>channel names are determined by the specific channel attributes</li>
  <li>the formatting DLL combines the MPKT channel name with the _H and _L as suffix. The suffix is removed from the channel name when the channel is added to the REC file. The _H and _L indicate the high and low 16 bit integer. The channel value is merged into one 32 bit integer in the REC files.</li>
</ul>
<h2 id="InitialiseFiles2">Initialisation Files</h2>
<h3>DCU Configuration File (DCU.config)</h3>
<p>A typical DCU configuration file would include the following information:</p>
<p class="Indented1">&lt;configuration&gt;<br>
  &lt;appSettings&gt;<br>
  &lt;add key="ChannelFilterAttribute" value="SiteSpecific:MPKT" /&gt;<br>
  &lt;add key="BindToAttributeList" value="SiteSpecific:MPKT" /&gt;<br>
  &lt;add key="AlterScanRates" value="true" /&gt;<br>
  &lt;add key="UseInactive" value="false" /&gt;<br>
  &lt;add key="MaxLogFileSize" value="1200" /&gt;<br>
  &lt;add key="CheckChannelQuality" value="true" /&gt;<br>
  &lt;add key="UpdateFsIndex" value="false" /&gt;<br>
  &lt;!--MBytes--&gt;<br>
  &lt;add key="ExitTimeout" value="600" /&gt;<br>
  &lt;add key="NullOutputFileStream" value="false" /&gt;<br>
  &lt;/appSettings&gt;<br>
  <br>
  &lt;startup&gt;<br>
  &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" /&gt;<br>
  &lt;/startup&gt;<br>
  &lt;/configuration&gt;</p>
<p><strong>CheckChannelQuality=True</strong><br>
  Removes channels with BAD quality from generated files. For log data, only all samples that are BAD for a given channel are removed.</p>
<p><strong>UpdateFsIndex=True</strong><br>
  If the fs_index field is null in the DB, DCU inserts a number to the fs_index field when the log file is generated.</p>
<p><strong>AlterScanRates=True</strong><br>
  DCU assigns all channels whose scan rate is faster than the log scan rate to match the log scan rate.</p>
<h3 id="DCUInitialiseFile3">DCU Initialisation File</h3>
<p>A typical DCU initialisation file would include the following information:</p>
<blockquote>
  <pre>[TRACE]
# Trace filename<br>FileName=c:\proDAS\data\trace\dcu.txt<br># Trace verbosity level (1 = lowest, 5 = highest)<br>Level=5 <br><br>[DB]<br># Parameters to access the Oracle database
DSN=prodas<br>Username=engineer<br>Password=thehelp<br><br>[LOG]<br># Parameters to convert UNIX log file name for Windows access<br>RTEPath=/users/RTE/logs/	<br>WinPath=\\rtehost\logs\
# Maximum number of samples that can be processed<br>MaxSamples=100000000<br><br>[OUTPUT]<br># This parameter identifies the formatting DLL being used<br># A separate [CDF] section must exist in the INI file<br>FormattingDLL=CDF<br># Location where the output files are written<br>ResultDirectory=C:\ProDAS\Results\DCU\<br># Indicates whether existing output files are over-written<br>ForceOverwrite=false<br># Location and name of the error log<br>ErrorLog=c:\prodas\data\trace\DCU_Errors.txt\<br># Indicates whether errors are appended to the error log file<br>ErrorLogAppend=true<br><br>[UEL]<br>Host=rtehost<br># Source name for UEL messages<br># must match entry in RTE initialisation file<br># UEL module, source_names parameter <br>Source=DCU<br><br># The following section identifies parameters used by CDF DLL<br># This section header must match FormattingDLL parameter</pre>
</blockquote>
<h3 id="DCUInitialiseFile4">GE CDF Initialisation File</h3>
<p class="Note">These parameters are found within the DCU initialisation file.</p>
<p>A typical GE CDF initialisation file would include the following information:</p>
<blockquote>
  <pre>[CDF]
 IncludeFSChannels= &lsquo;All&rsquo;, &lsquo;&rsquo;, or regular expression specifying the fullset output channels.
 ExcludeFSChannels=none	&lsquo;None&rsquo; or regular expression to exclude the fullset output channels.
 Only valid if the IncludeFSChannels=All
 IncludeTRChannels= &lsquo;All&rsquo;, &lsquo;&rsquo;, or regular expression specifying the log output channels
 ExcludeTRChannels=none	&lsquo;None&rsquo; or regular expression to exclude the log output channels.
 Only valid if the IncludeChannels=All
 
 # Location value used in CDF file
 location=AC
 # Cell number used in CDF file
 cellnumber=003
 # number of channel names per line in SS CDF file
 columnNumber_SSname=8
 # number of channel units per line in SS CDF file
 columnNumber_SSunit=6
 # number of channel values per line in SS CDF file
 columnNumber_SSvalue=7
 # number of channel names per line in TR CDF file
 columnNumber_TRname=10
 # number of channel units per line in TR CDF file
 columnNumber_TRunit=5
 # number of channel values per line in TR CDF file
 columnNumber_TRvalue=6</pre>
</blockquote>
<h3 id="DCUInitialiseFile">PW CDF Initialisation File</h3>
<p class="Note">These parameters are found within the DCU initialisation file.</p>
<p>A typical PW CDF initialisation file would include the following information:</p>
<blockquote>
  <pre>[CDF]
 IncludeFSChannels= &lsquo;All&rsquo;, &lsquo;&rsquo;, or regular expression specifying the fullset output channels.
 ExcludeFSChannels=none	&lsquo;None&rsquo; or regular expression to exclude the fullset output channels.
 Only valid if the IncludeFSChannels=All
 IncludeTRChannels= &lsquo;All&rsquo;, &lsquo;&rsquo;, or regular expression specifying the log output channels
 ExcludeTRChannels=none	&lsquo;None&rsquo; or regular expression to exclude the log output channels.
 Only valid if the IncludeChannels=All</pre>
  <p class="Note">If IncludeFSChannels and ExcludeFSChannels are left blank the PW CDF file will only include the PW CDF channels.</p>
  <pre>
 # Location value used in CDF file
 location=AC
 EngineType=X
 ReplaceNameAttr=Alternatename</pre>
</blockquote>
<h3 id="RECini">REC Initialisation File</h3>
<p class="Note">These parameters are found within the DCU initialisation file.</p>
<p>A typical REC initialisation file would include the following information:</p>
<blockquote>
  <pre>[REC] 
IncludeFSChannels= 
ExcludeFSChannels= 
IncludeTRChannels= 
ExcludeTRChannels= 
Cellnumber = 007 
Location = ABC 
ReplaceNameAttr=MPKT 
TargetDirectory = \\filesvr\hmi\rong\dcuresults 
CompressionFactor=1 
TestFileDirectory = c:\ProDAS\Results\DCUTestFile 
precision = 7</pre>
</blockquote>

<br>
<br>
<!-- #EndEditable -->
</body>

<!-- #EndTemplate --></html>
<script type="text/javascript">highlight();</script>
