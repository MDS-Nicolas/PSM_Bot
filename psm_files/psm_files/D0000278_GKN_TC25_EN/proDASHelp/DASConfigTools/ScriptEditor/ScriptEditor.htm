<!DOCTYPE HTML>
<html>
<!-- #BeginTemplate "/Templates/Modules.dwt" --><!-- DW6 -->

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">  

<!--Start, needed for Search highlighting-->
<style type="text/css">.highlight { background: #FFFF40; }</style>
<script type="text/javascript" src="../../highlight.js"></script>
<!--End, needed for Search highlighting-->

<!-- #BeginEditable "doctitle" --> 
<title>Script Editor</title>
<style type="text/css">
<!--
.style1 {color: #000000}
-->
</style>
<style type="text/css">
<!--
.style2 {color: #FF6600}
-->
</style>
<!-- #EndEditable --> 
<link rel="stylesheet" href="../../stylemodule.css" type="text/css">
</head>

<body>
<!-- #BeginEditable "Main" -->
<div float:left><h1 id="ScriptEditor">Script Editor<a href="#" onClick="window.print(); return false;"><img src="../../Images/IconPrint.png" alt="Print Icon" width="45" height="62" style="display:block; float: right;" ></a><div float:right></div></h1></div>
<h2 id="Overview">Overview</h2>
<p>The Script Editor is used to create and verify the validity of engine test procedures written for proDAS. The Script Editor provides the following key features for writing, editing and maintaining engine test procedure scripts:</p>
<ul>
  <li>error checking (syntax and compilation errors)</li>
  <li>operator instruction panel</li>
  <li>compilation vs. simulation mode</li>
  <li>script operation buttons (start, play, pause, skip, jump and stop)</li>
  <li>syntax highlighting for VBScript and MDS Language keywords/commands</li>
  <li>syntax use and description support for VBScript and Test Procedure Commands </li>
</ul>
<p>An engine test procedure, created using the Script Editor, contains sequential step-by-step commands. These commands are configured to reflect the test sequence as specified by the engine manufacturer. The commands set channel values, control information displayed to the operator, and control some aspects of the engine and facility operation.</p>
<p>The engine test procedure script controls the test sequence and how results are achieved. The engine test procedure scripts are processed line-by-line executing each command and argument in sequence.</p>
<p>When the operator is not compiling or running in simulation mode, the engine test procedure scripts are run from the Test Engine screen on the Management Interface Computer. The test scripts are located in D:\proDAS\Engine_files\<em>&lt;EngineName&gt;</em> directory on the Management Interface Computer.</p>
<h2 id="ScriptEditorComponents">Script Editor Components</h2>
<p>The Script Editor screen is divided into panels and buttons for creating and verifying engine test procedures.</p>
<div class="Container"><img src="images/Mainscreen.png" alt="Main screen" width="700" height="293"></div>
<p>The screen consists of the following primary components:</p>
<ul>
  <li><a href="#File">File</a></li>
  <li><a href="#Edit">Edit</a></li>
  <li><a href="#Edit2">View</a></li>
  <li><a href="#Edit3">Tools</a></li>
  <li><a href="#Help">Help</a></li>
  <li><a href="#FunctionButtons">Function buttons</a></li>
  <li><a href="#TestProcedure">Test Procedures panel</a></li>
  <li><a href="#TestInstruction">Test Instruction panel</a></li>
  <li><a href="#CodeWindow">Code Window tab </a></li>
  <li><a href="#ResultWindow">Result Window tab </a></li>
  <li><a href="#Commands">Commands tab </a></li>
  <li><a href="#VBScript">VBScript tab </a></li>
</ul>
<h3 id="File">File</h3>
<p>The <strong>File</strong> menu (below) is described in the following table.</p>
<div class="Container"><img src="images/FileMenu.png" alt="File Menu" width="175" height="173"></div>
<table class="Table-Grey">
  <tr>
    <th>Menu or Button</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>New (Ctrl+N)</td>
    <td>Creates a new engine test procedure.</td>
  </tr>
  <tr>
    <td>Open (Ctrl+O)</td>
    <td>Opens an existing engine test procedure.</td>
  </tr>
  <tr>
    <td>Save (Ctrl+S)</td>
    <td>Saves the engine test procedure.</td>
  </tr>
  <tr>
    <td>Save As...</td>
    <td>Saves the engine test procedure prompting the operator to enter a new test procedure name.</td>
  </tr>
  <tr>
    <td>Print... (Ctrl+P)</td>
    <td>Prints the engine test procedure.</td>
  </tr>
  <tr>
    <td>Exit</td>
    <td>Exits the Script Editor.</td>
  </tr>
</table>
<h3 id="Edit">Edit</h3>
<p>The <strong>Edit</strong> menu (below) is described in the following table.</p>
<div class="Container"><img src="images/EditMenu.png" alt="Edit Menu" width="275" height="373"></div>
<table class="Table-Grey">
  <tr>
    <th>Menu or Button</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>Comment Selection</td>
    <td>Comments the selected lines. </td>
  </tr>
  <tr>
    <td>Uncomment Selection</td>
    <td>Uncomments the selected lines. </td>
  </tr>
  <tr>
    <td>Set Comment Version</td>
    <td>Allows the operator to enter a comment version number. </td>
  </tr>
</table>
<h3 id="Edit2">View</h3>
<p>The <strong>View</strong> menu (below) is described in the following table.</p>
<div class="Container"><img src="images/ViewMenu.png" alt="View Menu" width="189" height="121"></div>
<table class="Table-Grey">
  <tr>
    <th>Menu or Button</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>Word Wrap</td>
    <td>Enables word wrap.</td>
  </tr>
  <tr>
    <td>Syntax Highlight</td>
    <td>Highlights the syntax.</td>
  </tr>
  <tr>
    <td>Refresh</td>
    <td>Refreshes the syntax colour.</td>
  </tr>
</table>
<h3 id="Edit3">Tools</h3>
<p>The <strong>Tools</strong> menu (below) is described in the following table.</p>
<div class="Container"><img src="images/ToolsMenu.png" alt="Tools Menu" width="262" height="99"></div>
<table class="Table-Grey">
  <tr>
    <th>Menu or Button</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>Error Check/Verify Syntax</td>
    <td>Checks for syntax/runtime errors.</td>
  </tr>
  <tr>
    <td>Test Run</td>
    <td>Performs a test run of the engine test script.</td>
  </tr>
  <tr>
    <td>Convert Script...</td>
    <td>Converts an MDS script to a valid TPScript.</td>
  </tr>
</table>
<h3 id="Help">Help</h3>
<p>The <strong>Help</strong> menu (below) is described in the following table.</p>
<div class="Container" align="left"><img src="images/HelpMenu.png" alt="Help Menu" width="190" height="99"></div>
<table class="Table-Grey">
  <tr>
    <th>Menu or Column</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>Getting Started</td>
    <td> Opens the first page of the proDAS Integrated Help.</td>
  </tr>
  <tr>
    <td>Topic</td>
    <td>Contains all specific help topics referring to the Script Editor.</td>
  </tr>
  <tr>
    <td>About Script Editor</td>
    <td>Displays information about the Script Editor, comprising the name, version number, and copyright.<br>
      <br>
      <img src="images/AboutScriptEditor.gif" alt="About Script Editor" width="404" height="276"></td>
  </tr>
</table>
<h3 id="FunctionButtons">Function Buttons</h3>
<p>The Script Editor main buttons are displayed and described in the table below.</p>
<table class="Table-Grey">
  <tr>
    <th> Menu or Button</th>
    <th> Description</th>
  </tr>
  <tr>
    <td><img src="images/BtnLoad.png" alt="Load Button" width="88" height="32"></td>
    <td>Loads the test procedure.</td>
  </tr>
  <tr>
    <td><img src="images/BtnStartScript.png" alt="Start Script Button" width="40" height="32"></td>
    <td>Starts executing the TPScript. </td>
  </tr>
  <tr>
    <td><img src="images/BtnSkip.png" alt="Skip Button" width="40" height="32"></td>
    <td>Skips to the next step in the TPScript. </td>
  </tr>
  <tr>
    <td><img src="images/BtnPause.png" alt="Pause Button" width="40" height="32"></td>
    <td>Pauses the TPScript. </td>
  </tr>
  <tr>
    <td><img src="images/BtnStop.png" alt="Stop Button" width="40" height="32"></td>
    <td>Stops the TPScript. </td>
  </tr>
  <tr>
    <td><img src="images/BtnJump.png" alt="Jump Button" width="40" height="32"></td>
    <td>Jumps back to the previous step in the TPScript.</td>
  </tr>
  <tr>
    <td><img src="images/BtnNewScript.png" alt="New Script Button" width="30" height="30"></td>
    <td>Creates a new script .
      <div class="CellBody"></div></td>
  </tr>
  <tr>
    <td><img src="images/BtnOpen.png" alt="Open Button" width="30" height="30"></td>
    <td>Opens existing files from a directory. </td>
  </tr>
  <tr>
    <td><img src="images/BtnSave.png" alt="Save Button" width="30" height="30"></td>
    <td>Saves the current script. </td>
  </tr>
  <tr>
    <td><img src="images/BtnPrint.png" alt="Print Button" width="30" height="30"></td>
    <td>Prints the current script.</td>
  </tr>
  <tr>
    <td><img src="images/BtnDecreaseIndent.png" alt="Decrease Indent Button" width="30" height="30"></td>
    <td>Decreases the indent on the selected script. </td>
  </tr>
  <tr>
    <td><img src="images/BtnIncreaseIndent.png" alt="Increase Indent Button" width="30" height="30"></td>
    <td>Increases the indent on the selected script. </td>
  </tr>
  <tr>
    <td><img src="images/BtnCommentsLine.png" alt="Comments Line Button" width="30" height="30"></td>
    <td>Comments the selected lines. </td>
  </tr>
  <tr>
    <td><img src="images/BtnUncommentsLine.png" alt="Uncomments Line Button" width="30" height="30"></td>
    <td>Uncomments the selected lines. </td>
  </tr>
  <tr>
    <td><img src="images/BtnCommentVersion.png" alt="Comments Version Button" width="30" height="30"></td>
    <td>Allows the operator to enter a comment version number. </td>
  </tr>
  <tr>
    <td><img src="images/BtnWordWrap.png" alt="Word Wrap Button" width="30" height="30"></td>
    <td>Toggles word wrap. </td>
  </tr>
  <tr>
    <td><img src="images/BtnSyntaxColor.png" alt="Syntax Color Button" width="30" height="30"></td>
    <td>Toggles the syntax colouring. </td>
  </tr>
  <tr>
    <td><img src="images/BtnRefreshSyntax.png" alt="Refresh Syntax Button" width="30" height="30"></td>
    <td>Refreshes the syntax colour. </td>
  </tr>
  <tr>
    <td><img src="images/BtnCheckforErrors.png" alt="Check for Errors Button" width="30" height="30"></td>
    <td>Checks for syntax/runtime errors.</td>
  </tr>
  <tr>
    <td><img src="images/BtnScriptInjection.png" alt="Script Injection Button" width="32" height="32"></td>
    <td>Enables/disables script injection. Script injection allows the user to insert  channel or fullset values while the script is running. </td>
  </tr>
</table>
<h3 id="TestProcedure">Test Procedures Panel</h3>
<p>The Test Procedures panel displays a list of available engine test procedure scripts.</p>
<h3 id="TestInstruction">Test Instruction Panel</h3>
<p>The Test Instruction panel displays all of the caution, instruction, note and warning commands that are present in the selected engine test procedure script as they would appear in the Management GUI.</p>
<p class="Note">This field supports non-English characters.</p>
<h3 id="CodeWindow">Code Window Tab</h3>
<p>The Code Window tab displays the engine test procedure script. </p>
<h3 id="ResultWindow">Result Window Tab</h3>
<p>The Result Window tab displays feedback to the operator from the commands within the engine test procedure script. This is equivalent to the results panel on the Test Engine page of the Management GUI.</p>
<p class="Note">This field supports non-English characters.</p>
<h3 id="Commands">Commands Tab</h3>
<p>The Commands tab displays the test procedure commands available for the operator. The operator can click on the name of the command to see a description of it in the status bar at the bottom of the application.</p>
<div class="Container"><img src="images/Commands.png" alt="Commands" width="182" height="204"></div>
<h3 id="VBScript">VBScript Tab</h3>
<p>The VBScript tab displays the VBScript language commands available for the operator. The operator can click on the name of the command to see a description of it in the status bar at the bottom of the application.</p>
<div class="Container"><img src="images/VBScript.png" alt="VBScript" width="182" height="204"></div>
<h3 id="Symbols">Symbols Tab</h3>
<p>The Symbols tab displays the available global variables and constants.</p>
<div class="Container"><img src="images/Symbols.png" alt="Symbols" width="182" height="204"></div>

<h2 id="CreateTestProcScript">Creating a Test Procedure Script</h2>
<p>The test procedure script is a unicode text file that contains test procedure commands. These commands perform local functions in the Management Interface GUI and interact with the proDAS Real-Time Engine, on the Host Computer, using opcodes. The test procedure script is comprised of the test script header and the test script body.</p>
<p>The header section is used primarily for information purposes and consists of the following:</p>
<ul>
  <li>engine test script name</li>
  <li>author</li>
  <li>description of the test</li>
  <li>date</li>
  <li>revision history for modifications</li>
</ul>
<p>The body of the test procedure script is produced by a programmer and is constructed using the following guidelines:</p>
<ul>
  <li>test script starting point</li>
  <li>engine reference information</li>
  <li>historical revision information</li>
  <li>specific checks and actions</li>
  <li>commands and arguments</li>
</ul>
<p> The engine reference and historical revision information are comment (') lines inserted at the beginning of the test procedure script. It is recommend that this section be updated and maintained, as the test procedure scripts are revised. Revision information is also placed within the body of the test procedure script to precisely identify the changes. Previous commands and arguments are marked as comments with a single quote (') but are left in the script with an associated revision tag indicating when the change was made.</p>
<p>An example of an historical revision is shown below.</p>
<div class="Container"><img src="images/HistoricRevision.png" alt="Historic Revision" width="555" height="253"></div>
<p>Each individual test sequence, check, or action maintains a common flow, as shown below:</p>
<ul>
  <li>comment marker (a single quote (') at the beginning of the section)</li>
  <li>comment text identifying the specific operation and any references (OEM manuals)</li>
  <li>series of commands and arguments that produce the desired effect</li>
  <li>comment marker (') ending the section</li>
</ul>
<p>Certain programming techniques (where applicable) are followed to ensure that conditions are verified and checked prior to altering parameters.</p>
<p>A typical sequence follows:</p>
<ul>
  <li>check the feedback or status signal to determine the current state</li>
  <li>set the signal to the desired state, if required</li>
  <li>monitor (wait) until the condition is met</li>
  <li>continue to the next step</li>
</ul>
<p>An example of a feedback sequence is shown below.</p>
<div class="Container"><img src="images/FeedbackSequence.png" alt="Feedback Sequence" width="624" height="301"></div>
<p>For sample test procedure scripts, see <a href="?11#SampleTestProcedure">Sample Test Procedures</a>.</p>
<p>To create an engine test procedure script:</p>
<ol>
  <li>From the Management GUI Control Panel Tools menu, select <strong>Script Editor</strong>.<br>
    The Script Editor main window is displayed.<br>
    <br>
    <img src="images/Mainscreen.png" alt="Mainscreen" width="700" height="293"><br>
    <br>
  </li>
  <li> Select <img src="images/BtnNewScript.png" alt="Btn New Script" width="30" height="30"> to create a new script.</li>
  <li>Update the header information.</li>
  <li>Use the commands and arguments listed in the <a href="?12#CommandCode">Command Codes Table</a>, to program the steps to be followed in the test procedure script.</li>
  <li>Select <img src="images/BtnSave.png" alt="BtnSave" width="30" height="30"> to save the new script. A Save As window is displayed.</li>
  <li>Name the engine test procedure script file (Choose a file name that corresponds to the action (e.g.: Startup) to be performed. For example, Startup.txt). </li>
  <li>Browse to the ~proDAS\mgt gui\engine files\<em>&lt;engine name&gt;</em> directory on the Management Interface Computer, select <strong>Save</strong>.</li>
  <li>Open the Macro Editor and link to the saved engine test procedure script, see <a href="../MacroEditor/MacroEditor.htm">Macro Editor</a>.</li>
</ol>
<h2 id="VerifyTestProcedure">Verifying a Test Procedure</h2>
<p>Verifying a test procedure ensures that the test procedure script and supporting information work correctly.</p>
<p>It is good practice to develop and verify test procedures in multiple instructions, rather than in one instruction. This way, errors can be quickly isolated, corrected, and the test procedure re-verified.</p>
<p>Keep the following in mind when verifying a new test procedure:</p>
<ul>
  <li>use a master configuration that is relevant to the test procedure. For example, the master configuration should include all of the channels used in the test procedure </li>
  <li>while running a test procedure, the test procedure module checks the syntax of the test procedure commands and reports any errors. However, proDAS specific errors (for example, using incorrect channel names) can only be found by testing the test procedure on proDAS using a relevant master configuration and simulated data </li>
</ul>
<p>To verify a test procedure, from the Script Editor:</p>
<ol>
  <li>Make sure that all test procedure files have been stored in their appropriate directories.</li>
  <li>Make sure that all test procedures have been registered with the proDAS Macro Editor to the appropriate configuration.</li>
  <li>Start the Script Editor. </li>
  <li>From the Test Procedures panel, select the test procedure to be run.</li>
  <li> Select Load. The test procedure is loaded.</li>
  <li>Select Play to start the test procedure.</li>
  <li>Work through the steps in the test procedure by selecting the Next Step (Play) button and recording any errors that appear or comments that should be added.<br>
    <p class="Note">If an error is found, the test procedure will trigger an error and the user will be given the option of either ignoring the error or aborting the test procedure.</p>
  </li>
  <li>Correct errors and repeat the verification.</li>
  <li>Please note the Script Injection button may be used to manually set channel and fullset values during verification.</li>
</ol>
<h2 id="ImportTestProcedure">Importing a Test Procedure</h2>
<p>Importing a test procedure allows the operator to convert a legacy MDS script into the new script language. To import an existing test procedure:</p>
<ol>
  <li>Start the Script Editor.</li>
  <li>To import an existing test procedure, from the Script Editor main window, select <strong>Tools / Convert Script...</strong>. The user is prompted to select a legacy test procedure file.</li>
  <li>The user is prompted to confirm their choice. Once confirmed, the test procedure file is loaded.<br>
    <p class="Note">The conversion process may not be perfect. The user will have to manually repair some of the procedure script.</p>
  </li>
</ol>
<h2 id="TestProcScriptCommands">Test Procedure Script Commands</h2>
<p>The command code table lists the command codes (syntax name) and the arguments used to create a test procedure. The command code table includes:</p>
<table class="Table-Grey">
  <tr>
    <th>Commands</th>
    <th>Commands (or syntax name) are restricted words that are used to define steps in a test procedure.</th>
  </tr>
  <tr>
    <td>Arguments</td>
    <td>Arguments provide additional information or parameters required by the command. Some commands may have more than one argument. Arguments must be separated by commas. There must be no spaces in or between arguments, unless a space is a part of the argument name or is a message to be displayed.</td>
  </tr>
  <tr>
    <td>Description</td>
    <td>Describes the purpose of the test procedure script command.</td>
  </tr>
  <tr>
    <td>Example</td>
    <td>An example of the command and argument (if applicable) is given here.</td>
  </tr>
  <tr>
    <td>Interpretation of Example</td>
    <td>Describes the meaning of the given example.</td>
  </tr>
</table>
<h3 id="CommandCode">Command Code Table</h3>
<p class="Note">In the table below:<br>
  &nbsp; &nbsp; &bull; &nbsp; &nbsp; str - text string<br>
  &nbsp; &nbsp; &bull; &nbsp; &nbsp; int - integer</p>
<table class="Table-Grey">
  <tr>
    <th>Syntax Name</th>
    <th>Description and Example</th>
  </tr>
  <tr>
    <td><strong>' (remark)</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>' [text]</pre>
      <strong>Description</strong><br>
      <br>
      Inserts remarks into the test script as a programming aid or to &quot;comment&quot; out parts of the test script.<br>
      <p class="Note">Precede text after the &lsquo; with a space.<br>
        <br>
        To enhance performance, minimize the number of remarks in test script.</p></td>
  </tr>
  <tr>
    <td><strong>autostart</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>autostart &lt;strFilename&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Terminates current Test Procedure and immediately begins executing the specified test procedure. Can be used within <strong>IF</strong> logic to conditionally launch a new Test Procedure. Can also be placed as the last line in a Test Procedure to start the next Test Procedure.<br>
      <br>
      <strong>Example</strong><br>
      <pre>autostart &quot;FCUTrim&quot;</pre>
      Terminates execution of the current Test Procedure and begins executing the <strong>FCUTrim</strong> Test Procedure.</td>
  </tr>
  <tr>
    <td><strong>beep</strong></td>
    <td><strong>Syntax</strong>
      <pre>beep &lt;intTimes&gt;</pre>
      <strong>Description</strong><br>
      <br>
      System will beep the number of times specified (maximum is 5).<br>
      <br>
      <strong>Example</strong><br>
      <pre>beep 3</pre>
      Beeps three times. </td>
  </tr>
  <tr>
    <td><strong>call_script</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>call_script &lt;strFilename&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Allows the user to call a .VBS (VBScript), .JS (JavaScript DotNet), or .VB (VB.NET) script file.<br>
      <br>
      <strong>Example</strong><br>
      <pre>call_script &ldquo;D:\myscript.vbs&rdquo; or callscript &ldquo;C:\dotnet.vb&rdquo;</pre>
      <p class="Note">For DotNet scripts, the module must be called Script and there must be an entry point function called Main.</p>
      <br>
      For example:<br>
      <pre>imports System.Windows.Forms</pre>
      <pre>' The name of the module must match the name of the code item ' created in the hosting application via CreateItem.
     Module Script
     Sub Main()
     Dim objForm as new Form ()
     objForm.ShowDialog ()
     End Sub
     End Module</pre></td>
  </tr>
  <tr>
    <td><strong>call_tp</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>call_tp &lt;strFilename&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Call command inserts the specified test procedure script into the current test procedure script at the point where the command is invoked.<br>
      <br>
      <em>&lt;strFilename&gt;</em> is an actual script file name and not the macro name. The directory path name and &quot;tps&quot; extension are optional.<br>
      <p class="Note">The called test procedure script must be configured, enabled and active in the Macro Editor. The macro name can be different from the script file name.</p>
      <p class="Warning">The Test procedure interpreter does not support nested call statements. When using multiple calling, you must return to the original Engine Test Procedure before calling again.</p>
      <strong>Example</strong>
      <pre>call_tp &quot;01TestPrep&quot;
call_tp &quot;01TestPrep.tps&quot;
call_tp &quot;C:\proDAS\Data\MgtGUI\Engine Files\01TestPrep.tps&quot;</pre></td>
  </tr>
  <tr>
    <td><strong>caution</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>caution &lt;strMessage&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Displays the &quot;text&quot; in yellow on the Test Instruction window. The text will be wrapped automatically if it doesn't fit on a single line.<br>
      <br>
      <strong>Example</strong>
      <pre>caution &quot;There are &quot; &amp; cv_AcellNO &amp; &quot; left to do. &quot;
      <br>caution &quot;This test may exceed 30 minutes!&quot;</pre></td>
  </tr>
  <tr>
    <td><strong>channel</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>channel &lt;strChannels&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Registers a comma-delimited list of channels with the RTE. Creates functions: cv_&lt;chan&gt;, cq_&lt;chan&gt;, fv_&lt;chan&gt;, fq_&lt;chan&gt;, and &lt;chan&gt;. Key: c = channel, f = fullset, v = Value, and q = quality.<br>
      <br>
      <strong>Example</strong>
      <pre>channel &ldquo;C4,ENGMOD,Eng_On,OilCSEnd,tAtGI,AIFlag&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>clear_window</strong></td>
    <td><strong>Syntax</strong>
      <pre>clear_window</pre>
      <strong>Description</strong><br>
      <br>
      Clears the test page log window, (contents of the memory buffer and file buffer are unmodified).<br>
      <br>
      <strong>Example</strong><br>
      <pre>clear_window</pre></td>
  </tr>
  <tr>
    <td><strong>delay</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>delay &lt;intSeconds&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Displays a timer window and counts down to the specified time in seconds.<br>
      <strong>Example</strong><br>
      <pre>delay 50</pre>
      Delays for 50 seconds.</td>
  </tr>
  <tr>
    <td><strong>do_fullset</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>do_fullset &lt;intSeconds&gt;, [strEventComment], [strTestStep]</pre>
      <strong>Description</strong><br>
      <br>
      Performs a fullset of data from all channels for the specified time (in seconds), and stores it in the database. It displays a timer showing the fullset duration. A time of 0 (zero) will produce a Snapshot of the CVT. The fullset is saved with the event comment (optional).<br>
      <br>
      The optional <strong>test_step</strong> (up to 20 characters in length) is used by RAVE to extract fullset data for test reporting.<br>
      <br>
      <strong>Example</strong><br>
      <pre>do_fullset 10, &quot;Perf Point: MC warmup&quot; &amp; cv_N1, &quot;MC_WarmUp&quot;</pre></td>
  </tr>
  <tr>
    <td><strong>do_fullset_async</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>do_fullset_async &lt;intSeconds&gt;, [strEventComment], [strTestStep]</pre>
      <strong>Description</strong> <br>
      <br>
      Performs a fullset of data from all channels for the specified time (in seconds), and stores it in the database. No timer is shown, and script control is returned before the fullset has completed.<br>
      <br>
      <strong>Example</strong><br>
      <pre>do_fullset_async 10, &quot;Perf Point: MC warmup&quot;, &quot;MC_WarmUp&quot;</pre></td>
  </tr>
  <tr>
    <td><strong>double_rig</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>double_rig &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Performs a two-point calibration of the selected channel. The operation is similar to the single point rigging function. The operator is prompted to move to the next calibration point and enter in the expected value.<br>
      <br>
      The resultant 2-point calibration (slope and offset) is saved to the database.<br>
      <br>
      <strong>Example</strong><br>
      <pre>double_rig &quot;OilCSEnd&quot;</pre>
      Performs a two point calibration on the test rig channel.</td>
  </tr>
  <tr>
    <td><strong>drig</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>drig &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Performs a two-point calibration of the selected channel and stored the slope and offset to a new sensor. The operator is prompted after the first point to move to the next calibration point and enter the expected value.<br>
      <br>
      The resultant 2-point calibration (slope and offset) is saved to the database.<br>
      <br>
      <strong>Example</strong><br>
      <pre>drig test_rig</pre>
      Performs a double point calibration of the test_rig channel and saves the calibration values to the RIG sensor.</td>
  </tr>
  <tr>
    <td><strong>fitcalc</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>fitcalc &lt;strFitType&gt;, [intFitOrder] 'FitTypes: POLY, LIN</pre>
      <strong>Description</strong><br>
      <br>
      Performs curve fit calculation from the stored points in the fit point buffer.<br>
      <br>
      <strong>Example</strong>
      <pre>fitcalc POLY, 3</pre>
      <pre>fitcalc LIN</pre>
      <p class="Note">Stores curve fit values into variables: A0..A4, MSE..</p></td>
  </tr>
  <tr>
    <td><strong>fitclear</strong></td>
    <td><strong>Syntax</strong>
      <pre>fitclear</pre>
      <strong>Description</strong><br>
      <br>
      Clears the previously stored points from the fit point buffer.<br>
      <br>
      <strong>Example</strong><br>
      <pre>fitclear</pre></td>
  </tr>
  <tr>
    <td><strong>fitstore</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>fitstore &lt;dblX&gt;, &lt;dblY&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Stores points into the fit point buffer.<br>
      <br>
      <strong>Example</strong><br>
      <pre>fitstore 0.5, 2.5</pre>
      <pre>fitstore cv_N1, cv_EGT</pre>
      <pre>fitstore fv_N1, fv_EGT</pre></td>
  </tr>
  <tr>
    <td><strong>get_master_config</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>get_master_config</pre>
      <strong>Description</strong><br>
      <br>
      Stores configuration information into global variables: testcellidgv, mconfiggv, engnamegv, testidgv, testnamegv, standardgv, customergv, replaymodegv, acqmodegv, serialnogv, and buildnogv.<br>
      <br>
      <strong>Example</strong>
      <pre>get_master_config</pre></td>
  </tr>
  <tr>
    <td><strong>get_otd_status</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>get_otd_status &lt;strChannelName&gt;</pre>
      <strong>Description</strong> <br>
      <br>
      Stores the OTD status into the otdstatusgv variable for the SCP (all eight channels) of the channel name specified.<br>
      <br>
      <strong>Example</strong>
      <pre>get_otd_status EGT1</pre></td>
  </tr>
  <tr>
    <td><strong>get_rte_date</strong></td>
    <td><strong>Syntax</strong>
      <pre>get_rte_date</pre>
      <strong>Description</strong><br>
      <br>
      Returns a concatenation of dategv and timegv.<br>
      <br>
      <strong>Example</strong><br>
      <pre>get_rte_date</pre></td>
  </tr>
  <tr>
    <td><strong>get_rte_state</strong></td>
    <td><strong>Syntax</strong>
      <pre>get_rte_state</pre>
      <strong>Description</strong> <br>
      <br>
      Stores the current operational state of the RTE into the rte_stategv variable.<br>
      <br>
      0 No_state<br>
      1 Initialize<br>
      2 Login<br>
      3 Abort<br>
      4 Configure<br>
      5 Idle<br>
      6 Start_scan<br>
      7 Scan<br>
      8 Stop_scan<br>
      <br>
      <strong>Example</strong>
      <pre>get_rte_state</pre></td>
  </tr>
  <tr>
    <td><strong>If Then Else End If</strong></td>
    <td><strong>Syntax</strong>
      <pre>If&lt;boolean exp&gt; Then &lt;statement&gt; Else &lt;statement&gt; End If</pre>
      <strong>Description</strong> <br>
      <br>
      &lt;Boolean exp&gt; - logic with OR, AND, NOT to build complex Boolean expression<br>
      <br>
      <strong>Example</strong>
      <pre>
 If (cv_N2 &lt;= 1500) And (cv_Flag = 0) Then
     autostart &quot;stop&quot;
 Else
     autostart &quot;cruise&quot;
 End If</pre>
      IF N2 is less than or equal to 1500 and Flag = 0 then<br>
      <br>
      &nbsp;&nbsp;logic placed here will be executed<br>
      <br>
      else (If N2 is greater than 1500 or Flag = 1)<br>
      <br>
      &nbsp;&nbsp;logic placed here will be executed<br>
      <br>
      End If (signifies the end of the logical construct)
      <p class="Note">Test Procedures handle local variables and CVT variables differently. Please refer to the example below.</p>
      <br>
      <strong>For Local Variables:</strong><br>
      <br>
      For the <strong>TRUE</strong> case:<br>
      <br>
      If LocalVariable Then<br>
      or<br>
      If LocalVariable = True Then<br>
      <br>
      For the <strong>FALSE</strong> case:<br>
      <br>
      If Not LocalVariable Then<br>
      or<br>
      If LocalVariable = False Then <br>
      <br>
      For <strong>cv_</strong> and <strong>fv_</strong> Variables:<br>
      <br>
      For the <strong>TRUE</strong> case: <br>
      If cv_ChannelName = 1 Then<br>
      If fv_ChannelName = 1 Then<br>
      <br>
      For the <strong>FALSE</strong> case:<br>
      If cv_ChannelName = 0 Then<br>
      If fv_ChannelName = 0 Then</td>
  </tr>
  <tr>
    <td><strong>instruction</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>instruction &lt;strMessage&gt;, [booSkip]</pre>
      <strong>Description</strong><br>
      <br>
      Highlights a message in the Test Instruction Window; initiates the flashing of the Next Step button. If /skip is included, the skip button is illuminated and enabled. A global variable, skipgv, will be set to &ldquo;1.00&rdquo; if the skip button was pushed, otherwise it will be set to &ldquo;0.00&rdquo;. The numeric values are used for backward compatibility, instead of strictly true/false. The text will be wrapped automatically if it doesn&rsquo;t fit on a single line.<br>
      <pre><strong>Example</strong></pre>
      <pre>instruction &quot;Switch off CSD&quot;, skip</pre>
      <pre>instruction &quot;There are &quot; &amp; cv_AcellNo &amp; &quot; left to do.&quot;</pre>
      <pre>instruction &quot;Start the Engine&quot;</pre>
      Text &quot;Switch off CSD&quot; is highlighted in the instruction Window, and the user is prompted to press the <strong>NEXT</strong> Button. The <strong>SKIP</strong> button is enabled.</td>
  </tr>
  <tr>
    <td><strong>newtextreport</strong></td>
    <td><strong>Syntax</strong>
      <pre>newtextreport &lt;strReportName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Closes the current RTF result file located in the:<br>
      <br>
      [drive and base directory specified in the D:\prodas\data\mgt gui\config\comment.txt.file]\[enginename]\[testname]\[UI_test_results directory <br>
      <br>
      e.g.: Closes <em> D:\log\mt30\newmt30\UI_test_results</em> and opens a new RTF file using the name specified using the format: <em>&lt;result RTF file name&gt;_&lt;three digit instance number&gt;.rtf</em><br>
      <br>
      <strong>Example</strong><br>
      <br>
      <pre>newtextreport &quot;testResults&quot;</pre>
      <p class="Note">Text reports are saved ased on settings stored in the configuration file of the Management GUI.</p></td>
  </tr>
  <tr>
    <td><strong>note</strong></td>
    <td><strong>Syntax</strong>
      <pre>note &lt;strMessage&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Displays &quot;text&quot; in the Test Procedures window in default colour. Unlike <strong>instruction</strong>, the &quot;text&quot; is not highlighted during execution and the user is not prompted for input. This command is used to display information to the user. The text will be wrapped automatically if it doesn&rsquo;t fit on a single line.<br>
      <br>
      <strong>Example</strong>
      <pre>note &ldquo;There are &ldquo; &amp; cv_AcellNo &amp; &ldquo; left to do.&rdquo;</pre>
      <pre>note &ldquo;5.7 Factory Test &ndash; Second Period&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>pbs_purge</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>pbs_purge &lt;intSeconds&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Performs a purge of all pressure bricks. Time specified must be between 0 and 300 seconds.<br>
      <br>
      <strong>Example</strong><br>
      <pre>pbs_purge 5</pre>
      <pre>Performs a 5 second purge of the Pressure Brick lines</pre></td>
  </tr>
  <tr>
    <td><strong>pbs_purge_one</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>pbs_purge_one &lt;strChannelName&gt;, &lt;intSeconds&gt;</pre>
      <strong>Description</strong> <br>
      <br>
      Performs a purge of a single pressure brick based on a channel name.<br>
      <br>
      <strong>Example</strong>
      <pre>pbs_purge_one P3, 30</pre></td>
  </tr>
  <tr>
    <td><strong>pbs_zero</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>pbs_zero</pre>
      <strong>Description</strong> <br>
      <br>
      Zeros all pressure bricks transducers<br>
      <br>
      <strong>Example</strong><br>
      <pre>pbs_zero</pre></td>
  </tr>
  <tr>
    <td><strong>printtextreport</strong></td>
    <td><strong>Syntax</strong>
      <pre>printtextreport</pre>
      <strong>Description</strong><br>
      <br>
      Prints the current rtf result file (contents of the memory buffer and the file buffer are unmodified) with the header and footer as specified in the [Test Procedure] section of the Management GUI initialisation file.<br>
      <br>
      <strong>Example</strong><br>
      <pre>printtextreport</pre>
      Prints the current text report. </td>
  </tr>
  <tr>
    <td><strong>prompt_boo</strong></td>
    <td><strong>Syntax</strong>
      <pre>prompt_boo &lt;strDisplayText&gt;, &lt;booVariable&gt;</pre>
      <strong>Description</strong> <br>
      <br>
      Prompts the user for an input of a boolean value.<br>
      <br>
      <strong>Example</strong>
      <pre>prompt_boo &ldquo;Do you wish to trip to idle?&rdquo;, booTripToIdle</pre></td>
  </tr>
  <tr>
    <td><strong>prompt_num</strong></td>
    <td><strong>Syntax</strong><br>
      <br>
      prompt_num &lt;strDisplayText&gt;, &lt;dblVariable&gt;, &lt;dblMinimum&gt;, &lt;dblMaximum&gt;, &lt;dblDefault&gt;<br>
      <br>
      <strong>Description</strong> <br>
      <br>
      Prompts the user for an input of a numeric value.<br>
      <br>
      <strong>Example</strong> <br>
      <br>
      prompt_num &ldquo;Seconds for fullset?&rdquo;, dblSeconds, 1, 30, 1</td>
  </tr>
  <tr>
    <td><strong>prompt_ok</strong></td>
    <td><strong>Syntax</strong>
      <pre>prompt_str &lt;strDisplayText&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Displays a string to the user with an OK button.<br>
      <br>
      <strong>Example</strong><br>
      <pre>prompt_ok &ldquo;Press OK when the rotor stops.&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>prompt_str</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>prompt_str &lt;strDisplayText&gt;, &lt;strVariable&gt;, &lt;strDefaultValue&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Prompts the user for an input of a string value.<br>
      <br>
      <strong>Example</strong><br>
      <pre>prompt_str &ldquo;Enter event comment.&rdquo;, strComment, &ldquo;No Comment&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>quit</strong></td>
    <td><strong>Syntax</strong>
      <pre>quit</pre>
      <strong>Description</strong> <br>
      <br>
      Aborts the test procedure. Useful within nested if statements and loops.<br>
      <br>
      <strong>Example</strong>
      <pre>quit</pre></td>
  </tr>
  <tr>
    <td><strong>result</strong></td>
    <td><strong>Syntax</strong>
      <pre>result &lt;strText&gt;, [strReport], [strColour]</pre>
      <strong>Description</strong><br>
      <br>
      Saves a message to the Test Results window. Text wrapping will occur.<br>
      <br>
      <strong>Notes</strong><br>
      <br>
      CONSTANTS: RED, BLUE, YELLOW, GREEN, and REPORT.<br>
      <br>
      <strong>Example</strong>
      <pre>result &ldquo;HPC speed = &ldquo; &amp; cv_N2 &amp; &ldquo; rpm.&rdquo;, REPORT, RED</pre>
      <pre>result &ldquo;The time is: &ldquo; &amp; timegv, , GREEN</pre>
      <pre>result &ldquo;The date is: &ldquo; &amp; dategv, REPORT &amp; &ldquo;MyReport&rdquo;</pre>
      <pre>result &ldquo;This one is in black.&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_channel</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_channel &lt;strChannels&gt;</pre>
      <strong>Description</strong><br>
      <br>
      A comma-delimited list of channels within the RTP.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_channel &ldquo;C4,ENGMOD,Eng_On,OilCSEnd,tAtGI,AIFlag&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_get</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_get &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Gets a specific value of a given rtp_channel.<br>
      <br>
      <strong>Example</strong>
      <pre>Dim dblRTPN1 : dblRTPN1 = rtp_get (&ldquo;N1&rdquo;)</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_go</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>rtp_go &lt;intSeconds&gt;, &lt;intTimeout&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>gogv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_go 30, 2</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_moved</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>rtp_moved &lt;strChannelName&gt;, &lt;dblValue&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>movedgv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_moved &ldquo;N1&rdquo;, 4500</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_movest</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>rtp_movest &lt;strChannelName&gt;, &lt;dblValue&gt;, &lt;dblMoveTime&gt;, &lt;dblTimeout&gt;, &lt;dblTolerence&gt;, &lt;dblPeriod&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>movestgv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_movest &ldquo;N1&rdquo;, 3400, 20, 5, 1.5, 30</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_relax</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_relax</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>relaxgv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_relax</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_resume</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_resume</pre>
      <strong>Description</strong><br>
      <br>
      Places all closed loop controls in closed loop / position mode. Returns <em>resumegv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_resume</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_set</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_set &lt;strChannelName&gt;, &lt;dblValue&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Sets a specified value to a given rtp_channel.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_set &ldquo;N1&rdquo;, 3400</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_start</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_start</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>strtATgv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong>
      <pre>rtp_start</pre></td>
  </tr>
  <tr>
    <td><strong>rtp_stop</strong></td>
    <td><strong>Syntax</strong>
      <pre>rtp_stop</pre>
      <strong>Description</strong><br>
      <br>
      Returns <em>stopATgv</em>. For return values on global variables see <a href="#ReturnValues">Global Variable Return Values</a>.<br>
      <br>
      <strong>Example</strong><br>
      <pre>rtp_stop</pre></td>
  </tr>
  <tr>
    <td><strong>save_hsv_log</strong></td>
    <td><strong>Syntax</strong>
      <pre>save_hsv_log</pre>
      <strong>Description</strong><br>
      <br>
      Saves the HSV log when the High Speed VXI subsystem is set to Circular Mode.<br>
      <br>
      <strong>Example</strong>
      <pre>save_hsv_log</pre></td>
  </tr>
  <tr>
    <td><strong>save_log</strong></td>
    <td><strong>Syntax</strong>
      <pre>save_log</pre>
      <strong>Description</strong> <br>
      <br>
      Saves a critical log. The critical log continuously stores the last eight minutes of activity on all the critical channels.<br>
      <br>
      <strong>Example</strong>
      <pre>save_log</pre></td>
  </tr>
  <tr>
    <td><strong>set_channel</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>set_channel &lt;strChannelName&gt;, &lt;dblChannelValue&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Sets the registered channel to the specified value.<br>
      <br>
      <strong>Example</strong>
      <pre>set_channel Starter, 1</pre></td>
  </tr>
  <tr>
    <td><strong>set_otd_off</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>set_otd_off &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Turns off Open Transducer Detection for the SCP (all eight channels) of the channel name specified.<br>
      <br>
      <strong>Example</strong>
      <pre>set_otd_off &ldquo;EGT1&rdquo;</pre>
      Sets OTD off for all eight channels on the SCP that is scanning EGT1</td>
  </tr>
  <tr>
    <td><strong>set_otd_on</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>set_otd_on &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Turns on Open Transducer Detection for the SCP (all eight channels) of the channel name specified.<br>
      <br>
      <strong>Example</strong>
      <pre>set_otd_on &ldquo;EGT1&rdquo;</pre>
      Sets OTD on for all eight channels on the SCP that is scanning EGT1</td>
  </tr>
  <tr>
    <td><strong>show_view</strong></td>
    <td><strong>Syntax</strong>
      <pre>show_view &lt;strMachineName&gt;, &lt;strView&gt;, &lt;strPage&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Opens a real-time display view/page on a specific computer.<br>
      <br>
      <strong>Example</strong>
      <pre>show_view &ldquo;proDASRTD1&rdquo;, &ldquo;VibView&rdquo;, &ldquo;VibPage1&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>single_rig</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>single_rig &lt;strChannelName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Performs a single point calibration of the selected channel.<br>
      <br>
      <strong>Example</strong>
      <pre>single_rig &quot;N1&quot;</pre></td>
  </tr>
  <tr>
    <td><strong>srig</strong></td>
    <td><strong>Syntax</strong>
      <pre>srig &lt;channel name&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Performs a single point calibration of the selected channel and stores the slope and offset to a new sensor.<br>
      <br>
      <strong>Example</strong>
      <pre>srig test_rig</pre>
      Performs a single point calibration of the test_rig channel and saves the calibration values to a RIG sensor.</td>
  </tr>
  <tr>
    <td><strong>stabilize</strong></td>
    <td><strong>Syntax</strong>
      <pre>stabilize &lt;strCriteria&gt;, &lt;intTimeout&gt;, &lt;dblTolerence&gt;, &lt;dblStability&gt;, &lt;dblPeriod&gt;, [booSkipFlag], [strSkipMessage]</pre>
      <p class="Note">&lt;strCriteria&gt; can contain the following binary operators: &lt;=, &gt;, &lt;, &lt;&gt;, =&gt;, or =. Format: &lt;channel name&gt; &lt;operator&gt; &lt;value&gt;.</p>
      <strong>Description</strong><br>
      <br>
      Attempts to stabilize on a set-point using stability criteria.<br>
      <br>
      <strong>Example</strong>
      <pre>stabilize &ldquo;OilP&gt;200&rdquo;, 30, 0.5, 4, 10, SKIP, &ldquo;Press skip if necessary.&rdquo;</pre>
      <img src="images/stabilizegraph.gif" alt="Stabilize Graph" width="350" height="244"><br>
      <br>
      Waits until a channel value is:<br>
      <br>
      1. Within tolerance of the setpoint. <br>
      2. The standard deviation of value of the channel's value is less than the  stability criteria. <br>
      3. Time since stable is greater than or equal to period. <br>
      4. Period time T2 is met.<br>
      <br>
      - From T0 to T1 operation is similar to Wait Condition.<br>
      <br>
      - If timeout is reached with SKIP not specified, timers continue to operate. On second consecutive timeout, Skip button becomes enabled, timers continue. <br>
      <br>
      - If setpoint and stability are met; stabilize timers are enabled.<br>
      <br>
      - Function continues to operate until stability is lost or period time is met. <br>
      If Skip button was pressed during time T0 to T1 stabilizegv = Bad RTE value<br>
      <p class="Note">If skip is enabled, skip continues to stay enabled through out function execution.</p>
      <strong>Function Returns:</strong><br>
      <br>
      <strong>stabilizegv Time T0 to T3</strong><br>
      <blockquote> - Time since the function was invoked to the time channel value dropped out of stability or period was met.<br>
        - If stability was never met and function was terminated by skip. Stabilizegv = Bad RTE value.<br>
        periodgv T1 to T3.<br>
      </blockquote>
      <strong>periodgv T1 to T3</strong><br>
      <blockquote>- Time since the channel value becomes stable and to the time the channel dropped out of stability or period time was met.</blockquote>
      <strong>skipgv</strong><br>
      <blockquote> - If skip was enabled and clicked skipgv = 1.00<br>
        - If function terminates and skip was not pressed skipgv = 0.00<br>
      </blockquote>
      <strong>chanstabgv</strong><br>
      <blockquote> - Channels&rsquo; last value when the function terminated.</blockquote></td>
  </tr>
  <tr>
    <td><strong>start_hsv_log</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>start_hsv_log &lt;strTestStep&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Starts the HSV log when the High Speed VXI subsystem is set to Continuous mode.<br>
      <br>
      <strong>Example</strong>
      <pre>start_hsv_log &ldquo;testone&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>start_log</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>start_log &lt;strLogName&gt;, &lt;strTestStep&gt;, &lt;strTestComment&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Starts a user-named transient log. The log name must correspond to a transient log definition for the current configuration.<br>
      <br>
      <strong>Example</strong>
      <pre>start_log &ldquo;Vib_Accel&rdquo;, &ldquo;testone&rdquo;, &ldquo;TestComment&rdquo;</pre></td>
  </tr>
  <tr>
    <td><strong>stop_hsv_log</strong></td>
    <td><strong>Syntax</strong>
      <pre>stop_hsv_log</pre>
      <strong>Description</strong><br>
      <br>
      Stops the HSV log when the High Speed VXI subsystem is set to Continuous Mode.<br>
      <br>
      <strong>Example</strong>
      <pre>stop_hsv_log</pre></td>
  </tr>
  <tr>
    <td><strong>stop_log</strong></td>
    <td><strong>Syntax</strong>
      <pre>stop_log &lt;strLogName&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Stops all instances of the specified transient log. It saves the longest instance of the transient log to disk.<br>
      <br>
      <strong>Example</strong>
      <pre>stop_log &ldquo;Vib_Accel&rdquo;</pre>
      If three instances of the log are running (e.g.: <em>Vib_accel.1</em>, <em>Vib_accel.2</em> and <em>Vib_accel.3</em>), all three logs are stopped, but only <strong><em>Vib_accel.1</em></strong> is saved (since the data in <em>Vib_accel.2</em> and <em>Vib_accel.3</em>, which were started after <em>Vib_accel.1</em> are included in <em>Vib_accel.1</em>).</td>
  </tr>
  <tr>
    <td><strong>wait</strong></td>
    <td><strong>Syntax</strong>
      <pre>wait &lt;strCriteria&gt;, &lt;dblTimeout&gt;, &lt;dblTolerence&gt;, [booTOCFlag], [dblTOCTimeout], [strTOCText], [booSkipFlag], [strSkipText], [booMsgFlag], [strMsgText]</pre>
      <p class="Note">&lt;strCriteria&gt; can contain the following binary operators: &lt;=, &gt;, &lt;, &lt;&gt;, =&gt;, or =. Format: &lt;channel name&gt; &lt;operator&gt; &lt;value&gt; </p>
      <strong>Description</strong><br>
      <br>
      Waits for a channel to reach a certain value or pass a certain threshold.<br>
      <br>
      <strong>Example</strong><br>
      <pre>wait &quot;N2 = &quot; &amp; N2PPChk (local variable)</pre>
      <pre>wait &ldquo;OilP=56.5&rdquo;, 15, 1.5, TOC, 3, &ldquo;Timeout&rdquo;, SKIP, &ldquo;Skip it&rdquo;</pre>
      <pre>wait &ldquo;OilP=56.5&rdquo;, 15, 1.5, ,,,,,MSG, &ldquo;Waiting.&rdquo;</pre>
      <pre>wait &ldquo;OilP=56.5&rdquo;, 15, 1.5</pre>
      <img src="images/waitgraph.gif" alt="Wait Graph" width="350" height="270"><br>
      <br>
      <strong>Condition 1</strong>
      <pre>Wait &ldquo;channel name &lt;comp&gt; Setpoint&rdquo;, timeout, tolerance</pre>
      <br>
      Wait &quot;channel_1 = 500&ldquo;, 50, 10
      <blockquote> - Waits for channel value to reach condition within 50 seconds.<br>
        - If condition is met function ends and the next line of code executes.<br>
        - If condition is not met in 50 seconds function exits and the next line of code executes.<br>
        - Function exits when either Setpoint is reached or time is reached.<br>
        - tocgv = Bad RTE valve.<br>
      </blockquote>
      <strong>Condition 2</strong>
      <pre>Wait &ldquo;channel name &lt;comp&gt; Setpoint&rdquo;, timeout, tolerance, SKIP</pre>
      <pre>Wait &quot;channel_1 = 500&ldquo;, 50, 10,,,, SKIP</pre>
      <blockquote> - Operates same as above <strong>except</strong>: On first timeout, <strong>Skip</strong> Button is active </blockquote>
      <strong>Condition 3</strong>
      <pre>Wait &ldquo;channel_1 &lt;comp&gt; Setpoint&rdquo;, timeout, tolerance,,,,,, MSG,&rdquo; &ldquo;</pre>
      <pre>Wait &quot;channel_1 = 500&ldquo;, 50, 10,,,,,, MSG, &ldquo;Failed to reach Setpoint&rdquo;</pre>
      <blockquote> - Operates the same as condition 1.<br>
        - On first timeout msg text is written to the result window.<br>
        - On second timeout Skip Button becomes enabled.<br>
      </blockquote>
      <strong>Condition 4</strong>
      <pre>Wait &ldquo;channel_1 &lt;comp&gt; Setpoint&rdquo;, timeout, tolerance, TOC, Timeout</pre>
      <pre>Wait &quot;channel_1 = 500&ldquo;, 50, 10, TOC, 50</pre>
      <strong>Time to Condition</strong>
      <blockquote> -	From T0 to T1 function operates same as Condition 1.<br>
      </blockquote>
      <strong>Time on Condition</strong><br>
      <blockquote>- Upon reaching Setpoint, mode is now Time on Condition.<br>
        - Continues to measure if the channel&rsquo;s value exceeds the tolerance of the set point prior to TOC timeout.<br>
        - On TOC timeout and the value is still within the tolerance of the Setpoint, the TOC text message is displayed in the result window. <strong>NOTE</strong>: Timers are <strong>NOT</strong> reset.<br>
        - If there is no TOC text present, on TOC Timeout the function terminates and the next line of code is executed.<br>
        - If TOC text is present, and SKIP switch is present. On TOC timeout, Skip Button becomes enabled.<br>
        - If TOC text is present with NO/Skip Skip Button becomes enabled after the second consecutive timeout.<br>
        - On function termination, function returns, tocgv equal to the number of seconds the Setpoint was met until the function terminated.<br>
        - In TOC mode, if Skip is declared, as stated before when TOC timeout is met, skip is enabled, TOCtimeout text or default TOCtimeout text is written to the result window.<br>
        Function timers continue to be active until skip is clicked, function terminates returning tocgv.<br>
        - If function times out with MSG specified, msgtext is written to the result window, Skip Button is enabled after the second consecutive timeout, again timers continue to be active.
        <p class="Note">SKIP &amp; MSG switches can not be enabled simultaneously.</p>
      </blockquote></td>
  </tr>
  <tr>
    <td><strong>warning</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>warning &lt;strMessage&gt;</pre>
      <strong>Description</strong><br>
      <br>
      Displays a message in red on the Test Instruction window. The text will be wrapped automatically if it doesn&rsquo;t fit on a single line.<br>
      <br>
      <strong>Example</strong>
      <pre>warning &ldquo;N1 is at: &ldquo; &amp; cv_N1</pre>
      &ldquo;If EGT reaches 660 C, move fuel level to &lsquo;cut off&rsquo;.&rdquo; </td>
  </tr>
  <tr>
    <td><strong>While Wend</strong></td>
    <td><strong>Syntax</strong><br>
      <pre>While &lt;boolean condition&gt; &lt;statement&gt; Wend</pre>
      <strong>Description</strong><br>
      <br>
      The While loop allows iterative processes. Condition is a Boolean expression, which can operate with channels and variables (name&lt;comparator&gt; value).<br>
      <br>
      <strong>Example</strong>
      <pre>loop =0
        <br>While cv_N1 &lt;= 3000
     If loop &gt; 30 Then quit
     loop = loop + 1
     delay 10
Wend</pre>
      result &quot;N1 greater than 3000&quot;</td>
  </tr>
</table>
<h4 id="ReturnValues">Global Variable Return Values</h4>
<table class="Table-Grey">
  <tr>
    <th>Value</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>0</td>
    <td>Command successful, no errors</td>
  </tr>
  <tr>
    <td>1</td>
    <td>Unknown error</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Invalid channel error</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Throttle not in DAM mode</td>
  </tr>
  <tr>
    <td>4</td>
    <td>Command timeout</td>
  </tr>
  <tr>
    <td>5</td>
    <td>Move in progress</td>
  </tr>
  <tr>
    <td>6</td>
    <td>DAM mode is paused</td>
  </tr>
  <tr>
    <td>7</td>
    <td>DAM mode is stopped</td>
  </tr>
  <tr>
    <td>8</td>
    <td>Engine has not been selected</td>
  </tr>
  <tr>
    <td>9</td>
    <td>RTP Status shows not ready</td>
  </tr>
  <tr>
    <td>10</td>
    <td>Go command before MoveD command</td>
  </tr>
</table>
<h3><strong>Throttle Auto Missions Run Using proDAS Test Procedures</strong></h3>
<p>Using auto mission scripts, Throttle control commands can be sent from MDS' proDAS test procedures. Power setting commands become fully integrated with step-by-step test instructions and data recording. Test procedure commands are communicated via Ethernet.</p>
<p>Setpoint and feedbacks for closed loop control are sent from proDAS to the throttle controller via an OPC connection. These values are sent to the Throttle in engineering units and the DAMMoveChannel_Min and DAMMoveChannel_Max values in the Throttle configuration are used to scale the inputs to a value from 0 - 100%. The set point is sent to the controller software via the display software. This value is read in engineering units and the DAMMoveChannel_Min and DAMMoveChannel_Max values are used to scale the set point to a value from 0 - 100%.</p>
<p>The advantage of using digital control over analogue control is that because command and feedback values are sent digitally via an Ethernet link, there are no analogue signals to calibrate. It is also possible to provide feedback from calculated channels in proDAS, for example parameters corrected to Standard Day conditions. Another advantage to using proDAS test procedures is the integration between Throttle movements and data recording. Steady state and transient logs can be started and stopped at the proper time without intervention from the operator allowing for more consistent testing.</p>
<p>If communication between the Data Acquisition System and the Throttle System are lost while in Auto Throttle, the last commanded Throttle position is maintained and the Throttle System is placed under manual control.</p>
<p>The following digital commands are supported:</p>
<table cellspacing="1" class="Table-Grey">
  <tr>
    <th width="25%">Command</th>
    <th width="75%">Description</th>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_startreadonlymode()</strong></td>
    <td vAlign="top">Auto Throttle Mode data can be displayed but the system cannot be run in Auto Throttle Mode. This allows the test procedure to run get commands but not set commands.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_startautomode()</strong></td>
    <td vAlign="top">Puts the Throttle System into Auto Throttle Mode. The system must be in RUN Mode and no errors, interlocks or trips are set.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_stopautomode()</strong></td>
    <td vAlign="top">Puts the system into Manual Mode.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_getchannel()</strong></td>
    <td vAlign="top">Reads the current value of the given PLC tag.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_ischannelvalid()</strong></td>
    <td vAlign="top">Verifies the alias of the registered PLC tag.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_setchannel()</strong></td>
    <td vAlign="top">Sets the registered PLC tag to the supplied value.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_move()</strong></td>
    <td vAlign="top">Performs the synchronous engine movement.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_moveasync()</strong></td>
    <td vAlign="top">Starts the engine movement asynchronously and returns control back to the test procedure.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_movedelay()</strong></td>
    <td vAlign="top">Sets up the engine movement but the movement isn't initiated until the at_movedelaystart() command is issued.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_movedelaystart()</strong></td>
    <td vAlign="top">Performs the synchronous engine movement(s) which were specified by the previously sent at_movedelay() commands.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_movedelaystartasync()</strong></td>
    <td vAlign="top">Starts engine movement(s) which were specified by the previously sent at_movedelay() commands asynchronously and returns control back to the test procedure.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_pause()</strong></td>
    <td vAlign="top">Suspends the engine movement.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_continue()</strong></td>
    <td vAlign="top">Resumes the engine movement.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_abortmove</strong><strong>()</strong></td>
    <td vAlign="top">Stops the engine movement but leaves the system in auto mode.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_getstatus</strong><strong>()</strong></td>
    <td vAlign="top">Retrieves the Throttle Auto Mode status.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_setopenloopmode()</strong></td>
    <td vAlign="top">Puts the system into Open Loop mode.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_setclosedloopmode()</strong></td>
    <td vAlign="top">Puts the system into Closed Loop mode.</td>
  </tr>
  <tr>
    <td vAlign="top"><strong>at_runmission()</strong></td>
    <td vAlign="top">Launches the mission script located on the tThrottle display computer.</td>
  </tr>
</table>
<p>The script below is an example of a proDAS test procedure auto mission script.</p>
<br>
<div class="Container"><img src="images/AutoThrottleScript.png" alt="Auto Throttle Script" width="851" height="253"></div>
<p><br>
  Points to remember when creating a proDAS test procedure:</p>
<ul>
  <li>test Procedures are not case sensitive</li>
  <li>test Procedures must issue an at_startautomode command before any move or setchannel commands</li>
  <li>test Procedures must issue an at_stopautomode command to allow other clients to run auto Throttle commands</li>
  <li>a return code should be used (retCode). This ensures that the auto-mission is stopped if an error is returned and it aids debugging the script</li>
</ul>
<p class="Note">If a return code is not used, the auto mission continues even if a command is not successfully completed.</p>
<h3>VBScript Command Code Table</h3>
<table class="Table-Grey">
  <tr>
    <th>Syntax Name</th>
    <th>Description and Example</th>
  </tr>
  <tr>
    <td><strong>Function - Abs</strong></td>
    <td>Returns the absolute value of a number.
      <pre>Abs(number)</pre>
      The <em>number</em> argument can be any valid numeric expression. If <em>number</em> contains Null, <strong>Null </strong>is returned; if it is an uninitialized variable, zero is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The absolute value of a number is its unsigned magnitude. For example, <strong>Abs(</strong>-1<strong>)</strong> and <strong>Abs(</strong>1<strong>)</strong> both return 1.<br>
      <br>
      The following example uses the <strong>Abs</strong> function to compute the absolute value of a number:
      <pre>Dim MyNumber
MyNumber = <strong>Abs(</strong>50.3) ' Returns 50.3.
MyNumber = <strong>Abs(</strong>-50.3) ' Returns 50.3.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Array</strong></td>
    <td>Returns a <strong>Variant</strong> containing an array.
      <pre>Array(<em>arglist</em>)</pre>
      The required <em>arglist</em> argument is a comma-delimited list of values that are assigned to the elements of an array contained with the <strong>Variant</strong>. If no arguments are specified, an array of zero length is created.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The notation used to refer to an element of an array consists of the variable name followed by parentheses containing an index number indicating the desired element. In the following example, the first statement creates a variable named A. The second statement assigns an array to variable A. The last statement assigns the value contained in the second array element to another variable.
      <pre>Dim A
A = <strong>Array</strong>(10,20,30)
B = A(2)   ' B is now 30.</pre>
      <p class="Note">A variable that is not declared as an array can still contain an array. Although a Variant variable containing an array is conceptually different from an array variable containing Variant elements, the array elements are accessed in the same way.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Asc</strong></td>
    <td>Returns the ANSI character code corresponding to the first letter in a string.
      <pre>Asc(string)</pre>
      The <em>string</em> argument is any valid string expression. If the <em>string</em> contains no characters, a run-time error occurs.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In the following example, <strong>Asc</strong> returns the ANSI character code of the first letter of each string:
      <pre>Dim MyNumber
MyNumber = <strong>Asc</strong>(&quot;A&quot;)       ' Returns 65.
MyNumber = <strong>Asc</strong>(&quot;a&quot;)       ' Returns 97.
MyNumber = <strong>Asc</strong>(&quot;Apple&quot;)   ' Returns 65.</pre>
      <p class="Note">The AscB function is used with byte data contained in a string. Instead of returning the character code for the first character, AscB returns the first byte. AscW is provided for 32-bit platforms that use Unicode characters. It returns the Unicode (wide) character code, thereby avoiding the conversion from Unicode to ANSI.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Atn</strong></td>
    <td>Returns the arctangent of a number.
      <pre>Atn(number)</pre>
      The <em>number</em> argument can be any valid numeric expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Atn</strong> function takes the ratio of two sides of a right triangle (<em>number</em>) and returns the corresponding angle in radians. The ratio is the length of the side opposite the angle divided by the length of the side adjacent to the angle. The range of the result is -pi /2 to pi/2 radians.<br>
      <br>
      To convert degrees to radians, multiply degrees by pi/180. To convert radians to degrees, multiply radians by 180/pi.<br>
      <br>
      The following example uses <strong>Atn</strong> to calculate the value of pi:
      <pre>Dim pi
pi = 4 * <strong>Atn</strong>(1)   ' Calculate the value of pi.</pre>
      <p class="Note">Atn is the inverse trigonometric function of Tan, which takes an angle as its argument and returns the ratio of two sides of a right triangle. Do not confuse Atn with the cotangent, which is the simple inverse of a tangent (1/tangent).</p></td>
  </tr>
  <tr>
    <td><strong>Function - CBool</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Boolean</strong>.
      <pre>CBool(expression)</pre>
      <p>The <em>expression</em> argument is any valid expression.</p>
      <strong>Remarks</strong><br>
      <br>
      If <em>expression</em> is zero, <strong>False</strong> is returned; otherwise, <strong>True</strong> is returned. If <em>expression</em> can't be interpreted as a numeric value, a run-time error occurs.<br>
      <br>
      The following example uses the <strong>CBool</strong> function to convert an expression to a <strong>Boolean</strong>. If the expression evaluates to a nonzero value, <strong>CBool</strong> returns <strong>True</strong>; otherwise, it returns <strong>False</strong>.
      <pre>Dim A, B, Check
A = 5: B = 5           ' Initialize variables.
Check = <strong>CBool</strong>(A = B)   ' Check contains True.
A = 0                  ' Define variable.
Check = <strong>CBool</strong>(A)       ' Check contains False.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CByte</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Byte</strong>.
      <pre>CByte(expression)</pre>
      The <em>expression</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CByte</strong> to force byte arithmetic in cases where currency, single-precision, double-precision, or integer arithmetic normally would occur.<br>
      <br>
      Use the <strong>CByte</strong> function to provide internationally aware conversions from any other data type to a <strong>Byte</strong> subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.<br>
      <br>
      If <em>expression</em> lies outside the acceptable range for the byte subtype, an error occurs. The following example uses the <strong>CByte</strong> function to convert an expression to a byte:<br>
      <pre>Dim MyDouble, MyByte
MyDouble = 125.5678        ' MyDouble is a Double.
MyByte = <strong>CByte</strong>(MyDouble)   ' MyByte contains 126.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CCur</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Currency</strong>.
      <pre>CCur(expression)</pre>
      The <em>expression</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CCur</strong> to force currency arithmetic in cases where integer arithmetic normally would occur.<br>
      <br>
      You should use the <strong>CCur</strong> function to provide internationally aware conversions from any other data type to a <strong>Currency</strong> subtype. For example, different decimal separators and thousands separators are properly recognized depending on the locale setting of your system.<br>
      <br>
      The following example uses the <strong>CCur</strong> function to convert an expression to a Currency:<br>
      <pre>Dim MyDouble, MyCurr
MyDouble = 543.214588         ' MyDouble is a Double.
<br>' Convert result of MyDouble * 2 (1086.429176) to a Cur (1086.4292).
MyCurr = <strong>CCur</strong>(MyDouble * 2)</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CDate</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Date</strong>.
      <pre>CDate(<em>date</em>)</pre>
      The <em>date</em> argument is any valid date expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      Use the <strong>IsDate</strong> function to determine if <em>date</em> can be converted to a date or time. <strong>CDate</strong> recognizes date literals and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.<br>
      <br>
      <strong>CDate</strong> recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.<br>
      <br>
      The following example uses the <strong>CDate</strong> function to convert a string to a date. In general, hard coding dates and times as strings (as shown in this example) is not recommended. Use date and time literals (such as #10/19/1962#, #4:45:23 PM#) instead.<br>
      <pre>MyDate = &quot;October 19, 1962&quot;   ' Define date.
MyShortDate = <strong>CDate</strong>(MyDate)   ' Convert to Date data type.
MyTime = &quot;4:35:47 PM&quot;         ' Define time.
MyShortTime = <strong>CDate</strong>(MyTime)   ' Convert to Date data type.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CDbl</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Double</strong>.
      <pre>CDbl(expression)</pre>
      The <em>expression</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CDbl</strong> or <strong>CSng</strong> to force double-precision or single-precision arithmetic in cases where currency or integer arithmetic normally would occur.<br>
      <br>
      Use the <strong>CDbl</strong> function to provide internationally aware conversions from any other data type to a <strong>Double</strong> subtype. For example, different decimal separators and thousands separators are properly recognized depending on the locale setting of your system.<br>
      <br>
      This example uses the <strong>CDbl</strong> function to convert an expression to a <strong>Double</strong>.<br>
      <pre>Dim MyCurr, MyDouble
MyCurr = CCur(234.456784)              ' MyCurr is a Currency (234.4567).
MyDouble = <strong>CDbl</strong>(MyCurr * 8.2 * 0.01)   ' Convert result to a Double (19.2254576).</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Chr</strong></td>
    <td>Returns the character associated with the specified ANSI character code.
      <pre>Chr(charcode)</pre>
      The <em>charcode</em> argument is a number that identifies a character.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      Numbers from 0 to 31 are the same as standard, nonprintable ASCII codes. For example, <strong>Chr(</strong>10<strong>)</strong> returns a linefeed character.<br>
      <br>
      The following example uses the <strong>Chr</strong> function to return the character associated with the specified character code: <br>
      <pre>Dim MyChar
MyChar = <strong>Chr</strong>(65)   ' Returns A.
MyChar = <strong>Chr</strong>(97)   ' Returns a.
MyChar = <strong>Chr</strong>(62)   ' Returns &gt;.
MyChar = <strong>Chr</strong>(37)   ' Returns %.</pre>
      <p class="Note">The ChrB function is used with byte data contained in a string. Instead of returning a character, which may be one or two bytes, ChrB always returns a single byte. ChrW is provided for 32-bit platforms that use Unicode characters. Its argument is a Unicode (wide) character code, thereby avoiding the conversion from ANSI to Unicode.</p></td>
  </tr>
  <tr>
    <td><strong>Function - CInt</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Integer</strong>.
      <pre>CInt(expression)</pre>
      The <em>expression</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CInt</strong> or <strong>CLng</strong> to force integer arithmetic in cases where currency, single-precision, or double-precision arithmetic normally would occur.<br>
      <br>
      Use the <strong>CInt</strong> function to provide internationally aware conversions from any other data type to an <strong>Integer</strong> subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.<br>
      <br>
      If <em>expression</em> lies outside the acceptable range for the Integer subtype, an error occurs.<br>
      <br>
      The following example uses the <strong>CInt</strong> function to convert a value to an Integer:<br>
      <pre>Dim MyDouble, MyInt
MyDouble = 2345.5678     ' MyDouble is a Double.
MyInt = <strong>CInt</strong>(MyDouble)   ' MyInt contains 2346.</pre>
      <p class="Note">CInt differs from the Fix and Int functions, which truncate, rather than round, the fractional part of a number. When the fractional part is exactly 0.5, the CInt function always rounds it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2.</p></td>
  </tr>
  <tr>
    <td><strong>Function - CLng</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Long</strong>.
      <pre>CLng(expression)</pre>
      The <em>expression</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CInt</strong> or <strong>CLng</strong> to force integer arithmetic in cases where currency, single-precision, or double-precision arithmetic normally would occur.<br>
      <br>
      Use the <strong>CLng</strong> function to provide internationally aware conversions from any other data type to a <strong>Long</strong> subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.<br>
      <br>
      If <em>expression</em> lies outside the acceptable range for the Long subtype, an error occurs.<br>
      <br>
      The following example uses the <strong>CLng</strong> function to convert a value to a Long:<br>
      <pre>Dim MyVal1, MyVal2, MyLong1, MyLong2
MyVal1 = 25427.45: MyVal2 = 25427.55   ' MyVal1, MyVal2 are Doubles.
MyLong1 = <strong>CLng</strong>(MyVal1)   ' MyLong1 contains 25427.
MyLong2 = <strong>CLng</strong>(MyVal2)   ' MyLong2 contains 25428.</pre>
      <p class="Note">CLng differs from the Fix and Int functions, which truncate, rather than round, the fractional part of a number. When the fractional part is exactly 0.5, the CLng function always rounds it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Cos</strong></td>
    <td>Returns the cosine of an angle.
      <pre>Cos(number)</pre>
      The <em>number</em> argument can be any valid numeric expression that expresses an angle in radians.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Cos</strong> function takes an angle and returns the ratio of two sides of a right triangle. The ratio is the length of the side adjacent to the angle divided by the length of the hypotenuse. The result lies in the range -1 to 1.<br>
      <br>
      To convert degrees to radians, multiply degrees by pi /180. To convert radians to degrees, multiply radians by 180/pi.<br>
      <br>
      The following example uses the <strong>Cos</strong> function to return the cosine of an angle:<br>
      <pre>Dim MyAngle, MySecant
MyAngle = 1.3                 ' Define angle in radians.
MySecant = 1 / <strong>Cos</strong>(MyAngle)   ' Calculate secant.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CreateObject</strong></td>
    <td>Creates and returns a reference to an Automation object.
      <pre>CreateObject(servername.typename [<strong>,</strong> location])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>servername</em></dt>
        <dd>Required. The name of the application providing the object.</dd>
        <dt><em>typename</em></dt>
        <dd>Required. The type or class of the object to create.</dd>
        <dt><em>location</em></dt>
        <dd>Optional. The name of the network server where the object is to be created.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Automation servers provide at least one type of object. For example, a word-processing application may provide an application object, a document object, and a toolbar object.<br>
      <br>
      To create an Automation object, assign the object returned by <strong>CreateObject</strong> to an object variable:<br>
      <pre>Dim ExcelSheet
Set ExcelSheet = <strong>CreateObject(</strong>&quot;Excel.Sheet&quot;)</pre>
      This code starts the application that creates the object (in this case, a Microsoft Excel spreadsheet). Once an object is created, refer to it in code using the object variable you defined. As shown in the following example, you can access properties and methods of the new object using the object variable, <code>ExcelSheet</code>, and other Excel objects, including the Application object and the ActiveSheet.Cells collection:<br>
      <pre>' Make Excel visible through the Application object.
ExcelSheet.Application.Visible = True
' Place some text in the first cell of the sheet.
ExcelSheet.ActiveSheet.Cells(1,1).Value = &quot;This is column A, row 1&quot;
' Save the sheet.
ExcelSheet.SaveAs &quot;C:\DOCS\TEST.XLS&quot;
' Close Excel with the Quit method on the Application object.
ExcelSheet.Application.Quit
' Release the object variable.
Set ExcelSheet = Nothing</pre>
      Creating an object on a remote server can only be accomplished when Internet security is turned off. You can create an object on a remote networked computer by passing the name of the computer to the <em>servername</em> argument of <strong>CreateObject</strong>. That name is the same as the machine name portion of a share name. For a network share named &quot;\\myserver\public&quot;, the <em>servername</em> is &quot;myserver&quot;. In addition, you can specify <em>servername</em> using DNS format or an IP address.<br>
      The following code returns the version number of an instance of Excel running on a remote network computer named &quot;myserver&quot;:<br>
      <pre>Function GetVersion
   Dim XLApp
   Set XLApp = CreateObject(&quot;Excel.Application&quot;, &quot;MyServer&quot;)
   GetVersion = XLApp.Version
End Function</pre>
      An error occurs if the specified remote server does not exist or cannot be found. </td>
  </tr>
  <tr>
    <td><strong>Function - CSng</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>Single</strong>.
      <pre>CSng(expression)</pre>
      <p>The <em>expression</em> argument is any valid expression.</p>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the data type conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CDbl</strong> or <strong>CSng</strong> to force double-precision or single-precision arithmetic in cases where currency or integer arithmetic normally would occur.<br>
      <br>
      Use the <strong>CSng</strong> function to provide internationally aware conversions from any other data type to a <strong>Single</strong> subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.<br>
      <br>
      If <em>expression</em> lies outside the acceptable range for the Single subtype, an error occurs.<br>
      <br>
      The following example uses the <strong>CSng</strong> function to convert a value to a <strong>Single</strong>:<br>
      <pre>Dim MyDouble1, MyDouble2, MySingle1, MySingle2   ' MyDouble1, MyDouble2 are Doubles.
MyDouble1 = 75.3421115: MyDouble2 = 75.3421555
MySingle1 = <strong>CSng</strong>(MyDouble1)   ' MySingle1 contains 75.34211.
MySingle2 = <strong>CSng</strong>(MyDouble2)   ' MySingle2 contains 75.34216.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - CStr</strong></td>
    <td>Returns an expression that has been converted to a <strong>Variant</strong> of subtype <strong>String</strong>.
      <pre>CStr(expression)</pre>
      <p>The <em>expression</em> argument is any valid expression.</p>
      <strong>Remarks</strong><br>
      <br>
      In general, you can document your code using the data type conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <strong>CStr</strong> to force the result to be expressed as a <strong>String</strong>.<br>
      <br>
      You should use the <strong>CStr</strong> function instead of <strong>Str</strong> to provide internationally aware conversions from any other data type to a <strong>String</strong> subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system.<br>
      <br>
      The data in <em>expression</em> determines what is returned according to the following table:<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>If expression is</th>
          <th>CStr returns</th>
        </tr>
        <tr>
          <td>Boolean</td>
          <td>A <strong>String</strong> containing <strong>True</strong> or <strong>False</strong>.</td>
        </tr>
        <tr>
          <td>Date</td>
          <td>A <strong>String</strong> containing a date in the short-date format of your system.</td>
        </tr>
        <tr>
          <td>Null</td>
          <td>A run-time error.</td>
        </tr>
        <tr>
          <td>Empty</td>
          <td>A zero-length <strong>String</strong> (&quot;&quot;).</td>
        </tr>
        <tr>
          <td>Error</td>
          <td>A <strong>String</strong> containing the word Error followed by the error number.</td>
        </tr>
        <tr>
          <td>Other numeric</td>
          <td>A <strong>String</strong> containing the number.</td>
        </tr>
      </table>
      The following example uses the <strong>CStr</strong> function to convert a numeric value to a <strong>String</strong>:<br>
      <pre>Dim MyDouble, MyString
MyDouble = 437.324         ' MyDouble is a Double.
MyString = <strong>CStr</strong>(MyDouble)   ' MyString contains &quot;437.324&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Date</strong></td>
    <td>Returns the current system date.
      <pre>Date</pre>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Date</strong> function to return the current system date:<br>
      <pre>Dim MyDate
MyDate = <strong>Date</strong>   ' MyDate contains the current system date.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - DateAdd</strong></td>
    <td>Returns a date to which a specified time interval has been added.
      <pre>DateAdd(interval, number, date)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>interval</em></dt>
        <dd>Required. String expression that is the interval you want to add. See Settings section for values.</dd>
        <dt><em>number</em></dt>
        <dd>Required. Numeric expression that is the number of interval you want to add. The numeric expression can either be positive, for dates in the future, or negative, for dates in the past.</dd>
        <dt><em>date</em></dt>
        <dd>Required. <strong>Variant</strong> or literal representing the date to which <em>interval</em> is added.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>interval</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>yyyy</td>
          <td>Year</td>
        </tr>
        <tr>
          <td>q</td>
          <td>Quarter</td>
        </tr>
        <tr>
          <td>m</td>
          <td>Month</td>
        </tr>
        <tr>
          <td>y</td>
          <td>Day of year</td>
        </tr>
        <tr>
          <td>d</td>
          <td>Day</td>
        </tr>
        <tr>
          <td>w</td>
          <td>Weekday</td>
        </tr>
        <tr>
          <td>ww</td>
          <td>Week of year</td>
        </tr>
        <tr>
          <td>h</td>
          <td>Hour</td>
        </tr>
        <tr>
          <td>n</td>
          <td>Minute</td>
        </tr>
        <tr>
          <td>s</td>
          <td>Second</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      You can use the <strong>DateAdd</strong> function to add or subtract a specified time interval from a date. For example, you can use <strong>DateAdd</strong> to calculate a date 30 days from today or a time 45 minutes from now. To add days to <em>date</em>, you can use Day of Year (&quot;y&quot;), Day (&quot;d&quot;), or Weekday (&quot;w&quot;).<br>
      <br>
      The <strong>DateAdd</strong> function won't return an invalid date. The following example adds one month to January 31:<br>
      <pre>NewDate = <strong>DateAdd</strong>(&quot;m&quot;, 1, &quot;31-Jan-95&quot;)</pre>
      In this case, <strong>DateAdd</strong> returns 28-Feb-95, not 31-Feb-95. If <em>date</em> is 31-Jan-96, it returns 29-Feb-96 because 1996 is a leap year.<br>
      <br>
      If the calculated date would precede the year 100, an error occurs.<br>
      <br>
      If number isn't a <strong>Long</strong> value, it is rounded to the nearest whole number before being evaluated.</td>
  </tr>
  <tr>
    <td><strong>Function - DateDiff</strong></td>
    <td>Returns the number of intervals between two dates.
      <pre><strong>DateDiff</strong>(interval, date1, date2 [,firstdayofweek[, firstweekofyear]])</pre>
      <br>
      The <strong>DateDiff</strong> function syntax has these parts:<br>
      <strong>Arguments</strong>
      <dl>
        <dt><em>interval</em></dt>
        <dd>Required. String expression that is the interval you want to use to calculate the differences between <em>date1</em> and <em>date2</em>. See Settings section for values.</dd>
        <dt><em>date1, date2</em></dt>
        <dd>Required. Date expressions. Two dates you want to use in the calculation.</dd>
        <dt><em>firstdayofweek</em></dt>
        <dd>Optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.</dd>
        <dt><em>firstweekofyear</em></dt>
        <dd>Optional. Constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>interval</em> argument can have the following values:
      <table class="Table-Grey">
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>yyyy</td>
          <td>Year</td>
        </tr>
        <tr>
          <td>q</td>
          <td>Quarter</td>
        </tr>
        <tr>
          <td>m</td>
          <td>Month</td>
        </tr>
        <tr>
          <td>y</td>
          <td>Day of year</td>
        </tr>
        <tr>
          <td>d</td>
          <td>Day</td>
        </tr>
        <tr>
          <td>w</td>
          <td>Weekday</td>
        </tr>
        <tr>
          <td>ww</td>
          <td>Week of year</td>
        </tr>
        <tr>
          <td>h</td>
          <td>Hour</td>
        </tr>
        <tr>
          <td>n</td>
          <td>Minute</td>
        </tr>
        <tr>
          <td>s</td>
          <td>Second</td>
        </tr>
      </table>
      <br>
      The <em>firstdayofweek</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystemDayOfWeek</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday (default)</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
      </table>
      <br>
      The <em>firstweekofyear</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystem</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbFirstJan1</td>
          <td>1</td>
          <td>Start with the week in which January 1 occurs (default).</td>
        </tr>
        <tr>
          <td>vbFirstFourDays</td>
          <td>2</td>
          <td>Start with the week that has at least four days in the new year.</td>
        </tr>
        <tr>
          <td>vbFirstFullWeek</td>
          <td>3</td>
          <td>Start with the first full week of the new year.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      You can use the <strong>DateDiff</strong> function to determine how many specified time intervals exist between two dates. For example, you might use <strong>DateDiff</strong> to calculate the number of days between two dates, or the number of weeks between today and the end of the year.<br>
      <br>
      To calculate the number of days between <em>date1</em> and <em>date2</em>, you can use either Day of year (&quot;y&quot;) or Day (&quot;d&quot;). When <em>interval </em>is Weekday (&quot;w&quot;), <strong>DateDiff</strong> returns the number of weeks between the two dates. If <em>date1</em> falls on a Monday, <strong>DateDiff</strong> counts the number of Mondays until <em>date2</em>. It counts <em>date2</em> but not <em>date1</em>. If <em>interval</em> is Week (&quot;ww&quot;), however, the <strong>DateDiff</strong> function returns the number of calendar weeks between the two dates. It counts the number of Sundays between <em>date1</em> and <em>date2</em>. <strong>DateDiff</strong> counts <em>date2</em> if it falls on a Sunday; but it doesn't count <em>date1</em>, even if it does fall on a Sunday.<br>
      <br>
      If <em>date1</em> refers to a later point in time than <em>date2</em>, the <strong>DateDiff</strong> function returns a negative number.<br>
      <br>
      The <em>firstdayofweek</em> argument affects calculations that use the &quot;w&quot; and &quot;ww&quot; interval symbols.<br>
      <br>
      If <em>date1</em> or <em>date2</em> is a date literal, the specified year becomes a permanent part of that date. However, if <em>date1</em> or <em>date2</em> is enclosed in quotation marks (&quot; &quot;) and you omit the year, the current year is inserted in your code each time the <em>date1</em> or <em>date2</em> expression is evaluated. This makes it possible to write code that can be used in different years.<br>
      <br>
      When comparing December 31 to January 1 of the immediately succeeding year, <strong>DateDiff</strong> for Year (&quot;yyyy&quot;) returns 1 even though only a day has elapsed.<br>
      <br>
      The following example uses the <strong>DateDiff</strong> function to display the number of days between a given date and today:<br>
      <pre>Function DiffADate(theDate)
   DiffADate = &quot;Days from today: &quot; &amp; <strong>DateDiff</strong>(&quot;d&quot;, Now, theDate)
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Function - DatePart</strong></td>
    <td>Returns the specified part of a given date.
      <pre>DatePart(interval, date[, firstdayofweek[, firstweekofyear]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>interval</em></dt>
        <dd>Required. String expression that is the interval of time you want to return. See Settings section for values.</dd>
        <dt><em>date</em></dt>
        <dd>Required. Date expression you want to evaluate.</dd>
        <dt><em>firstdayof week</em></dt>
        <dd>Optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.</dd>
        <dt><em>firstweekofyear</em></dt>
        <dd>Optional. Constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>interval</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>yyyy</td>
          <td>Year</td>
        </tr>
        <tr>
          <td>q</td>
          <td>Quarter</td>
        </tr>
        <tr>
          <td>m</td>
          <td>Month</td>
        </tr>
        <tr>
          <td>y</td>
          <td>Day of year</td>
        </tr>
        <tr>
          <td>d</td>
          <td>Day</td>
        </tr>
        <tr>
          <td>w</td>
          <td>Weekday</td>
        </tr>
        <tr>
          <td>ww</td>
          <td>Week of year</td>
        </tr>
        <tr>
          <td>h</td>
          <td>Hour</td>
        </tr>
        <tr>
          <td>n</td>
          <td>Minute</td>
        </tr>
        <tr>
          <td>s</td>
          <td>Second</td>
        </tr>
      </table>
      <br>
      The <em>firstdayofweek</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystemDayOfWeek</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday (default)</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
      </table>
      <br>
      The <em>firstweekofyear</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystem</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbFirstJan1</td>
          <td>1</td>
          <td>Start with the week in which January 1 occurs (default).</td>
        </tr>
        <tr>
          <td>vbFirstFourDays</td>
          <td>2</td>
          <td>Start with the week that has at least four days in the new year.</td>
        </tr>
        <tr>
          <td>vbFirstFullWeek</td>
          <td>3</td>
          <td>Start with the first full week of the new year.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      You can use the <strong>DatePart</strong> function to evaluate a date and return a specific interval of time. For example, you might use <strong>DatePart</strong> to calculate the day of the week or the current hour.<br>
      <br>
      The <em>firstdayofweek</em> argument affects calculations that use the &quot;w&quot; and &quot;ww&quot; interval symbols.<br>
      <br>
      If <em>date</em> is a date literal, the specified year becomes a permanent part of that date. However, if <em>date</em> is enclosed in quotation marks (&quot; &quot;), and you omit the year, the current year is inserted in your code each time the <em>date</em> expression is evaluated. This makes it possible to write code that can be used in different years.<br>
      <br>
      This example takes a date and, using the <strong>DatePart</strong> function, displays the quarter of the year in which it occurs.<br>
      <pre>Function GetQuarter(TheDate)
   GetQuarter = <strong>DatePart(</strong>&quot;q&quot;, TheDate)
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Function - DateSerial</strong></td>
    <td>Returns a <strong>Variant</strong> of subtype <strong>Date</strong> for a specified year, month, and day.
      <pre>DateSerial(<em>year</em>, <em>month</em>, <em>day</em>)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>year</em></dt>
        <dd>Number between 100 and 9999, inclusive, or a numeric expression.</dd>
        <dt><em>month</em></dt>
        <dd>Any numeric expression.</dd>
        <dt><em>day</em></dt>
        <dd>Any numeric expression.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To specify a date, such as December 31, 1991, the range of numbers for each <strong>DateSerial</strong> argument should be in the accepted range for the unit; that is, 1&#0150;31 for days and 1&#0150;12 for months. However, you can also specify relative dates for each argument using any numeric expression that represents some number of days, months, or years before or after a certain date.<br>
      <br>
      The following example uses numeric expressions instead of absolute date numbers. Here the <strong>DateSerial</strong> function returns a date that is the day before the first day (1 &#0150; 1) of two months before August (8 &#0150; 2) of 10 years before 1990 (1990 &#0150; 10); in other words, May 31, 1980. <br>
      <pre>Dim MyDate1, MyDate2
MyDate1 = <strong>DateSerial(</strong>1970, 1, 1)   ' Returns January 1, 1970.
MyDate2 = <strong>DateSerial(</strong>1990 - 10, 8 - 2, 1 - 1)   ' Returns May 31, 1980.</pre>
      For the <em>year</em> argument, values between 0 and 99, inclusive, are interpreted as the years 1900&#0150;1999. For all other <em>year</em> arguments, use a complete four-digit year (for example, 1800).<br>
      <br>
      When any argument exceeds the accepted range for that argument, it increments to the next larger unit as appropriate. For example, if you specify 35 days, it is evaluated as one month and some number of days, depending on where in the year it is applied. However, if any single argument is outside the range -32,768 to 32,767, or if the date specified by the three arguments, either directly or by expression, falls outside the acceptable range of dates, an error occurs.<br></td>
  </tr>
  <tr>
    <td><strong>Function - DateValue</strong></td>
    <td>Returns a <strong>Variant</strong> of subtype <strong>Date</strong>.
      <pre>DateValue(<em>date</em>)</pre>
      The <em>date</em> argument is normally a string expression representing a date from January 1, 100 through December 31, 9999. However, <em>date</em> can also be any expression that can represent a date, a time, or both a date and time, in that range.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      If the <em>date</em> argument includes time information, <strong>DateValue</strong> doesn't return it. However, if <em>date</em> includes invalid time information (such as &quot;89:98&quot;), an error occurs.<br>
      <br>
      If <em>date</em> is a string that includes only numbers separated by valid date separators, <strong>DateValue</strong> recognizes the order for month, day, and year according to the short date format you specified for your system. <strong>DateValue</strong> also recognizes unambiguous dates that contain month names, either in long or abbreviated form. For example, in addition to recognizing 12/30/1991 and 12/30/91, <strong>DateValue</strong> also recognizes December 30, 1991 and Dec 30, 1991.<br>
      <br>
      If the year part of <em>date</em> is omitted, <strong>DateValue</strong> uses the current year from your computer's system date.<br>
      <br>
      The following example uses the <strong>DateValue</strong> function to convert a string to a date. You can also use date literals to directly assign a date to a <strong>Variant</strong> variable, for example, MyDate = #9/11/63#.<br>
      <pre>Dim MyDate
MyDate = <strong>DateValue(</strong>&quot;September 11, 1963&quot;)   ' Return a date.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Day</strong></td>
    <td>Returns a whole number between 1 and 31, inclusive, representing the day of the month.
      <pre>Day(<em>date</em>)</pre>
      The <em>date</em> argument is any expression that can represent a date. If <em>date</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      The following example uses the <strong>Day</strong> function to obtain the day of the month from a specified date:<br>
      <pre>Dim MyDay
MyDay = <strong>Day</strong>(&quot;October 19, 1962&quot;)   ' MyDay contains 19.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Derived Math</strong></td>
    <td>The following non-intrinsic math functions can be derived from the intrinsic math functions:
      <table class="Table-Grey">
        <tr>
          <th>Function</th>
          <th>Derived equivalents</th>
        </tr>
        <tr>
          <td>Secant</td>
          <td>Sec(X) = 1 / Cos(X)</td>
        </tr>
        <tr>
          <td>Cosecant</td>
          <td>Cosec(X) = 1 / Sin(X)</td>
        </tr>
        <tr>
          <td>Cotangent</td>
          <td>Cotan(X) = 1 / Tan(X)</td>
        </tr>
        <tr>
          <td>Inverse Sine</td>
          <td>Arcsin(X) = Atn(X / Sqr(-X * X + 1))</td>
        </tr>
        <tr>
          <td>Inverse Cosine</td>
          <td>Arccos(X) = Atn(-X / Sqr(-X * X + 1)) + 2 * Atn(1)</td>
        </tr>
        <tr>
          <td>Inverse Secant</td>
          <td>Arcsec(X) = Atn(X / Sqr(X * X - 1)) + Sgn((X) -1) * (2 * Atn(1))</td>
        </tr>
        <tr>
          <td>Inverse Cosecant</td>
          <td>Arccosec(X) = Atn(X / Sqr(X * X - 1)) + (Sgn(X) - 1) * (2 * Atn(1))</td>
        </tr>
        <tr>
          <td>Inverse Cotangent</td>
          <td>Arccotan(X) = Atn(X) + 2 * Atn(1)</td>
        </tr>
        <tr>
          <td>Hyperbolic Sine</td>
          <td>HSin(X) = (Exp(X) - Exp(-X)) / 2 </td>
        </tr>
        <tr>
          <td>Hyperbolic Cosine</td>
          <td>HCos(X) = (Exp(X) + Exp(-X)) / 2</td>
        </tr>
        <tr>
          <td>Hyperbolic Tangent</td>
          <td>HTan(X) = (Exp(X) - Exp(-X)) / (Exp(X) + Exp(-X))</td>
        </tr>
        <tr>
          <td>Hyperbolic Secant</td>
          <td>HSec(X) = 2 / (Exp(X) + Exp(-X))</td>
        </tr>
        <tr>
          <td>Hyperbolic Cosecant</td>
          <td>HCosec(X) = 2 / (Exp(X) - Exp(-X))</td>
        </tr>
        <tr>
          <td>Hyperbolic Cotangent</td>
          <td>HCotan(X) = (Exp(X) + Exp(-X)) / (Exp(X) - Exp(-X))</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Sine</td>
          <td>HArcsin(X) = Log(X + Sqr(X * X + 1))</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Cosine</td>
          <td>HArccos(X) = Log(X + Sqr(X * X - 1))</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Tangent</td>
          <td>HArctan(X) = Log((1 + X) / (1 - X)) / 2</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Secant</td>
          <td>HArcsec(X) = Log((Sqr(-X * X + 1) + 1) / X)</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Cosecant</td>
          <td>HArccosec(X) = Log((Sgn(X) * Sqr(X * X + 1) +1) / X)</td>
        </tr>
        <tr>
          <td>Inverse Hyperbolic Cotangent</td>
          <td>HArccotan(X) = Log((X + 1) / (X - 1)) / 2</td>
        </tr>
        <tr>
          <td>Logarithm to base N</td>
          <td>LogN(X) = Log(X) / Log(N)</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Function - Escape</strong></td>
    <td>Encodes a string so it contains only ASCII characters.
      <pre>Escape(<em>charString</em>)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>charString</em></dt>
        <dd>Required. String expression to be encoded.</dd>
      </dl>
      The <strong>Escape</strong> function returns a string (in Unicode format) that contains the contents of charString. All spaces, punctuation, accented characters, and other non-ASCII characters are replaced with <strong>%</strong><em>xx</em> encoding, where xx is equivalent to the hexadecimal number representing the character. Unicode characters that have a value greater than 255 are stored using the <strong>%u</strong><em>xxxx</em> format.<br>
      <br>
      The string that the <strong>Escape</strong> function returns is suitable for transmission with many protocols, such as the HTTP protocol.<br>
      <p class="Note">Because the Escape function is not designed to create a valid uniform resource identifier (URI), it should not be used to encode URIs. The JScript encodeURI method may be used to encode URIs.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Eval</strong></td>
    <td>Evaluates an expression and returns the result.
      <pre>Eval(<em>expression</em>)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>expression</em></dt>
        <dd>Required. String containing any legal VBScript expression.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      In VBScript, <em>x = y</em> can be interpreted two ways. The first is as an assignment statement, where the value of <em>y</em> is assigned to <em>x</em>. The second interpretation is as an expression that tests if <em>x</em> and <em>y</em> have the same value. If they do, the result is <strong>True</strong>; if they are not, the result is <strong>False</strong>. The <strong>Eval</strong> method always uses the second interpretation, whereas the <strong>Execute</strong> statement always uses the first.<br>
      <p class="Note">In Microsoft&reg; JScript&trade;, no confusion exists between assignment and comparison, because the assignment operator (=) is different from the comparison operator (==).</p>
      The following example illustrates the use of the <strong>Eval</strong> function:
      <pre>Sub GuessANumber
   Dim Guess, RndNum
   RndNum = Int((100) * Rnd(1) + 1)
   Guess = CInt(InputBox(&quot;Enter your guess:&quot;,,0))
   Do
      If <strong>Eval(</strong>&quot;Guess = RndNum&quot;) Then
         MsgBox &quot;Congratulations! You guessed it!&quot;
         Exit Sub
      Else
         Guess = CInt(InputBox(&quot;Sorry! Try again.&quot;,,0))
      End If
   Loop Until Guess = 0
End Sub</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Exp</strong></td>
    <td>Returns <em>e</em> (the base of natural logarithms) raised to a power.
      <pre>Exp(number)</pre>
      The <em>number</em> argument can be any valid numeric expression.<br>
      <strong>Remarks</strong><br>
      <br>
      If the value of <em>number</em> exceeds 709.782712893, an error occurs. The constant <em>e</em> is approximately 2.718282.<br>
      <p class="Note">The Exp function complements the action of the Log function and is sometimes referred to as the antilogarithm.</p>
      The following example uses the <strong>Exp</strong> function to return e raised to a power:
      <pre>Dim MyAngle, MyHSin   ' Define angle in radians.
MyAngle = 1.3   ' Calculate hyperbolic sine.
MyHSin = (<strong>Exp(</strong>MyAngle) - <strong>Exp(</strong>-1 * MyAngle)) / 2 </pre></td>
  </tr>
  <tr>
    <td><strong>Function - Filter</strong></td>
    <td>Returns a zero-based array containing a subset of a string array based on a specified filter criteria.
      <pre><strong>Filter</strong>(InputStrings, Value[, Include[, Compare]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>InputStrings</em></dt>
        <dd>Required. One-dimensional array of strings to be searched.</dd>
        <dt><em>Value</em></dt>
        <dd>Required. String to search for.</dd>
        <dt><em>Include</em></dt>
        <dd>Optional. Boolean value indicating whether to return substrings that include or exclude <em>Value</em>. If <em>Include</em> is <strong>True</strong>, <strong>Filter</strong> returns the subset of the array that contains <em>Value</em> as a substring. If <em>Include </em>is <strong>False</strong>, <strong>Filter</strong> returns the subset of the array that does not contain <em>Value</em> as a substring.</dd>
        <dt><em>Compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of string comparison to use. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>Compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      If no matches of <em>Value</em> are found within <em>InputStrings</em>, <strong>Filter</strong> returns an empty array. An error occurs if <em>InputStrings</em> is <strong>Null</strong> or is not a one-dimensional array.<br>
      <br>
      The array returned by the <strong>Filter</strong> function contains only enough elements to contain the number of matched items.<br>
      <br>
      The following example uses the <strong>Filter</strong> function to return the array containing the search criteria &quot;Mon&quot;:<br>
      <pre>Dim MyIndex
Dim MyArray (3)
MyArray(0) = &quot;Sunday&quot;
MyArray(1) = &quot;Monday&quot;
MyArray(2) = &quot;Tuesday&quot;
MyIndex = <strong>Filter(</strong>MyArray, &quot;Mon&quot;) ' MyIndex(0) contains &quot;Monday&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - FormatCurrency</strong></td>
    <td>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
      <pre>FormatCurrency(Expression[, NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]) </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Expression</em></dt>
        <dd>Required. Expression to be formatted.</dd>
        <dt><em>NumDigitsAfterDecimal</em></dt>
        <dd>Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.</dd>
        <dt><em>IncludeLeadingDigit</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.</dd>
        <dt><em>UseParensForNegativeNumbers</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.</dd>
        <dt><em>GroupDigits</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings section for values. </dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>TristateTrue</td>
          <td>-1</td>
          <td>True</td>
        </tr>
        <tr>
          <td>TristateFalse</td>
          <td>0</td>
          <td>False</td>
        </tr>
        <tr>
          <td>TristateUseDefault</td>
          <td>-2</td>
          <td>Use the setting from the computer's regional settings.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      When one or more optional arguments are omitted, values for omitted arguments are provided by the computer's regional settings. The position of the currency symbol relative to the currency value is determined by the system's regional settings.<br>
      <p class="Note">All settings information comes from the Regional Settings Currency tab, except leading zero, which comes from the Number tab.</p>
      The following example uses the <strong>FormatCurrency</strong> function to format the expression as a currency and assign it to MyCurrency:<br>
      <pre>Dim MyCurrency
MyCurrency = <strong>FormatCurrency(</strong>1000)   ' MyCurrency contains $1000.00.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - FormatDateTime</strong></td>
    <td>Returns an expression formatted as a date or time.
      <pre>FormatDateTime(<em>Date</em>[<strong>,</strong> <em>NamedFormat</em>])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Date</em></dt>
        <dd>Required. Date expression to be formatted.</dd>
        <dt><em>NamedFormat</em></dt>
        <dd>Optional. Numeric value that indicates the date/time format used. If omitted, <strong>vbGeneralDate</strong> is used.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>NamedFormat</em> argument has the following settings:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbGeneralDate</td>
          <td>0</td>
          <td>Display a date and/or time. If there is a date part, display it as a short date. If there is a time part, display it as a long time. If present, both parts are displayed.</td>
        </tr>
        <tr>
          <td>vbLongDate</td>
          <td>1</td>
          <td>Display a date using the long date format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbShortDate</td>
          <td>2</td>
          <td>Display a date using the short date format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbLongTime</td>
          <td>3</td>
          <td>Display a time using the time format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbShortTime</td>
          <td>4</td>
          <td>Display a time using the 24-hour format (hh:mm).</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>FormatDateTime</strong> function to format the expression as a long date and assign it to MyDateTime:
      <pre>Function GetCurrentDate
   ' FormatDateTime formats Date in long date. 
   GetCurrentDate = <strong>FormatDateTime(</strong>Date, 1) 
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Function - FormatNumber</strong></td>
    <td>Returns an expression formatted as a number.
      <pre>FormatNumber(Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Expression</em></dt>
        <dd>Required. Expression to be formatted.</dd>
        <dt><em>NumDigitsAfterDecimal</em></dt>
        <dd>Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.</dd>
        <dt><em>IncludeLeadingDigit</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.</dd>
        <dt><em>UseParensForNegativeNumbers</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values. </dd>
        <dt><em>GroupDigits</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the control panel. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>TristateTrue</td>
          <td>-1</td>
          <td>True</td>
        </tr>
        <tr>
          <td>TristateFalse</td>
          <td>0</td>
          <td>False</td>
        </tr>
        <tr>
          <td>TristateUseDefault</td>
          <td>-2</td>
          <td>Use the setting from the computer's regional settings.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      When one or more of the optional arguments are omitted, the values for omitted arguments are provided by the computer's regional settings.<br>
      <p class="Note">All settings information comes from the Regional Settings Number tab.</p>
      The following example uses the <strong>FormatNumber</strong> function to format a number to have four decimal places:<br>
      <pre>Function FormatNumberDemo
   Dim MyAngle, MySecant, MyNumber
   MyAngle = 1.3   ' Define angle in radians.
   MySecant = 1 / Cos(MyAngle)   ' Calculate secant.
   FormatNumberDemo = <strong>FormatNumber</strong>(MySecant,4) ' Format MySecant to four decimal places.
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Function - FormatPercent</strong></td>
    <td>Returns an expression formatted as a percentage (multiplied by 100) with a trailing % character.
      <pre>FormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])</pre>
      The <strong>FormatPercent</strong> function syntax has these parts:<br>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Expression</em></dt>
        <dd>Required. Expression to be formatted.</dd>
        <dt><em>NumDigitsAfterDecimal</em></dt>
        <dd>Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.</dd>
        <dt><em>IncludeLeadingDigit</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.</dd>
        <dt><em>UseParensForNegativeNumbers</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values. </dd>
        <dt><em>GroupDigits</em></dt>
        <dd>Optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the control panel. See Settings section for values. </dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>TristateTrue</td>
          <td>-1</td>
          <td>True</td>
        </tr>
        <tr>
          <td>TristateFalse</td>
          <td>0</td>
          <td>False</td>
        </tr>
        <tr>
          <td>TristateUseDefault</td>
          <td>-2</td>
          <td>Use the setting from the computer's regional settings.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      When one or more optional arguments are omitted, the values for the omitted arguments are provided by the computer's regional settings.<br>
      <p class="Note">All settings information comes from the Regional Settings Number tab.</p>
      The following example uses the <strong>FormatPercent</strong> function to format an expression as a percent:<br>
      <pre>Dim MyPercent
MyPercent = <strong>FormatPercent</strong>(2/32) ' MyPercent contains 6.25%.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - GetObject</strong></td>
    <td>Returns a reference to an Automation object from a file.
      <pre>GetObject([<em>pathname</em>] [, <em>class</em>])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>pathname</em></dt>
        <dd>Optional; String. Full path and name of the file containing the object to retrieve. If <em>pathname</em> is omitted, <em>class</em> is required.</dd>
        <dt><em>class</em></dt>
        <dd>Optional; String. Class of the object.</dd>
      </dl>
      The <em>class </em>argument uses the syntax <em>appname.objectype</em> and has these parts: <strong>Arguments</strong>
      <dl>
        <dt><em>appname</em></dt>
        <dd>Required; String. Name of the application providing the object.</dd>
        <dt><em>objectype</em></dt>
        <dd>Required; String. Type or class of object to create.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Use the <strong>GetObject</strong> function to access an Automation object from a file and assign the object to an object variable. Use the <strong>Set</strong> statement to assign the object returned by <strong>GetObject</strong> to the object variable. For example:<br>
      <pre>Dim CADObject
Set CADObject = <strong>GetObject</strong>(&quot;C:\CAD\SCHEMA.CAD&quot;)</pre>
      <br>
      When this code is executed, the application associated with the specified pathname is started and the object in the specified file is activated. If <em>pathname</em> is a zero-length string (&quot;&quot;), <strong>GetObject</strong> returns a new object instance of the specified type. If the <em>pathname</em> argument is omitted, <strong>GetObject</strong> returns a currently active object of the specified type. If no object of the specified type exists, an error occurs.<br>
      <br>
      Some applications allow you to activate part of a file. Add an exclamation point (!) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.<br>
      <br>
      For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called <code>SCHEMA.CAD</code>:<br>
      <pre>Set LayerObject = <strong>GetObject</strong>(&quot;C:\CAD\SCHEMA.CAD!Layer3&quot;)</pre>
      <br>
      If you don't specify the object's class, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, may support more than one class of object. For example, a drawing might support three different types of objects: an Application object, a Drawing object, and a Toolbar object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional <em>class</em> argument. For example:<br>
      <pre>Dim MyObject
Set MyObject = <strong>GetObject</strong>(&quot;C:\DRAWINGS\SAMPLE.DRW&quot;, &quot;FIGMENT.DRAWING&quot;)</pre>
      In the preceding example, <code>FIGMENT</code> is the name of a drawing application and <code>DRAWING</code> is one of the object types it supports. Once an object is activated, you reference it in code using the object variable you defined. In the preceding example, you access properties and methods of the new object using the object variable <code>MyObject</code>. For example:<br>
      <pre>MyObject.Line 9, 90
MyObject.InsertText 9, 100, &quot;Hello, world.&quot;
MyObject.SaveAs &quot;C:\DRAWINGS\SAMPLE.DRW&quot;</pre>
      <p class="Note">Use the GetObject function when there is a current instance of the object or if you want to create the object with a file already loaded. If there is no current instance, and you don't want the object started with a file loaded, use the CreateObject function.</p>
      <br>
      If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times <strong>CreateObject</strong> is executed. With a single-instance object, <strong>GetObject</strong> always returns the same instance when called with the zero-length string (&quot;&quot;) syntax, and it causes an error if the <em>pathname</em> argument is omitted.<br></td>
  </tr>
  <tr>
    <td><strong>Function - Hex</strong></td>
    <td>Returns a string representing the hexadecimal value of a number.
      <pre>Hex(number)</pre>
      The <em>number</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      If <em>number</em> is not already a whole number, it is rounded to the nearest whole number before being evaluated.<br>
      <table class="Table-Grey">
        <tr>
          <th>If <em>number</em> is</th>
          <th>Hex returns</th>
        </tr>
        <tr>
          <td>Null</td>
          <td>Null.</td>
        </tr>
        <tr>
          <td>Empty</td>
          <td>Zero (0).</td>
        </tr>
        <tr>
          <td>Any other number</td>
          <td>Up to eight hexadecimal characters.</td>
        </tr>
      </table>
      You can represent hexadecimal numbers directly by preceding numbers in the proper range with &amp;H. For example, &amp;H10 represents decimal 16 in hexadecimal notation.<br>
      <br>
      The following example uses the <strong>Hex</strong> function to return the hexadecimal value of a number:<br>
      <pre>Dim MyHex
MyHex = <strong>Hex</strong>(5)   ' Returns 5.
MyHex = <strong>Hex</strong>(10)   ' Returns A.
MyHex = <strong>Hex</strong>(459)   ' Returns 1CB.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Hour</strong></td>
    <td>Returns a whole number between 0 and 23, inclusive, representing the hour of the day.
      <pre>Hour(<em>time</em>)</pre>
      The <em>time</em> argument is any expression that can represent a time. If <em>time</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      The following example uses the <strong>Hour</strong> function to obtain the hour from the current time:<br>
      <pre>Dim MyTime, MyHour
MyTime = Now
MyHour = <strong>Hour</strong>(MyTime) ' MyHour contains the number representing 
                      ' the current hour.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - InputBox</strong></td>
    <td>Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns the contents of the text box.
      <pre>InputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>prompt</em></dt>
        <dd>String expression displayed as the message in the dialog box. The maximum length of <em>prompt</em> is approximately 1024 characters, depending on the width of the characters used. If <em>prompt</em> consists of more than one line, you can separate the lines using a carriage return character (<strong>Chr(</strong>13<strong>)</strong>), a linefeed character (<strong>Chr(</strong>10<strong>)</strong>), or carriage return&#0150;linefeed character combination (<strong>Chr(</strong>13<strong>) &amp; Chr(</strong>10<strong>)</strong>) between each line.</dd>
        <dt><em>title</em></dt>
        <dd>String expression displayed in the title bar of the dialog box. If you omit <em>title</em>, the application name is placed in the title bar.</dd>
        <dt><em>default</em></dt>
        <dd>String expression displayed in the text box as the default response if no other input is provided. If you omit <em>default</em>, the text box is displayed empty.</dd>
        <dt><em>xpos</em></dt>
        <dd>Numeric expression that specifies, in twips, the horizontal distance of the left edge of the dialog box from the left edge of the screen. If <em>xpos</em> is omitted, the dialog box is horizontally centered.</dd>
        <dt><em>ypos</em></dt>
        <dd>Numeric expression that specifies, in twips, the vertical distance of the upper edge of the dialog box from the top of the screen. If <em>ypos</em> is omitted, the dialog box is vertically positioned approximately one-third of the way down the screen.</dd>
        <dt><em>helpfile</em></dt>
        <dd>String expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If <em>helpfile</em> is provided, <em>context</em> must also be provided.</dd>
        <dt><em>context</em></dt>
        <dd>Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If <em>context</em> is provided, <em>helpfile</em> must also be provided.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      When both <em>helpfile</em> and <em>context</em> are supplied, a Help button is automatically added to the dialog box.<br>
      <br>
      If the user clicks <strong>OK</strong> or presses <strong>ENTER</strong>, the <strong>InputBox</strong> function returns whatever is in the text box. If the user clicks <strong>Cancel</strong>, the function returns a zero-length string (&quot;&quot;).<br>
      <br>
      The following example uses the <strong>InputBox</strong> function to display an input box and assign the string to the variable Input:<br>
      <pre>Dim Input
Input = <strong>InputBox</strong>(&quot;Enter your name&quot;) 
MsgBox (&quot;You entered: &quot; &amp; Input)</pre></td>
  </tr>
  <tr>
    <td><strong>Function - InStr</strong></td>
    <td>Returns the position of the first occurrence of one string within another.
      <pre>InStr([start, ]string1, string2[, compare])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>start</em></dt>
        <dd>Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. If <em>start</em> contains Null, an error occurs. The <em>start</em> argument is required if <em>compare</em> is specified.</dd>
        <dt><em>string1</em></dt>
        <dd>Required. String expression being searched.</dd>
        <dt><em>string2</em></dt>
        <dd>Required. String expression searched for.</dd>
        <dt><em>compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values. If omitted, a binary comparison is performed.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Return Values</strong><br>
      <br>
      The <strong>InStr</strong> function returns the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>If</th>
          <th>InStr returns</th>
        </tr>
        <tr>
          <td><em>string1</em> is zero-length</td>
          <td>0</td>
        </tr>
        <tr>
          <td><em>string1</em> is <strong>Null</strong></td>
          <td>Null</td>
        </tr>
        <tr>
          <td><em>string2</em> is zero-length</td>
          <td>start</td>
        </tr>
        <tr>
          <td><em>string2</em> is <strong>Null</strong></td>
          <td>Null</td>
        </tr>
        <tr>
          <td><em>string2</em> is not found</td>
          <td>0</td>
        </tr>
        <tr>
          <td><em>string2</em> is found within <em>string1</em></td>
          <td>Position at which match is found</td>
        </tr>
        <tr>
          <td>start &gt; <strong>Len</strong>(string2)</td>
          <td>0</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following examples use <strong>InStr</strong> to search a string:<br>
      <pre>Dim SearchString, SearchChar, MyPos
SearchString =&quot;XXpXXpXXPXXP&quot;   ' String to search in.
SearchChar = &quot;P&quot;   ' Search for &quot;P&quot;.
MyPos = <strong>Instr</strong>(4, SearchString,  SearchChar,  1)   ' A textual comparison 
MyPos = <strong>Instr</strong>(1,  SearchString,  SearchChar,  0)   ' A binary comparison    
MyPos = <strong>Instr</strong>(SearchString,  SearchChar)   ' Comparison is binary
MyPos = <strong>Instr</strong>(1,  SearchString,  &quot;W&quot;)   ' A binary comparison</pre>
      <p class="Note">The InStrB function is used with byte data contained in a string. Instead of returning the character position of the first occurrence of one string within another, InStrB returns the byte position.</p></td>
  </tr>
  <tr>
    <td><strong>Function - InStrRev</strong></td>
    <td>Returns the position of an occurrence of one string within another, from the end of string.
      <pre>InStrRev(string1<strong>,</strong> string2[<strong>,</strong> start[<strong>,</strong> compare]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string1</em></dt>
        <dd>Required. String expression being searched.</dd>
        <dt><em>string2</em></dt>
        <dd>Required. String expression being searched for.</dd>
        <dt><em>start</em></dt>
        <dd>Optional. Numeric expression that sets the starting position for each search. If omitted, -1 is used, which means that the search begins at the last character position. If <em>start</em> contains Null, an error occurs.</dd>
        <dt><em>compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Return Values</strong><br>
      <br>
      <strong>InStrRev</strong> returns the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>If</th>
          <th>InStrRev returns</th>
        </tr>
        <tr>
          <td><em>string1</em> is zero-length</td>
          <td>0</td>
        </tr>
        <tr>
          <td><em>string1</em> is <strong>Null</strong></td>
          <td>Null</td>
        </tr>
        <tr>
          <td><em>string2</em> is zero-length</td>
          <td>start</td>
        </tr>
        <tr>
          <td><em>string2</em> is <strong>Null</strong></td>
          <td>Null</td>
        </tr>
        <tr>
          <td><em>string2</em> is not found</td>
          <td>0</td>
        </tr>
        <tr>
          <td><em>string2</em> is found within <em>string1</em></td>
          <td>Position at which match is found</td>
        </tr>
        <tr>
          <td>start &gt; <strong>Len</strong>(string2)</td>
          <td>0</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following examples use the <strong>InStrRev</strong> function to search a string:<br>
      <pre>Dim SearchString, SearchChar, MyPos
SearchString =&quot;XXpXXpXXPXXP&quot;   ' String to search in.
SearchChar = &quot;P&quot;   ' Search for &quot;P&quot;.
MyPos = <strong>InstrRev</strong>(SearchString,  SearchChar,  10,  0)   ' A binary comparison 
MyPos = <strong>InstrRev</strong>(SearchString,  SearchChar,  -1,  1)   ' A textual comparison 
MyPos = <strong>InstrRev</strong>(SearchString,  SearchChar,  8)   ' Comparison is binary</pre>
      <p class="Note">The syntax for the InStrRev function is not the same as the syntax for the InStr function.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Int, Fix</strong></td>
    <td>Returns the integer portion of a number.
      <pre>Int(<em>number</em>)
Fix(<em>number</em>)</pre>
      The <em>number</em> argument can be any valid numeric expression. If <em>number</em> contains Null, <strong>Null</strong> is returned.<br>
      <strong>Remarks</strong><br>
      <br>
      Both <strong>Int</strong> and <strong>Fix</strong> remove the fractional part of <em>number</em> and return the resulting integer value.<br>
      <br>
      The difference between <strong>Int</strong> and <strong>Fix</strong> is that if <em>number</em> is negative, <strong>Int</strong> returns the first negative integer less than or equal to <em>number,</em> whereas <strong>Fix</strong> returns the first negative integer greater than or equal to <em>number.</em> For example, <strong>Int</strong> converts -8.4 to -9, and <strong>Fix</strong> converts -8.4 to -8.<br>
      <br>
      <strong>Fix</strong>(<em>number</em>) is equivalent to: <br>
      <pre>Sgn(<em>number</em>) * <strong>Int</strong>(Abs(<em>number</em>))</pre>
      The following examples illustrate how the <strong>Int</strong> and <strong>Fix</strong> functions return integer portions of numbers:<br>
      <pre>MyNumber = <strong>Int</strong>(99.8)    ' Returns 99.
MyNumber = <strong>Fix</strong>(99.2)    ' Returns 99.
MyNumber = <strong>Int</strong>(-99.8)   ' Returns -100.
MyNumber = <strong>Fix</strong>(-99.8)   ' Returns -99.
MyNumber = <strong>Int</strong>(-99.2)   ' Returns -100.
MyNumber = <strong>Fix</strong>(-99.2)   ' Returns -99.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - IsArray</strong></td>
    <td>Returns a Boolean value indicating whether a variable is an array.
      <pre>IsArray(<em>varname</em>)</pre>
      The <em>varname</em> argument can be any variable.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsArray</strong> returns <strong>True</strong> if the variable is an array; otherwise, it returns <strong>False</strong>. <strong>IsArray</strong> is especially useful with variants containing arrays.<br>
      <br>
      The following example uses the <strong>IsArray</strong> function to test whether <code>MyVariable</code> is an array:<br>
      <pre>Dim MyVariable
Dim MyArray(3)
MyArray(0) = &quot;Sunday&quot;
MyArray(1) = &quot;Monday&quot;
MyArray(2) = &quot;Tuesday&quot;
MyVariable = <strong>IsArray</strong>(MyArray) ' MyVariable contains &quot;True&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - IsDate</strong></td>
    <td>Returns a Boolean value indicating whether an expression can be converted to a date.
      <pre>IsDate(expression)</pre>
      The <em>expression</em> argument can be any date expression or string expression recognizable as a date or time.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsDate</strong> returns <strong>True</strong> if the expression is a date or can be converted to a valid date; otherwise, it returns <strong>False</strong>. In Microsoft Windows, the range of valid dates is January 1, 100 A.D. through December 31, 9999 A.D.; the ranges vary among operating systems.<br>
      <br>
      The following example uses the <strong>IsDate</strong> function to determine whether an expression can be converted to a date:<br>
      <pre>Dim MyDate, YourDate, NoDate, MyCheck
MyDate = &quot;October 19, 1962&quot;: YourDate = #10/19/62#: NoDate = &quot;Hello&quot;
MyCheck = <strong>IsDate</strong>(MyDate)   ' Returns True.
MyCheck = <strong>IsDate</strong>(YourDate)   ' Returns True.
MyCheck = <strong>IsDate</strong>(NoDate)   ' Returns False.</pre></td>
  </tr>
  <tr>
    <td><strong>IsEmpty</strong></td>
    <td>Returns a Boolean value indicating whether a variable has been initialized.
      <pre>IsEmpty(expression)</pre>
      The <em>expression</em> argument can be any expression. However, because <strong>IsEmpty</strong> is used to determine if individual variables are initialized, the <em>expression</em> argument is most often a single variable name.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsEmpty</strong> returns <strong>True</strong> if the variable is uninitialized, or is explicitly set to Empty; otherwise, it returns <strong>False</strong>. <strong>False</strong> is always returned if <em>expression</em> contains more than one variable.<br>
      <br>
      The following example uses the <strong>IsEmpty</strong> function to determine whether a variable has been initialized:<br>
      <pre>Dim MyVar, MyCheck
MyCheck = <strong>IsEmpty</strong>(MyVar)   ' Returns True.
MyVar = Null   ' Assign Null.
MyCheck = <strong>IsEmpty</strong>(MyVar)   ' Returns False.
MyVar = Empty   ' Assign Empty.
MyCheck = <strong>IsEmpty</strong>(MyVar)   ' Returns True.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - IsNull</strong></td>
    <td>Returns a Boolean value that indicates whether an expression contains no valid data (Null).
      <pre>IsNull(expression)</pre>
      The <em>expression</em> argument can be any expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsNull</strong> returns <strong>True</strong> if <em>expression</em> is <strong>Null</strong>, that is, it contains no valid data; otherwise, <strong>IsNull</strong> returns <strong>False</strong>. If <em>expression</em> consists of more than one variable, <strong>Null</strong> in any constituent variable causes <strong>True</strong> to be returned for the entire expression.<br>
      <br>
      The <strong>Null</strong> value indicates that the variable contains no valid data. <strong>Null</strong> is not the same as Empty, which indicates that a variable has not yet been initialized. It is also not the same as a zero-length string (&quot;&quot;), which is sometimes referred to as a null string.<br>
      <p class="Caution">Use the IsNull function to determine whether an expression contains a Null value. Expressions that you might expect to evaluate to True under some circumstances, such as If Var = Null and If Var &lt;&gt; Null, are always False. This is because any expression containing a Null is itself Null, and therefore, False.</p>
      The following example uses the <strong>IsNull</strong> function to determine whether a variable contains a <strong>Null</strong>:<br>
      <pre>Dim MyVar, MyCheck
MyCheck = <code><strong>IsNull(</strong></code>MyVar)   ' Returns False.
MyVar = Null   ' Assign Null.
MyCheck = <code><strong>IsNull(</strong></code>MyVar)   ' Returns True.
MyVar = Empty   ' Assign Empty.
MyCheck = <code><strong>IsNull(</strong></code>MyVar)   ' Returns False.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - IsNumeric</strong></td>
    <td>Returns a Boolean value indicating whether an expression can be evaluated as a number.
      <pre>IsNumeric(<em>expression</em>)</pre>
      The <em>expression</em> argument can be any expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsNumeric</strong> returns <strong>True</strong> if the entire <em>expression</em> is recognized as a number; otherwise, it returns <strong>False</strong>. <strong>IsNumeric</strong> returns <strong>False</strong> if <em>expression</em> is a date expression.<br>
      <br>
      The following example uses the <strong>IsNumeric</strong> function to determine whether a variable can be evaluated as a number:<br>
      <pre>Dim MyVar, MyCheck
MyVar = 53   ' Assign a value.
MyCheck = <strong>IsNumeric</strong>(MyVar)   ' Returns True.
MyVar = &quot;459.95&quot;   ' Assign a value.
MyCheck = <strong>IsNumeric</strong>(MyVar)   ' Returns True.
MyVar = &quot;45 Help&quot;   ' Assign a value.
MyCheck = <strong>IsNumeric</strong>(MyVar)   ' Returns False.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - IsObject</strong></td>
    <td>Returns a Boolean value indicating whether an expression references a valid Automation object.
      <pre>IsObject(<em>expression</em>)</pre>
      The <em>expression</em> argument can be any expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>IsObject</strong> returns <strong>True</strong> if <em>expression</em> is a variable of <strong>Object</strong> subtype or a user-defined object; otherwise, it returns <strong>False</strong>.<br>
      <br>
      The following example uses the <strong>IsObject</strong> function to determine if an identifier represents an object variable:<br>
      <pre>Dim MyInt, MyCheck, MyObject
Set MyObject = Me
MyCheck = <strong>IsObject</strong>(MyObject)   ' Returns True.
MyCheck = <strong>IsObject</strong>(MyInt)   ' Returns False.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Join</strong></td>
    <td>Returns a string created by joining a number of substrings contained in an array.
      <pre>Join(list[, delimiter])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>list</em></dt>
        <dd>Required. One-dimensional array containing substrings to be joined.</dd>
        <dt><em>delimiter</em></dt>
        <dd>Optional. String character used to separate the substrings in the returned string. If omitted, the space character (&quot; &quot;) is used. If <em>delimiter</em> is a zero-length string, all items in the list are concatenated with no delimiters.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Join</strong> function to join the substrings of <code>MyArray</code>:<br>
      <pre>Dim MyString
Dim MyArray(3)
MyArray(0) = &quot;Mr.&quot;
MyArray(1) = &quot;John &quot;
MyArray(2) = &quot;Doe &quot;
MyArray(3) = &quot;III&quot;
MyString = <strong>Join</strong>(MyArray) ' MyString contains &quot;Mr. John Doe III&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - LBound</strong></td>
    <td>Returns the smallest available subscript for the indicated dimension of an array.
      <pre>LBound(arrayname[, dimension])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>arrayname</em></dt>
        <dd>Name of the array variable; follows standard variable naming conventions.</dd>
        <dt><em>dimension</em></dt>
        <dd>Whole number indicating which dimension's lower bound is returned. Use 1 for the first dimension, 2 for the second, and so on. If <em>dimension</em> is omitted, 1 is assumed.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The <strong>LBound</strong> function is used with the <strong>UBound</strong> function to determine the size of an array. Use the <strong>UBound</strong> function to find the upper limit of an array dimension.<br>
      <br>
      The lower bound for any dimension is always 0.<br></td>
  </tr>
  <tr>
    <td><strong>Function - LCase</strong></td>
    <td>Returns a string that has been converted to lowercase.
      <pre>LCase(<em>string</em>)</pre>
      The <em>string</em> argument is any valid string expression. If <em>string</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      Only uppercase letters are converted to lowercase; all lowercase letters and non-letter characters remain unchanged.<br>
      <br>
      The following example uses the <strong>LCase</strong> function to convert uppercase letters to lowercase:<br>
      <pre>Dim MyString
Dim LCaseString
MyString = &quot;VBSCript&quot;
LCaseString = <strong>LCase</strong>(MyString)   ' LCaseString contains &quot;vbscript&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Left</strong></td>
    <td>Returns a specified number of characters from the left side of a string.
      <pre>Left(string, length)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string</em></dt>
        <dd>String expression from which the leftmost characters are returned. If <em>string</em> contains Null, <strong>Null</strong> is returned.</dd>
        <dt><em>length</em></dt>
        <dd>Numeric expression indicating how many characters to return. If 0, a zero-length string(&quot;&quot;) is returned. If greater than or equal to the number of characters in <em>string</em>, the entire string is returned.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To determine the number of characters in <em>string</em>, use the <strong>Len</strong> function.<br>
      <br>
      The following example uses the <strong>Left</strong> function to return the first three characters of <code>MyString</code>:<br>
      <pre>Dim MyString, LeftString
MyString = &quot;VBSCript&quot;
LeftString = <strong>Left</strong>(MyString, 3) ' LeftString contains &quot;VBS&quot;.</pre>
      <p class="Note">The LeftB function is used with byte data contained in a string. Instead of specifying the number of characters to return, <em>length</em> specifies the number of bytes.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Len</strong></td>
    <td>Returns the number of characters in a string or the number of bytes required to store a variable.
      <pre>Len(string | varname)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string</em></dt>
        <dd>Any valid string expression. If <em>string</em> contains Null, <strong>Null</strong> is returned.</dd>
        <dt><em>varname</em></dt>
        <dd>Any valid variable name. If <em>varname </em>contains <strong>Null</strong>, <strong>Null</strong> is returned.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Len</strong> function to return the number of characters in a string:<br>
      <pre>Dim MyString
MyString = <strong>Len</strong>(&quot;VBSCRIPT&quot;) ' MyString contains 8.</pre>
      <p class="Note">The LenB function is used with byte data contained in a string. Instead of returning the number of characters in a string, LenB returns the number of bytes used to represent that string.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Log</strong></td>
    <td>Returns the natural logarithm of a number.
      <pre>Log(number)</pre>
      The <em>number</em> argument can be any valid numeric expression greater than 0.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The natural logarithm is the logarithm to the base <em>e</em>. The constant <em>e</em> is approximately 2.718282.<br>
      <br>
      You can calculate base-<em>n</em> logarithms for any number <em>x</em> by dividing the natural logarithm of <em>x</em> by the natural logarithm of <em>n </em>as follows:<br>
      <pre>Log<em>n(x)</em> = Log(<em>x</em>) / Log(<em>n</em>)</pre>
      <br>
      The following example illustrates a custom <strong>Function</strong> that calculates base-10 logarithms:<br>
      <pre>Function Log10(X)
   Log10 = Log(X) / Log(10)
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Function - LTrim; RTrim; and Trim</strong></td>
    <td>Returns a copy of a string without leading spaces (<strong>LTrim</strong>), trailing spaces (<strong>RTrim</strong>), or both leading and trailing spaces (<strong>Trim</strong>).
      <pre>LTrim(string)
RTrim(string)
Trim(string)</pre>
      The <em>string</em> argument is any valid string expression. If <em>string</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>LTrim</strong>, <strong>RTrim</strong>, and <strong>Trim</strong> functions to trim leading spaces, trailing spaces, and both leading and trailing spaces, respectively:<br>
      <pre>Dim MyVar
MyVar = <strong>LTrim</strong>(&quot;   vbscript &quot;)   ' MyVar contains &quot;vbscript &quot;.
MyVar = <strong>RTrim</strong>(&quot;   vbscript &quot;)   ' MyVar contains &quot;   vbscript&quot;.
MyVar = <strong>Trim</strong>(&quot;   vbscript &quot;)   ' MyVar contains &quot;vbscript&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Mid</strong></td>
    <td>Returns a specified number of characters from a string.
      <pre>Mid(string<strong>, </strong>start[<strong>, </strong>length])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string</em></dt>
        <dd>String expression from which characters are returned. If <em>string</em> contains Null, <strong>Null</strong> is returned. </dd>
        <dt><em>start</em></dt>
        <dd>Character position in <em>string</em> at which the part to be taken begins. If <em>start</em> is greater than the number of characters in <em>string</em>, <strong>Mid</strong> returns a zero-length string (&quot;&quot;).</dd>
        <dt><em>length</em></dt>
        <dd>Number of characters to return. If omitted or if there are fewer than <em>length</em> characters in the text (including the character at <em>start</em>), all characters from the <em>start</em> position to the end of the string are returned.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To determine the number of characters in <em>string</em>, use the <strong>Len</strong> function.<br>
      <br>
      The following example uses the <strong>Mid</strong> function to return six characters, beginning with the fourth character, in a string:<br>
      <pre>Dim MyVar
MyVar = <strong>Mid</strong>(&quot;VBScript is fun!&quot;,  4,  6) ' MyVar contains &quot;Script&quot;.</pre>
      <p class="Note">The MidB function is used with byte data contained in a string. Instead of specifying the number of characters, the arguments specify numbers of bytes.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Minute</strong></td>
    <td>Returns a whole number between 0 and 59, inclusive, representing the minute of the hour.
      <pre>Minute(<em>time</em>)</pre>
      The <em>time</em> argument is any expression that can represent a time. If <em>time</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Minute</strong> function to return the minute of the hour:<br>
      <pre>Dim MyVar
MyVar = <strong>Minute</strong>(Now)</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Month</strong></td>
    <td>Returns a whole number between 1 and 12, inclusive, representing the month of the year.
      <pre>Month(<em>date</em>)</pre>
      The <em>date</em> argument is any expression that can represent a date. If <em>date</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Month</strong> function to return the current month:<br>
      <pre>Dim MyVar
MyVar = <strong>Month</strong>(Now) ' MyVar contains the number corresponding to
                   ' the current month.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - MonthName</strong></td>
    <td>Returns a string indicating the specified month.
      <pre>MonthName(<em>month</em>[, <em>abbreviate</em>])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>month</em></dt>
        <dd>Required. The numeric designation of the month. For example, January is 1, February is 2, and so on.</dd>
        <dt><em>abbreviate</em></dt>
        <dd>Optional. Boolean value that indicates if the month name is to be abbreviated. If omitted, the default is <strong>False</strong>, which means that the month name is not abbreviated.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>MonthName</strong> function to return an abbreviated month name for a date expression:<br>
      <pre>Dim MyVar
MyVar = <strong>MonthName</strong>(10,  True) ' MyVar contains &quot;Oct&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - MsgBox</strong></td>
    <td>Displays a message in a dialog box, waits for the user to click a button, and returns a value indicating which button the user clicked.
      <pre>MsgBox(prompt[, buttons][, title][, helpfile, context])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>prompt</em></dt>
        <dd>String expression displayed as the message in the dialog box. The maximum length of <em>prompt</em> is approximately 1024 characters, depending on the width of the characters used. If <em>prompt</em> consists of more than one line, you can separate the lines using a carriage return character (<strong>Chr(</strong>13<strong>)</strong>), a linefeed character (<strong>Chr(</strong>10<strong>)</strong>), or carriage return&#0150;linefeed character combination (<strong>Chr(</strong>13<strong>) &amp; Chr(</strong>10<strong>)</strong>) between each line.</dd>
        <dt><em>buttons</em></dt>
        <dd>Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. See Settings section for values. If omitted, the default value for <em>buttons</em> is 0.</dd>
        <dt><em>title</em></dt>
        <dd>String expression displayed in the title bar of the dialog box. If you omit <em>title</em>, the application name is placed in the title bar.</dd>
        <dt><em>helpfile</em></dt>
        <dd>String expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If <em>helpfile</em> is provided, <em>context</em> must also be provided. Not available on 16-bit platforms.</dd>
        <dt><em>context</em></dt>
        <dd>Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If <em>context</em> is provided, <em>helpfile</em> must also be provided. Not available on 16-bit platforms.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>buttons</em> argument settings are:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbOKOnly</td>
          <td>&nbsp;&nbsp;&nbsp;0</td>
          <td>Display <strong>OK</strong> button only.</td>
        </tr>
        <tr>
          <td>vbOKCancel</td>
          <td>&nbsp;&nbsp;&nbsp;1</td>
          <td>Display <strong>OK</strong> and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbAbortRetryIgnore</td>
          <td>&nbsp;&nbsp;&nbsp;2</td>
          <td>Display <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbYesNoCancel</td>
          <td>&nbsp;&nbsp;&nbsp;3</td>
          <td>Display <strong>Yes</strong>, <strong>No</strong>, and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbYesNo</td>
          <td>&nbsp;&nbsp;&nbsp;4</td>
          <td>Display <strong>Yes</strong> and <strong>No</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbRetryCancel</td>
          <td>&nbsp;&nbsp;&nbsp;5</td>
          <td>Display <strong>Retry</strong> and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbCritical</td>
          <td> 16</td>
          <td>Display Critical Message icon.</td>
        </tr>
        <tr>
          <td>vbQuestion</td>
          <td> 32</td>
          <td>Display Warning Query icon.</td>
        </tr>
        <tr>
          <td>vbExclamation</td>
          <td> 48</td>
          <td>Display Warning Message icon.</td>
        </tr>
        <tr>
          <td>vbInformation</td>
          <td> 64</td>
          <td>Display Information Message icon.</td>
        </tr>
        <tr>
          <td>vbDefaultButton1</td>
          <td>&nbsp;&nbsp;&nbsp;0</td>
          <td>First button is default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton2</td>
          <td>&nbsp;256</td>
          <td>Second button is default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton3</td>
          <td>&nbsp;512</td>
          <td>Third button is default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton4</td>
          <td>&nbsp;768</td>
          <td>Fourth button is default.</td>
        </tr>
        <tr>
          <td>vbApplicationModal</td>
          <td>&nbsp;&nbsp;&nbsp;0</td>
          <td>Application modal; the user must respond to the message box before continuing work in the current application.</td>
        </tr>
        <tr>
          <td>vbSystemModal</td>
          <td>4096</td>
          <td>System modal; all applications are suspended until the user responds to the message box.</td>
        </tr>
      </table>
      The first group of values (0&#0150;5) describes the number and type of buttons displayed in the dialog box; the second group (16, 32, 48, 64) describes the icon style; the third group (0, 256, 512, 768) determines which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When adding numbers to create a final value for the argument <em>buttons</em>, use only one number from each group.<br>
      <strong>Return Values</strong><br>
      <br>
      The <strong>MsgBox</strong> function has the following return values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Button</th>
        </tr>
        <tr>
          <td>vbOK</td>
          <td>1</td>
          <td>OK</td>
        </tr>
        <tr>
          <td>vbCancel</td>
          <td>2</td>
          <td>Cancel</td>
        </tr>
        <tr>
          <td>vbAbort</td>
          <td>3</td>
          <td>Abort</td>
        </tr>
        <tr>
          <td>vbRetry</td>
          <td>4</td>
          <td>Retry</td>
        </tr>
        <tr>
          <td>vbIgnore</td>
          <td>5</td>
          <td>Ignore</td>
        </tr>
        <tr>
          <td>vbYes</td>
          <td>6</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td>vbNo</td>
          <td>7</td>
          <td>No</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      When both <em>helpfile</em> and <em>context</em> are provided, the user can press <strong>F1</strong> to view the Help topic corresponding to the context.<br>
      <br>
      If the dialog box displays a <strong>Cancel</strong> button, pressing the <strong>ESC</strong> key has the same effect as clicking <strong>Cancel</strong>. If the dialog box contains a <strong>Help</strong> button, context-sensitive Help is provided for the dialog box. However, no value is returned until one of the other buttons is clicked.<br>
      <br>
      When the <strong>MsgBox</strong> function is used with Microsoft Internet Explorer, the title of any dialog presented always contains &quot;VBScript:&quot; to differentiate it from standard system dialogs.<br>
      <br>
      The following example uses the <strong>MsgBox</strong> function to display a message box and return a value describing which button was clicked:<br>
      <pre>Dim MyVar
MyVar = <strong>MsgBox</strong> (&quot;Hello World!&quot;,  65,  &quot;MsgBox Example&quot;)
   ' MyVar contains either 1 or 2, depending on which button is clicked.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Now</strong></td>
    <td>Returns the current date and time according to the setting of your computer's system date and time.
      <pre>Now</pre>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Now</strong> function to return the current date and time:<br>
      <pre>Dim MyVar
MyVar = <strong>Now</strong> ' MyVar contains the current date and time. </pre></td>
  </tr>
  <tr>
    <td><strong>Function - Oct</strong></td>
    <td>Returns a string representing the octal value of a number.
      <pre>Oct(number)</pre>
      The <em>number</em> argument is any valid expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      If <em>number</em> is not already a whole number, it is rounded to the nearest whole number before being evaluated.<br>
      <table class="Table-Grey">
        <tr>
          <th>If <em>number</em> is</th>
          <th>Oct returns</th>
        </tr>
        <tr>
          <td>Null</td>
          <td>Null.</td>
        </tr>
        <tr>
          <td>Empty</td>
          <td>Zero (0).</td>
        </tr>
        <tr>
          <td>Any other number</td>
          <td>Up to 11 octal characters,</td>
        </tr>
      </table>
      You can represent octal numbers directly by preceding numbers in the proper range with &amp;O. For example, &amp;O10 is the octal notation for decimal 8.<br>
      <br>
      The following example uses the <strong>Oct</strong> function to return the octal value of a number:<br>
      <pre>Dim MyOct
MyOct = <strong>Oct</strong>(4)     ' Returns 4.
MyOct = <strong>Oct</strong>(8)     ' Returns 10.
MyOct = <strong>Oct</strong>(459)   ' Returns 713.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Replace</strong></td>
    <td>Returns a string in which a specified substring has been replaced with another substring a specified number of times.
      <pre>Replace(expression<strong>,</strong> find<strong>, </strong>replacewith[<strong>,</strong> start[<strong>,</strong> count[<strong>,</strong> compare]]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>expression</em></dt>
        <dd>Required. String expression containing substring to replace. </dd>
        <dt><em>find</em></dt>
        <dd>Required. Substring being searched for.</dd>
        <dt><em>replacewith</em></dt>
        <dd>Required. Replacement substring.</dd>
        <dt><em>start</em></dt>
        <dd>Optional. Position within <em>expression</em> where substring search is to begin. If omitted, 1 is assumed. Must be used in conjunction with <em>count.</em></dd>
        <dt><em>count</em></dt>
        <dd>Optional. Number of substring substitutions to perform. If omitted, the default value is -1, which means make all possible substitutions. Must be used in conjunction with <em>start</em>.</dd>
        <dt><em>compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values. If omitted, the default value is 0, which means perform a binary comparison.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Return Values</strong><br>
      <br>
      <strong>Replace</strong> returns the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>If</th>
          <th>Replace returns</th>
        </tr>
        <tr>
          <td><em>expression</em> is zero-length</td>
          <td>Zero-length string (&quot;&quot;).</td>
        </tr>
        <tr>
          <td>expression is <strong>Null</strong></td>
          <td>An error.</td>
        </tr>
        <tr>
          <td><em>find</em> is zero-length</td>
          <td>Copy of expression.</td>
        </tr>
        <tr>
          <td><em>replacewith</em> is zero-length</td>
          <td>Copy of <em>expression</em> with all occurrences of <em>find</em> removed.</td>
        </tr>
        <tr>
          <td>start &gt; <strong>Len(</strong>expression<strong>)</strong></td>
          <td>Zero-length string.</td>
        </tr>
        <tr>
          <td><em>count</em> is 0</td>
          <td>Copy of expression.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The return value of the <strong>Replace</strong> function is a string, with substitutions made, that begins at the position specified by <em>start</em> and concludes at the end of the <em>expression</em> string. It is not a copy of the original string from start to finish.<br>
      <br>
      The following example uses the <strong>Replace</strong> function to return a string:<br>
      <pre>Dim MyString
' A binary comparison starting at the beginning of the string.
MyString = <strong>Replace</strong>(&quot;XXpXXPXXp&quot;,  &quot;p&quot;,  &quot;Y&quot;)
' Returns &quot;XXYXXPXXY&quot;.

' A textual comparison starting at position 3.
MyString = <strong>Replace</strong>(&quot;XXpXXPXXp&quot;,  &quot;p&quot;,  &quot;Y&quot;,  3,  -1,  1)
' Returns &quot;YXXYXXY&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - RGB</strong></td>
    <td>Returns a whole number representing an RGB color value.
      <pre>RGB(red, green, blue)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>red</em></dt>
        <dd>Required. Number in the range 0-255 representing the red component of the color.</dd>
        <dt><em>green</em></dt>
        <dd>Required. Number in the range 0-255 representing the green component of the color.</dd>
        <dt><em>blue</em></dt>
        <dd>Required. Number in the range 0-255 representing the blue component of the color.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.<br>
      <br>
      The low-order byte contains the value for red, the middle byte contains the value for green, and the high-order byte contains the value for blue.<br>
      <br>
      For applications that require the byte order to be reversed, the following function will provide the same information with the bytes reversed:<br>
      <pre>Function RevRGB(red, green, blue)
   RevRGB = CLng(blue + (green * 256) + (red * 65536))
End Function</pre>
      <br>
      The value for any argument to RGB that exceeds 255 is assumed to be 255.<br></td>
  </tr>
  <tr>
    <td><strong>Function - Right</strong></td>
    <td>Returns a specified number of characters from the right side of a string.
      <pre>Right(string, length)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string</em></dt>
        <dd>String expression from which the rightmost characters are returned. If <em>string</em> contains Null, <strong>Null</strong> is returned.</dd>
        <dt><em>length</em></dt>
        <dd>Numeric expression indicating how many characters to return. If 0, a zero-length string is returned. If greater than or equal to the number of characters in <em>string</em>, the entire string is returned.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To determine the number of characters in <em>string</em>, use the <strong>Len</strong> function.<br>
      <br>
      The following example uses the <strong>Right</strong> function to return a specified number of characters from the right side of a string:<br>
      <pre>Dim AnyString, MyStr
AnyString = &quot;Hello World&quot;      ' Define string.
MyStr = <strong>Right</strong>(AnyString,  1)    ' Returns &quot;d&quot;.
MyStr = <strong>Right</strong>(AnyString,  6)    ' Returns &quot; World&quot;.
MyStr = <strong>Right</strong>(AnyString,  20)   ' Returns &quot;Hello World&quot;.</pre>
      <p class="Note">The RightB function is used with byte data contained in a string. Instead of specifying the number of characters to return, <em>length</em> specifies the number of bytes.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Rnd</strong></td>
    <td>Returns a random number.
      <pre>Rnd[(<em>number</em>)]</pre>
      <br>
      The <em>number</em> argument can be any valid numeric expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Rnd</strong> function returns a value less than 1 but greater than or equal to 0. The value of <em>number</em> determines how <strong>Rnd</strong> generates a random number:<br>
      <table class="Table-Grey">
        <tr>
          <th>If <em>number</em> is</th>
          <th>Rnd generates</th>
        </tr>
        <tr>
          <td>Less than zero</td>
          <td>The same number every time, using <em>number</em> as the seed.</td>
        </tr>
        <tr>
          <td>Greater than zero</td>
          <td>The next random number in the sequence.</td>
        </tr>
        <tr>
          <td>Equal to zero</td>
          <td>The most recently generated number.</td>
        </tr>
        <tr>
          <td>Not supplied</td>
          <td>The next random number in the sequence.</td>
        </tr>
      </table>
      <br>
      For any given initial seed, the same number sequence is generated because each successive call to the <strong>Rnd</strong> function uses the previous number as a seed for the next number in the sequence.<br>
      <br>
      Before calling <strong>Rnd</strong>, use the <strong>Randomize</strong> statement without an argument to initialize the random-number generator with a seed based on the system timer.<br>
      <br>
      To produce random integers in a given range, use this formula:<br>
      <pre>Int((upperbound - lowerbound + 1) * <strong>Rnd</strong> + lowerbound)</pre>
      <br>
      Here, <em>upperbound</em> is the highest number in the range, and <em>lowerbound</em> is the lowest number in the range.<br>
      <p class="Note">To repeat sequences of random numbers, call Rnd with a negative argument immediately before using Randomize with a numeric argument. Using Randomize with the same value for <em>number</em> does not repeat the previous sequence.</p></td>
  </tr>
  <tr>
    <td><strong>Function - Round</strong></td>
    <td>Returns a number rounded to a specified number of decimal places.
      <pre>Round(expression[, numdecimalplaces])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>expression</em></dt>
        <dd>Required. Numeric expression being rounded.</dd>
        <dt><em>numdecimalplaces</em></dt>
        <dd>Optional. Number indicating how many places to the right of the decimal are included in the rounding. If omitted, integers are returned by the <strong>Round</strong> function. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Round</strong> function performs <em>round to even</em>, which is different from <em>round to larger</em>. The return value is the number closest to the value of <em>expression</em>, with the appropriate number of decimal places. If <em>expression</em> is exactly halfway between two possible rounded values, the function returns the possible rounded value whose rightmost digit is an even number. (In a round to larger function, a number that is halfway between two possible rounded values is always rounded to the larger number.)<br>
      <p class="Note">Round to even is a statistically more accurate rounding algorithm than round to larger.</p>
      <strong>Example</strong><br>
      <br>
      The following example uses the <strong>Round</strong> function to round a number to two decimal places:<br>
      <pre>Dim MyVar, pi
pi = 3.14159
MyVar = <strong>Round</strong>(pi,  2) ' MyVar contains 3.14.</pre>
      <p>This example demonstrates how rounding to even works: </p>
      <pre>Dim var1, var2, var3, var4, var5
var1 = <strong>Round</strong>(1.5)      ' var1 contains 2
var2 = <strong>Round</strong>(2.5)      ' var2 contains 2
var3 = <strong>Round</strong>(3.5)      ' var3 contains 4
var4 = <strong>Round</strong>(0.985, 2) ' var4 contains 0.98
var5 = <strong>Round</strong>(0.995, 2) ' var5 contains 1.00</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Second</strong></td>
    <td>Returns a whole number between 0 and 59, inclusive, representing the second of the minute.
      <pre>Second(<em>time</em>)</pre>
      The <em>time</em> argument is any expression that can represent a time. If <em>time</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Second</strong> function to return the current second:<br>
      <pre>Dim MySec
MySec = <strong>Second</strong>(Now)
   ' MySec contains the number representing the current second.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Sgn</strong></td>
    <td>Returns an integer indicating the sign of a number.
      <pre>Sgn(number)</pre>
      The <em>number</em> argument can be any valid numeric expression.<br>
      <br>
      <strong>Return Values</strong><br>
      <br>
      The <strong>Sgn</strong> function has the following return values:<br>
      <table class="Table-Grey">
        <tr>
          <th>If number is</th>
          <th>Sgn returns</th>
        </tr>
        <tr>
          <td>Greater than zero</td>
          <td>1</td>
        </tr>
        <tr>
          <td>Equal to zero</td>
          <td>0</td>
        </tr>
        <tr>
          <td>Less than zero</td>
          <td>-1</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The sign of the <em>number</em> argument determines the return value of the <strong>Sgn</strong> function.<br>
      <br>
      The following example uses the <strong>Sgn</strong> function to determine the sign of a number: <br>
      <pre>Dim MyVar1, MyVar2, MyVar3, MySign
MyVar1 = 12: MyVar2 = -2.4: MyVar3 = 0
MySign = <strong>Sgn</strong>(MyVar1)   ' Returns 1.
MySign = <strong>Sgn</strong>(MyVar2)   ' Returns -1.
MySign = <strong>Sgn</strong>(MyVar3)   ' Returns 0.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Sin</strong></td>
    <td>Returns the sine of an angle.
      <pre>Sin(number)</pre>
      The <em>number</em> argument can be any valid numeric expression that expresses an angle in radians.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Sin</strong> function takes an angle and returns the ratio of two sides of a right triangle. The ratio is the length of the side opposite the angle divided by the length of the hypotenuse. The result lies in the range -1 to 1.<br>
      <br>
      To convert degrees to radians, multiply degrees by pi /180. To convert radians to degrees, multiply radians by 180/pi.<br>
      <br>
      The following example uses the <strong>Sin</strong> function to return the sine of an angle:<br>
      <pre>Dim MyAngle, MyCosecant
MyAngle = 1.3   ' Define angle in radians.
MyCosecant = 1 / <strong>Sin</strong>(MyAngle)   ' Calculate cosecant.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Space</strong></td>
    <td>Returns a string consisting of the specified number of spaces.
      <pre>Space(<em>number</em>)</pre>
      The <em>number</em> argument is the number of spaces you want in the string.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Space</strong> function to return a string consisting of a specified number of spaces:<br>
      <pre>Dim MyString
MyString = <strong>Space</strong>(10)   ' Returns a string with 10 spaces.
MyString = &quot;Hello&quot; &amp; <strong>Space</strong>(10) &amp; &quot;World&quot; ' Insert 10 spaces between two strings.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Split</strong></td>
    <td>Returns a zero-based, one-dimensional array containing a specified number of substrings.
      <pre>Split(expression[<strong>,</strong> delimiter[<strong>,</strong> count[<strong>,</strong> compare]]])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>expression</em></dt>
        <dd>Required. String expression containing substrings and delimiters. If <em>expression</em> is a zero-length string, <strong>Split</strong> returns an empty array, that is, an array with no elements and no data.</dd>
        <dt><em>delimiter</em></dt>
        <dd>Optional. String character used to identify substring limits. If omitted, the space character (&quot; &quot;) is assumed to be the delimiter. If <em>delimiter</em> is a zero-length string, a single-element array containing the entire <em>expression</em> string is returned.</dd>
        <dt><em>count</em></dt>
        <dd>Optional. Number of substrings to be returned; -1 indicates that all substrings are returned.</dd>
        <dt><em>compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Split</strong> function to return an array from a string. The function performs a textual comparison of the delimiter, and returns all of the substrings.<br>
      <pre>Dim MyString, MyArray, Msg
MyString = &quot;VBScriptXisXfun!&quot;
MyArray = <strong>Split</strong>(MyString,  &quot;x&quot;,  -1,  1)
' MyArray(0) contains &quot;VBScript&quot;.
' MyArray(1) contains &quot;is&quot;.
' MyArray(2) contains &quot;fun!&quot;.
Msg = MyArray(0) &amp; &quot; &quot; &amp; MyArray(1)
Msg = Msg   &amp; &quot; &quot; &amp; MyArray(2)
MsgBox Msg</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Sqr</strong></td>
    <td>Returns the square root of a number.
      <pre>Sqr(number)</pre>
      The <em>number</em> argument can be any valid numeric expression greater than or equal to 0.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Sqr</strong> function to calculate the square root of a number:<br>
      <pre>Dim MySqr
MySqr = <strong>Sqr</strong>(4)   ' Returns 2.
MySqr = <strong>Sqr</strong>(23)   ' Returns 4.79583152331272.
MySqr = <strong>Sqr</strong>(0)   ' Returns 0.
MySqr = <strong>Sqr</strong>(-4)   ' Generates a run-time error.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - StrComp</strong></td>
    <td>Returns a value indicating the result of a string comparison.
      <pre>StrComp(string1<strong>, </strong>string2[<strong>, </strong>compare])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>string1</em></dt>
        <dd>Required. Any valid string expression.</dd>
        <dt><em>string2</em></dt>
        <dd>Required. Any valid string expression.</dd>
        <dt><em>compare</em></dt>
        <dd>Optional. Numeric value indicating the kind of comparison to use when evaluating strings. If omitted, a binary comparison is performed. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>compare</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table>
      <strong>Return Values</strong><br>
      <br>
      The <strong>StrComp</strong> function has the following return values:<br>
      <table class="Table-Grey">
        <tr>
          <th>If</th>
          <th>StrComp returns</th>
        </tr>
        <tr>
          <td><em>string1</em> is less than <em>string2</em></td>
          <td>-1</td>
        </tr>
        <tr>
          <td>string1 is equal to string2</td>
          <td>0</td>
        </tr>
        <tr>
          <td><em>string1</em> is greater than <em>string2</em></td>
          <td>1</td>
        </tr>
        <tr>
          <td><em>string1</em> or <em>string2</em> is Null</td>
          <td>Null</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>StrComp</strong> function to return the results of a string comparison. If the third argument is 1, a textual comparison is performed; if the third argument is 0 or omitted, a binary comparison is performed.<br>
      <pre>Dim MyStr1, MyStr2, MyComp
MyStr1 = &quot;ABCD&quot;: MyStr2 = &quot;abcd&quot;   ' Define variables.
MyComp = <strong>StrComp</strong>(MyStr1,  MyStr2,  1)   ' Returns 0.
MyComp = <strong>StrComp</strong>(MyStr1,  MyStr2,  0)   ' Returns -1.
MyComp = <strong>StrComp</strong>(MyStr2,  MyStr1)   ' Returns 1.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - String</strong></td>
    <td>Returns a repeating character string of the length specified.
      <pre>String(number<strong>, </strong>character)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>number</em></dt>
        <dd>Length of the returned string. If <em>number</em> contains Null, <strong>Null</strong> is returned.</dd>
        <dt><em>character</em></dt>
        <dd>Character code specifying the character or string expression whose first character is used to build the return string. If <em>character</em> contains <strong>Null</strong>, <strong>Null</strong> is returned.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      If you specify a number for <em>character</em> greater than 255, <strong>String</strong> converts the number to a valid character code using the formula:<br>
      <pre>character Mod 256</pre>
      The following example uses the <strong>String</strong> function to return repeating character strings of the length specified:<br>
      <pre>Dim MyString
MyString = <strong>String</strong>(5,  &quot;*&quot;)   ' Returns &quot;*****&quot;.
MyString = <strong>String</strong>(5,  42)   ' Returns &quot;*****&quot;.
MyString = <strong>String</strong>(10,  &quot;ABC&quot;)   ' Returns &quot;AAAAAAAAAA&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - StrReverse</strong></td>
    <td>Returns a string in which the character order of a specified string is reversed.
      <pre>StrReverse(<em>string1</em>)</pre>
      The <em>string1</em> argument is the string whose characters are to be reversed. If <em>string1</em> is a zero-length string (&quot;&quot;), a zero-length string is returned. If <em>string1</em> is <strong>Null</strong>, an error occurs.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>StrReverse</strong> function to return a string in reverse order:<br>
      <pre>Dim MyStr
MyStr = <code><strong>StrReverse(</strong></code>&quot;VBScript&quot;) ' MyStr contains &quot;tpircSBV&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Tan</strong></td>
    <td>Returns the tangent of an angle.
      <pre>Tan(number)</pre>
      <br>
      The <em>number</em> argument can be any valid numeric expression that expresses an angle in radians.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <strong>Tan</strong> takes an angle and returns the ratio of two sides of a right triangle. The ratio is the length of the side opposite the angle divided by the length of the side adjacent to the angle.<br>
      <br>
      To convert degrees to radians, multiply degrees by pi /180. To convert radians to degrees, multiply radians by 180/pi.<br>
      <br>
      The following example uses the <strong>Tan</strong> function to return the tangent of an angle:<br>
      <pre>Dim MyAngle, MyCotangent
MyAngle = 1.3   ' Define angle in radians.
MyCotangent = 1 / <strong>Tan(</strong>MyAngle)   ' Calculate cotangent.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Time</strong></td>
    <td>Returns a <strong>Variant</strong> of subtype <strong>Date</strong> indicating the current system time.
      <pre>Time</pre>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Time</strong> function to return the current system time:<br>
      <pre>Dim MyTime
MyTime = <strong>Time</strong>   ' Return current system time.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Timer</strong></td>
    <td>Returns the number of seconds that have elapsed since 12:00 AM (midnight).
      <pre>Timer</pre>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Timer</strong> function to determine the time it takes to iterate a <strong>For...Next</strong> loop <em>N</em> times: <br>
      <pre>Function TimeIt(N)
   Dim StartTime, EndTime
   StartTime = <strong>Timer</strong>
   For I = 1 To N
   Next
   EndTime = <strong>Timer</strong>
   TimeIt = EndTime - StartTime
End Function </pre></td>
  </tr>
  <tr>
    <td><strong>Function - TimeSerial</strong></td>
    <td>Returns a <strong>Variant</strong> of subtype <strong>Date</strong> containing the time for a specific hour, minute, and second.
      <pre>TimeSerial(<em>hour</em><strong>, </strong><em>minute</em><strong>, </strong><em>second</em>)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>hour</em></dt>
        <dd>Number between 0 (12:00 A.M.) and 23 (11:00 P.M.), inclusive, or a numeric expression.</dd>
        <dt><em>minute</em></dt>
        <dd>Any numeric expression.</dd>
        <dt><em>second</em></dt>
        <dd>Any numeric expression.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To specify a time, such as 11:59:59, the range of numbers for each <strong>TimeSerial</strong> argument should be in the accepted range for the unit; that is, 0&#0150;23 for hours and 0&#0150;59 for minutes and seconds. However, you can also specify relative times for each argument using any numeric expression that represents some number of hours, minutes, or seconds before or after a certain time.<br>
      <br>
      The following example uses expressions instead of absolute time numbers. The <strong>TimeSerial</strong> function returns a time for 15 minutes before (-15) six hours before noon (12 - 6), or 5:45:00 A.M.<br>
      <pre>Dim MyTime1
MyTime1 = <strong>TimeSerial</strong>(12 - 6,  -15, 0) ' Returns 5:45:00 AM.</pre>
      When any argument exceeds the accepted range for that argument, it increments to the next larger unit as appropriate. For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes. However, if any single argument is outside the range -32,768 to 32,767, or if the time specified by the three arguments, either directly or by expression, causes the date to fall outside the acceptable range of dates, an error occurs. </td>
  </tr>
  <tr>
    <td><strong>Function - TimeValue</strong></td>
    <td>Returns a <strong>Variant</strong> of subtype <strong>Date</strong> containing the time.
      <pre>TimeValue(<em>time</em>)</pre>
      The <em>time</em> argument is usually a string expression representing a time from 0:00:00 (12:00:00 A.M.) to 23:59:59 (11:59:59 P.M.), inclusive. However, <em>time</em> can also be any expression that represents a time in that range. If <em>time</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      You can enter valid times using a 12-hour or 24-hour clock. For example, &quot;2:24PM&quot; and &quot;14:24&quot; are both valid <em>time</em> arguments. If the <em>time</em> argument contains date information, <strong>TimeValue</strong> doesn't return the date information. However, if <em>time</em> includes invalid date information, an error occurs.<br>
      <br>
      The following example uses the <strong>TimeValue</strong> function to convert a string to a time. You can also use date literals to directly assign a time to a <strong>Variant </strong>(for example, MyTime = #4:35:17 PM#).<br>
      <pre>Dim MyTime
MyTime = <strong>TimeValue</strong>(&quot;4:35:17 PM&quot;)   ' MyTime contains 4:35:17 PM.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - TypeName</strong></td>
    <td>Returns a string that provides <strong>Variant</strong> subtype information about a variable.
      <pre>TypeName(<em>varname</em>)</pre>
      The required <em>varname</em> argument can be any variable.<br>
      <br>
      <strong>Return Values</strong><br>
      <br>
      The <strong>TypeName</strong> function has the following return values:
      <table class="Table-Grey">
        <tr>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>Byte</td>
          <td>Byte value</td>
        </tr>
        <tr>
          <td>Integer</td>
          <td>Integer value</td>
        </tr>
        <tr>
          <td>Long</td>
          <td>Long integer value</td>
        </tr>
        <tr>
          <td>Single</td>
          <td>Single-precision floating-point value</td>
        </tr>
        <tr>
          <td>Double</td>
          <td>Double-precision floating-point value</td>
        </tr>
        <tr>
          <td>Currency</td>
          <td>Currency value</td>
        </tr>
        <tr>
          <td>Decimal</td>
          <td>Decimal value</td>
        </tr>
        <tr>
          <td>Date</td>
          <td>Date or time value</td>
        </tr>
        <tr>
          <td>String</td>
          <td>Character string value</td>
        </tr>
        <tr>
          <td>Boolean</td>
          <td>Boolean value; <strong>True</strong> or <strong>False</strong></td>
        </tr>
        <tr>
          <td>Empty</td>
          <td>Uninitialized</td>
        </tr>
        <tr>
          <td>Null</td>
          <td>No valid data</td>
        </tr>
        <tr>
          <td>&lt;object type&gt;</td>
          <td>Actual type name of an object</td>
        </tr>
        <tr>
          <td>Object</td>
          <td>Generic object</td>
        </tr>
        <tr>
          <td>Unknown</td>
          <td>Unknown object type</td>
        </tr>
        <tr>
          <td>Nothing</td>
          <td>Object variable that doesn't yet refer to an object instance</td>
        </tr>
        <tr>
          <td>Error</td>
          <td>Error</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>TypeName</strong> function to return information about a variable:<br>
      <pre>Dim ArrayVar(4), MyType
NullVar = Null   ' Assign Null value.

MyType = <strong>TypeName</strong>(&quot;VBScript&quot;)   ' Returns &quot;String&quot;.
MyType = <strong>TypeName</strong>(4)            ' Returns &quot;Integer&quot;.
MyType = <strong>TypeName</strong>(37.50)        ' Returns &quot;Double&quot;.
MyType = <strong>TypeName</strong>(NullVar)      ' Returns &quot;Null&quot;.
MyType = <strong>TypeName</strong>(ArrayVar)     ' Returns &quot;Variant()&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - UBound</strong></td>
    <td>Returns the largest available subscript for the indicated dimension of an array.
      <pre>UBound(arrayname[, dimension])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>arrayname</em></dt>
        <dd>Required. Name of the array variable; follows standard variable naming conventions.</dd>
        <dt><em>dimension</em></dt>
        <dd>Optional. Whole number indicating which dimension's upper bound is returned. Use 1 for the first dimension, 2 for the second, and so on. If <em>dimension</em> is omitted, 1 is assumed.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The <strong>UBound</strong> function is used with the <strong>LBound</strong> function to determine the size of an array. Use the <strong>LBound</strong> function to find the lower limit of an array dimension.<br>
      <br>
      The lower bound for any dimension is always 0. As a result, <strong>UBound</strong> returns the following values for an array with these dimensions:<br>
      <pre>Dim A(100,3,4)</pre>
      <table class="Table-Grey">
        <tr>
          <th>Statement</th>
          <th>Return Value</th>
        </tr>
        <tr>
          <td>UBound(A, 1)</td>
          <td>100</td>
        </tr>
        <tr>
          <td>UBound(A, 2)</td>
          <td>3</td>
        </tr>
        <tr>
          <td>UBound(A, 3)</td>
          <td>4</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Function - UCase</strong></td>
    <td>Returns a string that has been converted to uppercase.
      <pre>UCase(<em>string</em>)</pre>
      The <em>string</em> argument is any valid string expression. If <em>string</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      Only lowercase letters are converted to uppercase; all uppercase letters and non-letter characters remain unchanged.<br>
      <br>
      The following example uses the <strong>UCase</strong> function to return an uppercase version of a string:<br>
      <pre>Dim MyWord
MyWord = <strong>UCase</strong>(&quot;Hello World&quot;)   ' Returns &quot;HELLO WORLD&quot;.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Unescape</strong></td>
    <td>Decodes a string encoded with the <strong>Escape</strong> function.
      <pre>Unescape(<em>charString</em>)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>charString</em></dt>
        <dd>Required. String expression to be decoded.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The <strong>Unescape </strong>function returns a string (in Unicode format) that contains the contents of charString. ASCII character set equivalents replace all characters encoded with the <strong>%</strong><em>xx</em> hexadecimal form. Characters encoded in <strong>%u</strong><em>xxxx</em> format (Unicode characters) are replaced with the Unicode character with hexadecimal encoding <em>xxxx</em>.</td>
  </tr>
  <tr>
    <td><strong>Function - VarType</strong></td>
    <td>Returns a value indicating the subtype of a variable.
      <pre>VarType(<em>varname</em>)</pre>
      The <em>varname</em> argument can be any variable.<br>
      <br>
      <strong>Return Values</strong><br>
      <br>
      The <strong>VarType</strong> function returns the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbEmpty</td>
          <td>0</td>
          <td>Empty (uninitialized)</td>
        </tr>
        <tr>
          <td>vbNull</td>
          <td>1</td>
          <td>Null (no valid data)</td>
        </tr>
        <tr>
          <td>vbInteger</td>
          <td>2</td>
          <td>Integer</td>
        </tr>
        <tr>
          <td>vbLong</td>
          <td>3</td>
          <td>Long integer</td>
        </tr>
        <tr>
          <td>vbSingle</td>
          <td>4</td>
          <td>Single-precision floating-point number</td>
        </tr>
        <tr>
          <td>vbDouble</td>
          <td>5</td>
          <td>Double-precision floating-point number</td>
        </tr>
        <tr>
          <td>vbCurrency</td>
          <td>6</td>
          <td>Currency</td>
        </tr>
        <tr>
          <td>vbDate</td>
          <td>7</td>
          <td>Date</td>
        </tr>
        <tr>
          <td>vbString</td>
          <td>8</td>
          <td>String</td>
        </tr>
        <tr>
          <td>vbObject</td>
          <td>9</td>
          <td>Automation object</td>
        </tr>
        <tr>
          <td>vbError</td>
          <td>10</td>
          <td>Error</td>
        </tr>
        <tr>
          <td>vbBoolean</td>
          <td>11</td>
          <td>Boolean</td>
        </tr>
        <tr>
          <td>vbVariant</td>
          <td>12</td>
          <td>Variant (used only with arrays of Variants)</td>
        </tr>
        <tr>
          <td>vbDataObject</td>
          <td>13</td>
          <td>A data-access object</td>
        </tr>
        <tr>
          <td>vbByte</td>
          <td>17</td>
          <td>Byte</td>
        </tr>
        <tr>
          <td>vbArray</td>
          <td>8192</td>
          <td>Array</td>
        </tr>
      </table>
      <p class="Note">These constants are specified by VBScript. As a result, the names can be used anywhere in your code in place of the actual values.</p>
      <strong>Remarks</strong><br>
      <br>
      The <strong>VarType</strong> function never returns the value for Array by itself. It is always added to some other value to indicate an array of a particular type. The value for Variant is only returned when it has been added to the value for Array to indicate that the argument to the <strong>VarType</strong> function is an array. For example, the value returned for an array of integers is calculated as 2 + 8192, or 8194. If an object has a default property, <strong>VarType</strong> <strong>(</strong><em>object</em><strong>)</strong> returns the type of its default property.<br>
      <br>
      The following example uses the <strong>VarType</strong> function to determine the subtype of a variable.<br>
      <pre>Dim MyCheck
MyCheck = <strong>VarType</strong>(300)          ' Returns 2.
MyCheck = <strong>VarType</strong>(#10/19/62#)   ' Returns 7.
MyCheck = <strong>VarType</strong>(&quot;VBScript&quot;)   ' Returns 8.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Weekday</strong></td>
    <td>Returns a whole number representing the day of the week.
      <pre>Weekday(date, [firstdayofweek])</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>date</em></dt>
        <dd>Any expression that can represent a date. If <em>date</em> contains Null, <strong>Null</strong> is returned.</dd>
        <dt><em>firstdayofweek</em></dt>
        <dd>A constant that specifies the first day of the week. If omitted, <strong>vbSunday</strong> is assumed.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>firstdayofweek</em> argument has these settings:
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystemDayOfWeek</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
      </table>
      <strong>Return Values</strong><br>
      <br>
      The <strong>Weekday</strong> function can return any of these values:
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Weekday</strong> function to obtain the day of the week from a specified date:<br>
      <pre>Dim MyDate, MyWeekDay
MyDate = #October 19, 1962#   ' Assign a date.
MyWeekDay = <strong>Weekday</strong>(MyDate)   ' MyWeekDay contains 6 because MyDate represents a Friday.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - WeekdayName</strong></td>
    <td>Returns a string indicating the specified day of the week.
      <pre>WeekdayName(weekday<strong>,</strong> abbreviate<strong>,</strong> firstdayofweek)</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>weekday</em></dt>
        <dd>Required. The numeric designation for the day of the week. Numeric value of each day depends on setting of the <em>firstdayofweek</em> setting.</dd>
        <dt><em>abbreviate</em></dt>
        <dd>Optional. Boolean value that indicates if the weekday name is to be abbreviated. If omitted, the default is <strong>False</strong>, which means that the weekday name is not abbreviated.</dd>
        <dt><em>firstdayofweek</em></dt>
        <dd>Optional. Numeric value indicating the first day of the week. See Settings section for values.</dd>
      </dl>
      <strong>Settings</strong><br>
      <br>
      The <em>firstdayofweek</em> argument can have the following values:<br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbUseSystemDayOfWeek</td>
          <td>0</td>
          <td>Use National Language Support (NLS) API setting.</td>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday (default)</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
      </table>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>WeekDayName</strong> function to return the specified day:<br>
      <pre>Dim MyDate
MyDate = <strong>WeekDayName</strong>(6, True)   ' MyDate contains Fri.</pre></td>
  </tr>
  <tr>
    <td><strong>Function - Year</strong></td>
    <td>Returns a whole number representing the year.
      <pre>Year(<em>date</em>)</pre>
      The <em>date</em> argument is any expression that can represent a date. If <em>date</em> contains Null, <strong>Null</strong> is returned.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      The following example uses the <strong>Year</strong> function to obtain the year from a specified date:
      <pre>Dim MyDate, MyYear
MyDate = #October 19, 1962#   ' Assign a date.
MyYear = <strong>Year</strong>(MyDate)         ' MyYear contains 1962.</pre></td>
  </tr>
  <tr>
    <td><strong>Keyword - Empty</strong></td>
    <td> The <strong>Empty</strong> keyword is used to indicate an uninitialized variable value. This is not the same thing as <strong>Null</strong>. </td>
  </tr>
  <tr>
    <td><strong>Keyword - False</strong></td>
    <td> The <strong>False</strong> keyword has a value equal to 0. </td>
  </tr>
  <tr>
    <td><strong>Keyword - Nothing</strong></td>
    <td>The <strong>Nothing</strong> keyword in VBScript is used to disassociate an object variable from any actual object. Use the <strong>Set</strong> statement to assign <strong>Nothing</strong> to an object variable. For example:
      <pre>Set MyObject = <strong>Nothing</strong></pre>
      Several object variables can refer to the same actual object. When <strong>Nothing</strong> is assigned to an object variable, that variable no longer refers to any actual object. When several object variables refer to the same object, memory and system resources associated with the object to which the variables refer are released only after all of them have been set to <strong>Nothing</strong>, either explicitly using <strong>Set</strong>, or implicitly after the last object variable set to <strong>Nothing</strong> goes out of scope. </td>
  </tr>
  <tr>
    <td><strong>Keyword - Null</strong></td>
    <td> The <strong>Null</strong> keyword is used to indicate that a variable contains no valid data. This is not the same thing as <strong>Empty</strong>. </td>
  </tr>
  <tr>
    <td><strong>Keyword - True</strong></td>
    <td> The <strong>True</strong> keyword has a value equal to -1. </td>
  </tr>
  <tr>
    <td><strong>Constants - Color</strong></td>
    <td>Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each. <br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBlack</td>
          <td>&amp;h00</td>
          <td>Black</td>
        </tr>
        <tr>
          <td>vbRed</td>
          <td>&amp;hFF</td>
          <td>Red</td>
        </tr>
        <tr>
          <td>vbGreen</td>
          <td>&amp;hFF00</td>
          <td>Green</td>
        </tr>
        <tr>
          <td>vbYellow</td>
          <td>&amp;hFFFF</td>
          <td>Yellow</td>
        </tr>
        <tr>
          <td>vbBlue</td>
          <td>&amp;hFF0000</td>
          <td>Blue</td>
        </tr>
        <tr>
          <td>vbMagenta</td>
          <td>&amp;hFF00FF</td>
          <td>Magenta</td>
        </tr>
        <tr>
          <td>vbCyan</td>
          <td>&amp;hFFFF00</td>
          <td>Cyan</td>
        </tr>
        <tr>
          <td>vbWhite</td>
          <td>&amp;hFFFFFF</td>
          <td>White</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - Comparison</strong></td>
    <td>Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each.<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbBinaryCompare</td>
          <td>0</td>
          <td>Perform a binary comparison.</td>
        </tr>
        <tr>
          <td>vbTextCompare</td>
          <td>1</td>
          <td>Perform a textual comparison.</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - Date and Time</strong></td>
    <td>Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each.<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbSunday</td>
          <td>1</td>
          <td>Sunday</td>
        </tr>
        <tr>
          <td>vbMonday</td>
          <td>2</td>
          <td>Monday</td>
        </tr>
        <tr>
          <td>vbTuesday</td>
          <td>3</td>
          <td>Tuesday</td>
        </tr>
        <tr>
          <td>vbWednesday</td>
          <td>4</td>
          <td>Wednesday</td>
        </tr>
        <tr>
          <td>vbThursday</td>
          <td>5</td>
          <td>Thursday</td>
        </tr>
        <tr>
          <td>vbFriday</td>
          <td>6</td>
          <td>Friday</td>
        </tr>
        <tr>
          <td>vbSaturday</td>
          <td>7</td>
          <td>Saturday</td>
        </tr>
        <tr>
          <td>vbUseSystemDayOfWeek</td>
          <td>0</td>
          <td>Use the day of the week specified in your system settings for the first day of the week.</td>
        </tr>
        <tr>
          <td>vbFirstJan1</td>
          <td>1</td>
          <td>Use the week in which January 1 occurs (default).</td>
        </tr>
        <tr>
          <td>vbFirstFourDays</td>
          <td>2</td>
          <td>Use the first week that has at least four days in the new year.</td>
        </tr>
        <tr>
          <td>vbFirstFullWeek</td>
          <td>3</td>
          <td>Use the first full week of the year.</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - Date Format</strong></td>
    <td>Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each.<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbGeneralDate</td>
          <td>0</td>
          <td>Display a date and/or time. For real numbers, display a date and time. If there is no fractional part, display only a date. If there is no integer part, display time only. Date and time display is determined by your system settings.</td>
        </tr>
        <tr>
          <td>vbLongDate</td>
          <td>1</td>
          <td>Display a date using the long date format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbShortDate</td>
          <td>2</td>
          <td>Display a date using the short date format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbLongTime</td>
          <td>3</td>
          <td>Display a time using the long time format specified in your computer's regional settings.</td>
        </tr>
        <tr>
          <td>vbShortTime</td>
          <td>4</td>
          <td>Display a time using the short time format specified in your computer's regional settings.</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - MsgBox</strong></td>
    <td>The following constants are used with the <strong>MsgBox</strong> function to identify what buttons and icons appear on a message box and which button is the default. In addition, the modality of the <strong>MsgBox</strong> can be specified. Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each. <br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbOKOnly</td>
          <td>0</td>
          <td>Display <strong>OK</strong> button only.</td>
        </tr>
        <tr>
          <td>vbOKCancel</td>
          <td>1</td>
          <td>Display <strong>OK</strong> and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbAbortRetryIgnore</td>
          <td>2</td>
          <td>Display <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbYesNoCancel</td>
          <td>3</td>
          <td>Display <strong>Yes</strong>, <strong>No</strong>, and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbYesNo</td>
          <td>4</td>
          <td>Display <strong>Yes</strong> and <strong>No</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbRetryCancel</td>
          <td>5</td>
          <td>Display <strong>Retry</strong> and <strong>Cancel</strong> buttons.</td>
        </tr>
        <tr>
          <td>vbCritical</td>
          <td>16</td>
          <td>Display Critical Message icon.</td>
        </tr>
        <tr>
          <td>vbQuestion</td>
          <td>32</td>
          <td>Display <strong>Warning Query</strong> icon.</td>
        </tr>
        <tr>
          <td>vbExclamation</td>
          <td>48</td>
          <td>Display Warning Message icon.</td>
        </tr>
        <tr>
          <td>vbInformation</td>
          <td>64</td>
          <td>Display Information Message icon.</td>
        </tr>
        <tr>
          <td>vbDefaultButton1</td>
          <td>0</td>
          <td>First button is the default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton2</td>
          <td>256</td>
          <td>Second button is the default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton3</td>
          <td>512</td>
          <td>Third button is the default.</td>
        </tr>
        <tr>
          <td>vbDefaultButton4</td>
          <td>768</td>
          <td>Fourth button is the default.</td>
        </tr>
        <tr>
          <td>vbApplicationModal</td>
          <td>0</td>
          <td>Application modal. The user must respond to the message box before continuing work in the current application.</td>
        </tr>
        <tr>
          <td>vbSystemModal</td>
          <td>4096</td>
          <td>System modal. On Win16 systems, all applications are suspended until the user responds to the message box. On Win32 systems, this constant provides an application modal message box that always remains on top of any other programs you may have running. </td>
        </tr>
      </table>
      The following constants are used with the <strong>MsgBox</strong> function to identify which button a user has selected. These constants are only available when your project has an explicit reference to the appropriate type library containing these constant definitions. For VBScript, you must explicitly declare these constants in your code.
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbOK</td>
          <td>1</td>
          <td><strong>OK</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbCancel</td>
          <td>2</td>
          <td><strong>Cancel</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbAbort</td>
          <td>3</td>
          <td><strong>Abort</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbRetry</td>
          <td>4</td>
          <td><strong>Retry</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbIgnore</td>
          <td>5</td>
          <td><strong>Ignore</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbYes</td>
          <td>6</td>
          <td><strong>Yes</strong> button was clicked.</td>
        </tr>
        <tr>
          <td>vbNo</td>
          <td>7</td>
          <td><strong>No</strong> button was clicked.</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - String</strong></td>
    <td>Since these constants are built into VBScript, you don't have to define them before using them. Use them anywhere in your code to represent the values shown for each.<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbCr</td>
          <td>Chr(13)</td>
          <td>Carriage return.</td>
        </tr>
        <tr>
          <td>VbCrLf</td>
          <td>Chr(13) &amp; Chr(10)</td>
          <td>Carriage return&#0150;linefeed combination.</td>
        </tr>
        <tr>
          <td>vbFormFeed</td>
          <td>Chr(12)</td>
          <td>Form feed; not useful in Microsoft Windows.</td>
        </tr>
        <tr>
          <td>vbLf</td>
          <td>Chr(10)</td>
          <td>Line feed.</td>
        </tr>
        <tr>
          <td>vbNewLine</td>
          <td>Chr(13) &amp; Chr(10) or Chr(10)</td>
          <td>Platform-specific newline character; whatever is appropriate for the platform.</td>
        </tr>
        <tr>
          <td>vbNullChar</td>
          <td>Chr(0)</td>
          <td>Character having the value 0.</td>
        </tr>
        <tr>
          <td>vbNullString</td>
          <td>String having value 0</td>
          <td>Not the same as a zero-length string (&quot;&quot;); used for calling external procedures.</td>
        </tr>
        <tr>
          <td>vbTab</td>
          <td>Chr(9)</td>
          <td>Horizontal tab.</td>
        </tr>
        <tr>
          <td>vbVerticalTab</td>
          <td>Chr(11)</td>
          <td>Vertical tab; not useful in Microsoft Windows.</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Constants - VarType</strong></td>
    <td>These constants are only available when your project has an explicit reference to the appropriate type library containing these constant definitions. For VBScript, you must explicitly declare these constants in your code.<br>
      <br>
      <table class="Table-Grey">
        <tr>
          <th>Constant</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>vbEmpty</td>
          <td>&nbsp;&nbsp;&nbsp;0</td>
          <td>Uninitialized (default)</td>
        </tr>
        <tr>
          <td>vbNull</td>
          <td>&nbsp;&nbsp;&nbsp;1</td>
          <td>Contains no valid data</td>
        </tr>
        <tr>
          <td>vbInteger</td>
          <td>&nbsp;&nbsp;&nbsp;2</td>
          <td>Integer subtype</td>
        </tr>
        <tr>
          <td>vbLong</td>
          <td>&nbsp;&nbsp;&nbsp;3</td>
          <td>Long subtype</td>
        </tr>
        <tr>
          <td>vbSingle</td>
          <td>&nbsp;&nbsp;&nbsp;4</td>
          <td>Single subtype</td>
        </tr>
        <tr>
          <td>vbDouble</td>
          <td>&nbsp;&nbsp;&nbsp;5</td>
          <td>Double subtype</td>
        </tr>
        <tr>
          <td>vbCurrency</td>
          <td>&nbsp;&nbsp;&nbsp;6</td>
          <td>Currency subtype</td>
        </tr>
        <tr>
          <td>vbDate</td>
          <td>&nbsp;&nbsp;&nbsp;7</td>
          <td>Date subtype</td>
        </tr>
        <tr>
          <td>vbString</td>
          <td>&nbsp;&nbsp;&nbsp;8</td>
          <td>String subtype</td>
        </tr>
        <tr>
          <td>vbObject</td>
          <td>&nbsp;&nbsp;&nbsp;9</td>
          <td>Object</td>
        </tr>
        <tr>
          <td>vbError</td>
          <td> 10</td>
          <td>Error subtype</td>
        </tr>
        <tr>
          <td>vbBoolean</td>
          <td> 11</td>
          <td>Boolean subtype</td>
        </tr>
        <tr>
          <td>vbVariant</td>
          <td> 12</td>
          <td>Variant (used only for arrays of variants)</td>
        </tr>
        <tr>
          <td>vbDataObject</td>
          <td> 13</td>
          <td>Data access object</td>
        </tr>
        <tr>
          <td>vbDecimal</td>
          <td> 14</td>
          <td>Decimal subtype</td>
        </tr>
        <tr>
          <td>vbByte</td>
          <td> 17</td>
          <td>Byte subtype</td>
        </tr>
        <tr>
          <td>vbArray</td>
          <td>8192</td>
          <td>Array</td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><strong>Statement - Call</strong></td>
    <td>Transfers control to a <strong>Sub</strong> or <strong>Function</strong> procedure.
      <pre>[Call] name [argumentlist]</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Call</em></dt>
        <dd>Optional keyword. If specified, you must enclose <em>argumentlist</em> in parentheses. For example:
          <pre>Call MyProc(0)</pre>
        </dd>
        <dt><em>name</em></dt>
        <dd>Required. Name of the procedure to call.</dd>
        <dt><em>argumentlist</em></dt>
        <dd>Optional. Comma-delimited list of variables, arrays, or expressions to pass to the procedure. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      You are not required to use the <strong>Call</strong> keyword when calling a procedure. However, if you use the <strong>Call</strong> keyword to call a procedure that requires arguments, <em>argumentlist</em> must be enclosed in parentheses. If you omit the <strong>Call</strong> keyword, you also must omit the parentheses around <em>argumentlist</em>. If you use either <strong>Call</strong> syntax to call any intrinsic or user-defined function, the function's return value is discarded.<br>
      <pre><strong>Call</strong> MyFunction(&quot;Hello World&quot;)
Function MyFunction(text)
   MsgBox text
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Class</strong></td>
    <td>Declares the name of a class, as well as a definition of the variables, properties, and methods that comprise the class.
      <pre>Class <em>name</em>
&nbsp;&nbsp;&nbsp;<em>statements</em>
End Class</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>name</em></dt>
        <dd>Required. Name of the <strong>Class</strong>; follows standard variable naming conventions.</dd>
        <dt><em>statements</em></dt>
        <dd>Required. One or more statements that define the variables, properties, and methods of the <strong>Class</strong>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Within a <strong>Class</strong> block, members are declared as either <strong>Private</strong> or <strong>Public</strong> using the appropriate declaration statements. Anything declared as <strong>Private</strong> is visible only within the <strong>Class</strong> block. Anything declared as Public is visible within the <strong>Class</strong> block, as well as by code outside the <strong>Class</strong> block. Anything not explicitly declared as either <strong>Private</strong> or <strong>Public</strong> is <strong>Public</strong> by default. Procedures (either <strong>Sub</strong> or <strong>Function</strong>) declared <strong>Public</strong> within the class block become methods of the class. <strong>Public</strong> variables serve as properties of the class, as do properties explicitly declared using <strong>Property Get</strong>, <strong>Property Let</strong>, and <strong>Property Set</strong>. Default properties and methods for the class are specified in their declarations using the <strong>Default</strong> keyword. See the individual declaration statement topics for information on how this keyword is used.<br></td>
  </tr>
  <tr>
    <td><strong>Statement - Const</strong></td>
    <td>Declares constants for use in place of literal values.
      <pre>[Public | Private] Const <em>constname</em> = <em>expression</em></pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Optional. Keyword used at script level to declare constants that are available to all procedures in all scripts. Not allowed in procedures.</dd>
        <dt><em>Private</em></dt>
        <dd>Optional. Keyword used at script level to declare constants that are available only within the script where the declaration is made. Not allowed in procedures.</dd>
        <dt><em>constname</em></dt>
        <dd>Required. Name of the constant; follows standard variable naming conventions.</dd>
        <dt><em>expression</em></dt>
        <dd>Required. Literal or other constant, or any combination that includes all arithmetic or logical operators except <strong>Is</strong>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Constants are public by default. Within procedures, constants are always private; their visibility can't be changed. Within a script, the default visibility of a script-level constant can be changed using the <strong>Private</strong> keyword.<br>
      <br>
      To combine several constant declarations on the same line, separate each constant assignment with a comma. When constant declarations are combined in this way, the <strong>Public</strong> or<strong> Private</strong> keyword, if used, applies to all of them.<br>
      <br>
      You can't use variables, user-defined functions, or intrinsic VBScript functions (such as <strong>Chr</strong>) in constant declarations. By definition, they can't be constants. You also can't create a constant from any expression that involves an operator, that is, only simple constants are allowed. Constants declared in a <strong>Sub</strong> or <strong>Function</strong> procedure are local to that procedure. A constant declared outside a procedure is defined throughout the script in which it is declared. You can use constants anywhere you can use an expression. The following code illustrates the use of the <strong>Const</strong> statement: <br>
      <pre><strong>Const</strong> MyVar = 459   ' Constants are Public by default.
Private <strong>Const</strong> MyString = &quot;HELP&quot;   ' Declare Private constant.
<strong>Const</strong> MyStr = &quot;Hello&quot;, MyNumber = 3.4567   ' Declare multiple constants on same line.</pre>
      <p class="Note">Constants can make your scripts self-documenting and easy to modify. Unlike variables, constants cannot be inadvertently changed while your script is running.</p></td>
  </tr>
  <tr>
    <td><strong>Statement - Dim</strong></td>
    <td>Declares variables and allocates storage space.
      <pre>Dim varname[([subscripts])][<strong>, </strong>varname[([subscripts])]] <strong>. . .</strong></pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>varname</em></dt>
        <dd>Name of the variable; follows standard variable naming conventions.</dd>
        <dt><em>subscripts</em></dt>
        <dd>Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <em>subscripts</em> argument uses the following syntax:<br>
          <pre>upperbound [, upperbound] . . .</pre>
          The lower bound of an array is always zero.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      Variables declared with <strong>Dim</strong> at the script level are available to all procedures within the script. At the procedure level, variables are available only within the procedure.<br>
      <br>
      You can also use the <strong>Dim</strong> statement with empty parentheses to declare a dynamic array. After declaring a dynamic array, use the <strong>ReDim</strong> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <strong>Dim </strong>statement, an error occurs.<br>
      <p class="Note">When you use the Dim statement in a procedure, you generally put the Dim statement at the beginning of the procedure.</p>
      The following examples illustrate the use of the <strong>Dim</strong> statement:<br>
      <pre><strong>Dim</strong> Names(9)       ' Declare an array with 10 elements.
<strong>Dim</strong> Names()        ' Declare a dynamic array.
<strong>Dim</strong> MyVar, MyNum   ' Declare two variables.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Do...Loop</strong></td>
    <td>Repeats a block of statements while a condition is <strong>True</strong> or until a condition becomes <strong>True</strong>.
      <pre>Do [{While | Until} <em>condition</em>]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[Exit Do]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
Loop </pre>
      <br>
      Or, you can use this syntax:<br>
      <pre>Do
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[Exit Do]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
Loop [{While | Until} <em>condition</em>]</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>condition</em></dt>
        <dd>Numeric or string expression that is <strong>True</strong> or <strong>False</strong>. If <em>condition</em> is <strong>Null</strong>, <em>condition</em> is treated as <strong>False</strong>.</dd>
        <dt><em>statements</em></dt>
        <dd>One or more statements that are repeated while or until <em>condition</em> is <strong>True</strong>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <strong><font color="red"><em>May not be directly supported in a main test procedure section.</em></font></strong><br>
      <br>
      The <strong>Exit Do</strong> can only be used within a <strong>Do...Loop</strong> control structure to provide an alternate way to exit a <strong>Do...Loop</strong>. Any number of <strong>Exit Do</strong> statements may be placed anywhere in the <strong>Do...Loop</strong>. Often used with the evaluation of some condition (for example, <strong>If...Then</strong>), <strong>Exit Do</strong> transfers control to the statement immediately following the <strong>Loop</strong>. <br>
      <br>
      When used within nested <strong>Do...Loop</strong> statements, <strong>Exit Do</strong> transfers control to the loop that is nested one level above the loop where it occurs.<br>
      <br>
      The following examples illustrate use of the <strong>Do...Loop</strong> statement:<br>
      <pre><strong>Do Until</strong> DefResp = vbNo
   MyNum = Int (6 * Rnd + 1)   ' Generate a random integer between 1 and 6.
   DefResp = MsgBox (MyNum &amp; &quot; Do you want another number?&quot;, vbYesNo)
Loop

Dim Check, Counter
Check = True: Counter = 0   ' Initialize variables.
<strong>Do</strong>                            ' Outer loop.
   <strong>Do While</strong> Counter &lt; 20      ' Inner loop.
      Counter = Counter + 1   ' Increment Counter.
      If Counter = 10 Then    ' If condition is True...
         Check = False        ' set value of flag to False.
         <strong>Exit Do</strong>              ' Exit inner loop.
      End If
   Loop
<strong>Loop Until</strong> Check = False      ' Exit outer loop immediately.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Erase</strong></td>
    <td>Reinitializes the elements of fixed-size arrays and deallocates dynamic-array storage space.
      <pre>Erase <em>array</em></pre>
      The <em>array</em> argument is the name of the array variable to be erased.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      It is important to know whether an array is fixed-size (ordinary) or dynamic because <strong>Erase</strong> behaves differently depending on the type of array. <strong>Erase</strong> recovers no memory for fixed-size arrays. <strong>Erase</strong> sets the elements of a fixed array as follows:<br>
      <table class="Table-Grey">
        <tr>
          <th>Type of array</th>
          <th>Effect of Erase on fixed-array elements</th>
        </tr>
        <tr>
          <td>Fixed numeric array</td>
          <td>Sets each element to zero.</td>
        </tr>
        <tr>
          <td>Fixed string array</td>
          <td>Sets each element to zero-length (&quot;&quot;).</td>
        </tr>
        <tr>
          <td>Array of objects</td>
          <td>Sets each element to the special value Nothing.</td>
        </tr>
      </table>
      <strong>Erase</strong> frees the memory used by dynamic arrays. Before your program can refer to the dynamic array again, it must redeclare the array variable's dimensions using a <strong>ReDim</strong> statement.<br>
      <br>
      The following example illustrates the use of the <strong>Erase</strong> statement.<br>
      <pre>Dim NumArray(9)
Dim DynamicArray()
ReDim DynamicArray(9)   ' Allocate storage space.
<strong>Erase</strong> NumArray   ' Each element is reinitialized.
<strong>Erase</strong> DynamicArray   ' Free memory used by array.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Execute</strong></td>
    <td>Executes one or more specified statements.
      <pre>Execute <em>statement</em></pre>
      The required <em>statement</em> argument is a string expression containing one or more statements for execution. Include multiple statements in the <em>statement</em> argument, using colons or embedded line breaks to separate them.<br>
      <strong>Remarks</strong><br>
      <br>
      In VBScript, <em>x = y</em> can be interpreted two ways. The first is as an assignment statement, where the value of <em>y</em> is assigned to <em>x</em>. The second interpretation is as an expression that tests if <em>x</em> and <em>y</em> have the same value. If they do, <em>result</em> is <strong>True</strong>; if they are not, <em>result</em> is <strong>False</strong>. The <strong>Execute</strong> statement always uses the first interpretation, whereas the <strong>Eval</strong> method always uses the second.<br>
      <p class="Note"><strong></strong>In Microsoft&reg; JScript&reg;, no confusion exists between assignment and comparison, because the assignment operator (=) is different from the comparison operator(==).</p>
      The context in which the <strong>Execute</strong> statement is invoked determines what objects and variables are available to the code being run. In-scope objects and variables are available to code running in an <strong>Execute</strong> statement. However, it is important to understand that if you execute code that creates a procedure, that procedure does not inherit the scope of the procedure in which it occurred.<br>
      <br>
      Like any procedure, the new procedure's scope is global, and it inherits everything in the global scope. Unlike any other procedure, its context is not global scope, so it can only be executed in the context of the procedure where the <strong>Execute</strong> statement occurred. However, if the same <strong>Execute</strong> statement is invoked outside of a procedure (i.e., in global scope), not only does it inherit everything in global scope, but it can also be called from anywhere, since its context is global. The following example illustrates this behavior:<br>
      <pre>Dim X   ' Declare X in global scope.
X = &quot;Global&quot;   ' Assign global X a value.
Sub Proc1   ' Declare procedure.
   Dim X   ' Declare X in local scope.
   X = &quot;Local&quot;   ' Assign local X a value.
            ' The Execute statement here creates a
            ' procedure that, when invoked, prints X.
            ' It print the global X because Proc2
            ' inherits everything in global scope.
  <strong>Execute</strong> &quot;Sub Proc2: Print X: End Sub&quot;
   Print Eval(&quot;X&quot;)   ' Print local X.
   Proc2   ' Invoke Proc2 in Proc1's scope.
End Sub
Proc2   ' This line causes an error since 
        ' Proc2 is unavailable outside Proc1.
Proc1   ' Invoke Proc1.
   <strong>Execute</strong> &quot;Sub Proc2: Print X: End Sub&quot;
Proc2   ' This invocation succeeds because Proc2
        ' is now available globally.</pre>
      The following example shows how the <strong>Execute</strong> statement can be rewritten so you don't have to enclose the entire procedure in the quotation marks:<br>
      <pre>S = &quot;Sub Proc2&quot; &amp; vbCrLf
S = S &amp; &quot;   Print X&quot; &amp; vbCrLf 
S = S &amp; &quot;End Sub&quot;
Execute S</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Execute Global</strong></td>
    <td>Executes one or more specified statements in the global namespace of a script.
      <pre>ExecuteGlobal <em>statement</em> </pre>
      The required <em>statement</em> argument is a string expression containing one or more statements for execution. Include multiple statements in the <em>statement</em> argument, using colons or embedded line breaks to separate them.<br>
      <strong>Remarks</strong><br>
      <br>
      In VBScript, <em>x = y</em> can be interpreted two ways. The first is as an assignment statement, where the value of <em>y</em> is assigned to <em>x</em>. The second interpretation is as an expression that tests if <em>x</em> and <em>y</em> have the same value. If they do, <em>result</em> is <strong>True</strong>; if they are not, <em>result</em> is <strong>False</strong>. The <strong>ExecuteGlobal</strong> statement always uses the first interpretation, whereas the <strong>Eval</strong> method always uses the second.<br>
      <p class="Note"><strong></strong>In Microsoft&reg; JScript&trade;, no confusion exists between assignment and comparison, because the assignment operator (=) is different from the comparison operator.</p>
      All statements used with <strong>ExecuteGlobal</strong> are executed in the script's global namespace. This allows code to be added to the program so that any procedure can access it. For example, a VBScript <strong>Class</strong> statement can be executed at run time and functions can subsequently create new instances of the class.<br>
      <br>
      Adding procedures and classes at runtime can be useful, but also introduces the possibility of overwriting existing global variable and functions at runtime. Because this can cause significant programming problems, care should be exercised when using the <strong>ExecuteGlobal</strong> statement. If you don't need access to a variable or function outside of a procedure, use the <strong>Execute</strong> statement that will only affect the namespace of the calling function. <br>
      <br>
      The following example illustrates the use of the <strong>ExecuteGlobal</strong> statement:<br>
      <pre>Dim X         ' Declare X in global scope.
X = &quot;Global&quot;      ' Assign global X a value.
Sub Proc1   ' Declare procedure.
  Dim X      ' Declare X in local scope.
  X = &quot;Local&quot;   ' Assign local X a value.
         ' The Execute statement here creates a
         ' procedure that, when invoked, prints X.
         ' It print the global X because Proc2
         ' inherits everything in global scope.
  <strong>ExecuteGlobal</strong> &quot;Sub Proc2: Print X: End Sub&quot;
  Print Eval(&quot;X&quot;)   ' Print local X.
  Proc2      ' Invoke Proc2 in Global scope resulting
         ' in &quot;Global&quot; being printed.
End Sub
Proc2         ' This line causes an error since 
         ' Proc2 is unavailable outside Proc1.
Proc1         ' Invoke Proc1.
  Execute &quot;Sub Proc2: Print X: End Sub&quot;
Proc2         ' This invocation succeeds because Proc2
         ' is now available globally.</pre>
      The following example shows how the <strong>ExecuteGlobal</strong> statement can be rewritten so you don't have to enclose the entire procedure in the quotation marks:<br>
      <pre>S = &quot;Sub Proc2&quot; &amp; vbCrLf
S = S &amp; &quot;  Print X&quot; &amp; vbCrLf 
S = S &amp; &quot;End Sub&quot;
<strong>ExecuteGlobal</strong> S</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Exit</strong></td>
    <td>Exits a block of <strong>Do...Loop</strong>, <strong>For...Next</strong>, <strong>Function</strong>, or <strong>Sub</strong> code.
      <pre>Exit Do
Exit For
Exit Function
Exit Property
Exit Sub</pre>
      The <strong>Exit</strong> statement syntax has these forms:
      <table class="Table-Grey">
        <tr>
          <th>Statement</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>Exit Do</td>
          <td>Provides a way to exit a <strong>Do...Loop</strong> statement. It can be used only inside a <strong>Do...Loop</strong> statement. <strong>Exit Do</strong> transfers control to the statement following the <strong>Loop</strong> statement. When used within nested <strong>Do...Loop</strong> statements, <strong>Exit Do</strong> transfers control to the loop that is one nested level above the loop where it occurs.</td>
        </tr>
        <tr>
          <td>Exit For</td>
          <td>Provides a way to exit a <strong>For</strong> loop. It can be used only in a <strong>For...Next</strong> or <strong>For Each...Next</strong> loop. <strong>Exit For</strong> transfers control to the statement following the <strong>Next</strong> statement. When used within nested <strong>For</strong> loops, <strong>Exit For </strong>transfers control to the loop that is one nested level above the loop where it occurs.</td>
        </tr>
        <tr>
          <td>Exit Function</td>
          <td>Immediately exits the <strong>Function</strong> procedure in which it appears. Execution continues with the statement following the statement that called the <strong>Function</strong>.</td>
        </tr>
        <tr>
          <td>Exit Property</td>
          <td>Immediately exits the <strong>Property</strong> procedure in which it appears. Execution continues with the statement following the statement that called the <strong>Property</strong> procedure.</td>
        </tr>
        <tr>
          <td>Exit Sub</td>
          <td>Immediately exits the <strong>Sub</strong> procedure in which it appears. Execution continues with the statement following the statement that called the <strong>Sub</strong>.</td>
        </tr>
      </table>
      The following example illustrates the use of the <strong>Exit</strong> statement:
      <pre>Sub RandomLoop
   Dim I, MyNum
   Do   ' Set up infinite loop.
      For I = 1 To 1000   ' Loop 1000 times.
         MyNum = Int(Rnd * 100)   ' Generate random numbers.
         Select Case MyNum   ' Evaluate random number.
            Case 17: MsgBox &quot;Case 17&quot;
               <strong>Exit</strong> For   ' If 17, exit For...Next.
            Case 29: MsgBox &quot;Case 29&quot;
               <strong>Exit</strong> Do   ' If 29, exit Do...Loop.
            Case 54: MsgBox &quot;Case 54&quot;
               <strong>Exit</strong> Sub   ' If 54, exit Sub procedure.
            End Select
      Next
   Loop
End Sub</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - For Each...Next</strong></td>
    <td>Repeats a group of statements for each element in an array or collection.
      <pre>For Each <em>element </em>In <em>group</em>
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[Exit For]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
Next [<em>element</em>]</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>element</em></dt>
        <dd>Variable used to iterate through the elements of the collection or array. For collections, <em>element</em> can only be a <strong>Variant</strong> variable, a generic <strong>Object</strong> variable, or any specific Automation object variable. For arrays, <em>element</em> can only be a <strong>Variant</strong> variable.</dd>
        <dt><em>group</em></dt>
        <dd>Name of an object collection or array.</dd>
        <dt><em>statements</em></dt>
        <dd>One or more statements that are executed on each item in <em>group</em>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in a main test procedure.</em></strong></font><br>
      <br>
      The <strong>For Each</strong> block is entered if there is at least one element in <em>group</em>. Once the loop has been entered, all the statements in the loop are executed for the first element in <em>group</em>. As long as there are more elements in <em>group</em>, the statements in the loop continue to execute for each element. When there are no more elements in <em>group</em>, the loop is exited and execution continues with the statement following the <strong>Next</strong> statement.<br>
      <br>
      The <strong>Exit For</strong> can only be used within a <strong>For Each...Next</strong> or <strong>For...Next</strong> control structure to provide an alternate way to exit. Any number of <strong>Exit For</strong> statements may be placed anywhere in the loop. The <strong>Exit For </strong>is often used with the evaluation of some condition (for example, <strong>If...Then</strong>), and transfers control to the statement immediately following <strong>Next</strong>.<br>
      <br>
      You can nest <strong>For Each...Next</strong> loops by placing one <strong>For Each...Next</strong> loop within another. However, each loop <em>element</em> must be unique.<br>
      <p class="Note"><strong></strong>If you omit <em>element</em> in a Next statement, execution continues as if you had included it. If a Next statement is encountered before it's corresponding For statement, an error occurs.</p>
      The following example illustrates use of the <strong>For Each...Next</strong> statement:
      <pre>Function ShowFolderList(folderspec)
   Dim fso, f, f1, fc, s
   Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)
   Set f = fso.GetFolder(folderspec)
   Set fc = f.Files
   <code><strong>For Each</strong></code> f1 <code><strong>in</strong></code> fc
      s = s &amp; f1.name 
      s = s &amp; &quot;&lt;BR&gt;&quot;
   Next
   ShowFolderList = s
End Function</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - For...Next</strong></td>
    <td>Repeats a group of statements a specified number of times.
      <pre>For <em>counter</em> <strong>=</strong> <em>start</em> To <em>end</em> [Step <em>step</em>]
&nbsp;&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;&nbsp;[Exit For]
&nbsp;&nbsp;&nbsp;&nbsp;[<em>statements</em>]
Next</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>counter</em></dt>
        <dd>Numeric variable used as a loop counter. The variable can't be an array element or an element of a user-defined type.</dd>
        <dt><em>start</em></dt>
        <dd>Initial value of <em>counter</em>.</dd>
        <dt><em>end</em></dt>
        <dd>Final value of <em>counter</em>.</dd>
        <dt><em>step</em></dt>
        <dd>Amount <em>counter</em> is changed each time through the loop. If not specified, <em>step</em> defaults to one.</dd>
        <dt><em>statements</em></dt>
        <dd>One or more statements between <strong>For</strong> and <strong>Next</strong> that are executed the specified number of times.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in a main test procedure section.</em></strong></font><br>
      <br>
      The <em>step</em> argument can be either positive or negative. The value of the <em>step</em> argument determines loop processing as follows:
      <table class="Table-Grey">
        <tr>
          <th>Value</th>
          <th>Loop executes if</th>
        </tr>
        <tr>
          <td>Positive or 0</td>
          <td>counter &lt;= end</td>
        </tr>
        <tr>
          <td>Negative</td>
          <td>counter &gt;= end</td>
        </tr>
      </table>
      Once the loop starts and all statements in the loop have executed, <em>step</em> is added to <em>counter</em>. At this point, either the statements in the loop execute again (based on the same test that caused the loop to execute initially), or the loop is exited and execution continues with the statement following the <strong>Next</strong> statement.
      <p class="Note"><strong></strong>Changing the value of <em>counter</em> while inside a loop can make it more difficult to read and debug your code.</p>
      <strong>Exit For</strong> can only be used within a <strong>For Each...Next</strong> or <strong>For...Next</strong> control structure to provide an alternate way to exit. Any number of <strong>Exit For</strong> statements may be placed anywhere in the loop. <strong>Exit For </strong>is often used with the evaluation of some condition (for example, <strong>If...Then</strong>), and transfers control to the statement immediately following <strong>Next</strong>.<br>
      <br>
      You can nest <strong>For...Next</strong> loops by placing one <strong>For...Next</strong> loop within another. Give each loop a unique variable name as its <em>counter</em>. The following construction is correct:<br>
      <pre><strong>For</strong> I = 1 <strong>To</strong> 10
      <strong>For</strong> J = 1 <strong>To</strong> 10
            <strong>For</strong> K = 1 <strong>To</strong> 10
            <strong>. . .</strong>
            <strong>Next</strong>
      <strong>Next</strong>
Next</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Function</strong></td>
    <td>Declares the name, arguments, and code that form the body of a <strong>Function</strong> procedure.
      <pre>[Public [Default] | Private] Function <em>name</em> [(<em>arglist</em>)]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[<em>name</em> <strong>=</strong> <em>expression</em>]
&nbsp;&nbsp;&nbsp;[Exit Function] 
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[<em>name</em> <strong>=</strong> <em>expression</em>]
End Function </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Indicates that the <strong>Function</strong> procedure is accessible to all other procedures in all scripts.</dd>
        <dt><em>Default</em></dt>
        <dd>Used only with the <strong>Public</strong> keyword in a <strong>Class</strong> block to indicate that the <strong>Function</strong> procedure is the default method for the class. An error occurs if more than one <strong>Default</strong> procedure is specified in a class.</dd>
        <dt><em>Private</em></dt>
        <dd>Indicates that the <strong>Function</strong> procedure is accessible only to other procedures in the script where it is declared or if the function is a member of a class, and that the <strong>Function</strong> procedure is accessible only to other procedures in that class.</dd>
        <dt><em>name</em></dt>
        <dd>Name of the <strong>Function</strong>; follows standard variable naming conventions.</dd>
        <dt><em>arglist</em></dt>
        <dd>List of variables representing arguments that are passed to the <strong>Function</strong> procedure when it is called. Commas separate multiple variables. </dd>
        <dt><em>statements</em></dt>
        <dd>Any group of statements to be executed within the body of the <strong>Function</strong> procedure.</dd>
        <dt><em>expression</em></dt>
        <dd>Return value of the <strong>Function</strong>.</dd>
      </dl>
      The <em>arglist</em> argument has the following syntax and parts:<br>
      <pre>[<strong>ByVal </strong>| <strong>ByRef</strong>] <em>varname</em>[<strong>( )</strong>]</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>ByVal</em></dt>
        <dd>Indicates that the argument is passed by value.</dd>
        <dt><em>ByRef</em></dt>
        <dd>Indicates that the argument is passed by reference.</dd>
        <dt><em>varname</em></dt>
        <dd>Name of the variable representing the argument; follows standard variable naming conventions.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in main test procedure.</em></strong></font><br>
      <br>
      If not explicitly specified using either <strong>Public</strong> or <strong>Private</strong>, <strong>Function</strong> procedures are public by default, that is, they are visible to all other procedures in your script. The value of local variables in a <strong>Function</strong> is not preserved between calls to the procedure.<br>
      <br>
      You cannot define a <strong>Function</strong> procedure inside any other procedure (e.g. <strong>Sub</strong> or <strong>Property Get</strong>).<br>
      <br>
      The <strong>Exit Function </strong>statement causes an immediate exit from a <strong>Function</strong> procedure. Program execution continues with the statement that follows the statement that called the <strong>Function</strong> procedure. Any number of <strong>Exit Function</strong> statements can appear anywhere in a <strong>Function</strong> procedure.<br>
      <br>
      Like a <strong>Sub</strong> procedure, a <strong>Function</strong> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <strong>Sub</strong> procedure, you can use a <strong>Function</strong> procedure on the right side of an expression in the same way you use any intrinsic function, such as <strong>Sqr</strong>, <strong>Cos</strong>, or <strong>Chr</strong>, when you want to use the value returned by the function.<br>
      <br>
      You call a <strong>Function</strong> procedure using the function name, followed by the argument list in parentheses, in an expression. See the <strong>Call</strong> statement for specific information on how to call <strong>Function</strong> procedures.<br>
      <p class="Caution">Function procedures can be recursive, that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow.</p>
      To return a value from a function, assign the value to the function name. Any number of such assignments can appear anywhere within the procedure. If no value is assigned to <em>name</em>, the procedure returns a default value: a numeric function returns 0 and a string function returns a zero-length string (&quot;&quot;). A function that returns an object reference returns <strong>Nothing</strong> if no object reference is assigned to <em>name</em> (using <strong>Set</strong>) within the <strong>Function</strong>.<br>
      <br>
      The following example shows how to assign a return value to a function named BinarySearch. In this case, <strong>False</strong> is assigned to the name to indicate that some value was not found.<br>
      <pre><strong>Function</strong> BinarySearch(. . .)
      . . .
      ' Value not found. Return a value of False.
      If lower &gt; upper Then
            BinarySearch = False   
            Exit Function 
      End If
      . . .
End Function</pre>
      Variables used in <strong>Function</strong> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <strong>Dim</strong> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.
      <p class="Caution">A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you have defined at the script level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant, or variable, it is assumed that your procedure is referring to that script-level name. To avoid this kind of conflict, use an Option Explicit statement to force explicit declaration of variables.</p>
      <p class="Caution">VBScript may rearrange arithmetic expressions to increase internal efficiency. Avoid using a Function procedure in an arithmetic expression when the function changes the value of variables in the same expression.</p></td>
  </tr>
  <tr>
    <td><strong>Statement - If...Then...Else</strong></td>
    <td>Conditionally executes a group of statements, depending on the value of an expression.
      <pre><strong>If</strong> condition <strong>Then</strong> statements [Else elsestatements ] </pre>
      Or, you can use the block form syntax:
      <pre><strong>If</strong> <em>condition </em><strong>Then</strong>
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
[<strong>ElseIf</strong> <em>condition-n</em> <strong>Then</strong>
&nbsp;&nbsp;&nbsp;[<em>elseifstatements</em>]] <strong>. . .</strong>
[<strong>Else</strong>
&nbsp;&nbsp;&nbsp;[<em>elsestatements</em>]]
<strong>End If</strong> </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>condition</em></dt>
        <dd>One or more of the following two types of expressions: <br>
          A numeric or string expression that evaluates to <strong>True</strong> or <strong>False</strong>. If <em>condition</em> is Null, <em>condition</em> is treated as <strong>False</strong>.<br>
          <br>
          An expression of the form <strong>TypeOf</strong> <em>objectname</em> <strong>Is</strong> <em>objecttype</em>. The <em>objectname</em> is any object reference and <em>objecttype</em> is any valid object type. The expression is <strong>True</strong> if <em>objectname</em> is of the object type specified by <em>objecttype</em>; otherwise it is <strong>False</strong>.<br>
          <br>
        </dd>
        <dt><em>statements</em></dt>
        <dd>One or more statements separated by colons; executed if <em>condition</em> is <strong>True</strong>.</dd>
        <dt><em>condition-n</em></dt>
        <dd>Same as <em>condition</em>.</dd>
        <dt><em>elseifstatements</em></dt>
        <dd>One or more statements executed if the associated <em>condition-n</em> is <strong>True</strong>.</dd>
        <dt><em>elsestatements</em></dt>
        <dd>One or more statements executed if no previous <em>condition</em> or <em>condition-n</em> expression is <strong>True</strong>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>ElseIf statement not directly support in main test procedure section.</em></strong></font> <br>
      You can use the single-line form (first syntax) for short, simple tests. However, the block form (second syntax) provides more structure and flexibility than the single-line form and is usually easier to read, maintain, and debug.<br>
      <p class="Note">With the single-line syntax, it is possible to have multiple statements executed as the result of an If...Then decision, but they must all be on the same line and separated by colons, as in the following statement:<br>
        <br>
        If A &gt; 10 Then A = A + 1 : B = B + A : C = C + B</p>
      <br>
      When executing a block <strong>If</strong> (second syntax), <em>condition </em>is tested. If <em>condition</em> is <strong>True</strong>, the statements following <strong>Then</strong> are executed. If <em>condition</em> is <strong>False</strong>, each <strong>ElseIf</strong> (if any) is evaluated in turn. When a <strong>True</strong> condition is found, the statements following the associated <strong>Then</strong> are executed. If none of the <strong>ElseIf</strong> statements are <strong>True</strong> (or there are no <strong>ElseIf</strong> clauses), the statements following <strong>Else</strong> are executed. After executing the statements following <strong>Then</strong> or <strong>Else</strong>, execution continues with the statement following <strong>End If</strong>.<br>
      <br>
      The <strong>Else</strong> and <strong>ElseIf</strong> clauses are both optional. You can have as many <strong>ElseIf</strong> statements as you want in a block <strong>If</strong>, but none can appear after the <strong>Else</strong> clause. Block <strong>If</strong> statements can be nested; that is, contained within one another.<br>
      <br>
      What follows the <strong>Then</strong> keyword is examined to determine whether or not a statement is a block <strong>If</strong>. If anything other than a comment appears after <strong>Then</strong> on the same line, the statement is treated as a single-line <strong>If</strong> statement.<br>
      <br>
      A block <strong>If</strong> statement must be the first statement on a line. The block <strong>If</strong> must end with an <strong>End If</strong> statement.<br></td>
  </tr>
  <tr>
    <td><strong>Statement - On Error</strong></td>
    <td>Enables or disables error-handling.
      <pre>On Error Resume Next
On Error GoTo 0</pre>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in main test procedure section.</em></strong></font><br>
      <br>
      If you don't use an <strong>On Error Resume Next</strong> statement anywhere in your code, any run-time error that occurs can cause an error message to be displayed and code execution stopped. However, the host running the code determines the exact behavior. The host can sometimes opt to handle such errors differently. In some cases, the script debugger may be invoked at the point of the error. In still other cases, there may be no apparent indication that any error occurred because the host does not to notify the user. Again, this is purely a function of how the host handles any errors that occur.<br>
      <br>
      Within any particular procedure, an error is not necessarily fatal as long as error-handling is enabled somewhere along the call stack. If local error-handling is not enabled in a procedure and an error occurs, control is passed back through the call stack until a procedure with error-handling enabled is found and the error is handled at that point. If no procedure in the call stack is found to have error-handling enabled, an error message is displayed at that point and execution stops or the host handles the error as appropriate.<br>
      <br>
      <strong>On Error Resume Next</strong> causes execution to continue with the statement immediately following the statement that caused the run-time error, or with the statement immediately following the most recent call out of the procedure containing the <strong>On Error Resume Next</strong> statement. This allows execution to continue despite a run-time error. You can then build the error-handling routine inline within the procedure.<br>
      <br>
      An <strong>On Error Resume Next </strong>statement becomes inactive when another procedure is called, so you should execute an <strong>On Error Resume Next</strong> statement in each called routine if you want inline error handling within that routine. When a procedure is exited, the error-handling capability reverts to whatever error-handling was in place before entering the exited procedure.<br>
      <br>
      Use <strong>On Error GoTo 0</strong> to disable error handling if you have previously enabled it using <strong>On Error Resume Next</strong>.<br>
      <br>
      The following example illustrates use of the <strong>On Error Resume Next</strong> statement.<br>
      <pre>On Error Resume Next
Err.Raise 6   ' Raise an overflow error.
MsgBox &quot;Error # &quot; &amp; CStr(Err.Number) &amp; &quot; &quot; &amp; Err.Description
Err.Clear   ' Clear the error.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Option Explicit</strong></td>
    <td>Forces explicit declaration of all variables in a script.
      <pre>Option Explicit</pre>
      <strong>Remarks</strong><br>
      <br>
      If used, the <strong>Option Explicit</strong> statement must appear in a script before any other statements.<br>
      <br>
      When you use the <strong>Option Explicit</strong> statement, you must explicitly declare all variables using the <strong>Dim</strong>, <strong>Private</strong>, <strong>Public</strong>, or <strong>ReDim</strong> statements. If you attempt to use an undeclared variable name, an error occurs.<br>
      <p class="Tip">Use Option Explicit to avoid incorrectly typing the name of an existing variable or to avoid confusion in code where the scope of the variable is not clear.</p>
      The following example illustrates use of the <strong>Option Explicit</strong> statement.<br>
      <pre><strong>Option Explicit</strong>   ' Force explicit variable declaration.
Dim MyVar   ' Declare variable.
MyInt = 10   ' Undeclared variable generates error.
MyVar = 10   ' Declared variable does not generate error.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Private</strong></td>
    <td>Declares private variables and allocates storage space. Declares, in a <strong>Class</strong> block, a private variable.
      <pre>Private varname[([subscripts])][, varname[([subscripts])]] . . .</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>varname</em></dt>
        <dd>Name of the variable; follows standard variable naming conventions.</dd>
        <dt><em>subscripts</em></dt>
        <dd>Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <em>subscripts</em> argument uses the following syntax:
          <pre>upper [, upper] . . . </pre>
          The lower bound of an array is always zero. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in main test procedure section.</em></strong></font><br>
      <br>
      Private statement variables are available only to the script in which they are declared.<br>
      <br>
      A variable that refers to an object must be assigned an existing object using the <strong>Set</strong> statement before it can be used. Until it is assigned an object, the declared object variable is initialized as <strong>Empty</strong>.<br>
      <br>
      You can also use the <strong>Private</strong> statement with empty parentheses to declare a dynamic array. After declaring a dynamic array, use the <strong>ReDim</strong> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <strong>Private</strong>, Public, or <strong>Dim</strong> statement, an error occurs.<br>
      <p class="Note">When you use the Private statement in a procedure, you generally put the Private statement at the beginning of the procedure.</p>
      The following example illustrates use of the <strong>Private</strong> statement.<br>
      <pre><strong>Private</strong> MyNumber   ' Private Variant variable.
<strong>Private</strong> MyArray(9)   ' Private array variable.
   ' Multiple Private declarations of Variant variables.
<strong>Private</strong> MyNumber, MyVar, YourNumber</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Property Get</strong></td>
    <td>Declares, in a <strong>Class</strong> block, the name, arguments, and code that form the body of a <strong>Property</strong> procedure that gets (returns) the value of a property.
      <pre>[Public [Default] | Private] Property Get <em>name</em> [(<em>arglist</em>)]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[[Set] <em>name</em> = <em>expression</em>]
&nbsp;&nbsp;&nbsp;[Exit Property] 
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[[Set] <em>name</em> = <em>expression</em>]
End Property </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Indicates that the <strong>Property Get</strong> procedure is accessible to all other procedures in all scripts.</dd>
        <dt><em>Default</em></dt>
        <dd>Used only with the <strong>Public</strong> keyword to indicate that the property defined in the <strong>Property Get</strong> procedure is the default property for the class.</dd>
        <dt><em>Private</em></dt>
        <dd>Indicates that the <strong>Property Get</strong> procedure is accessible only to other procedures in the <strong>Class</strong> block where it's declared.</dd>
        <dt><em>name</em></dt>
        <dd>Name of the <strong>Property Get</strong> procedure; follows standard variable naming conventions, except that the name can be the same as a <strong>Property Let</strong> or <strong>Property Set</strong> procedure in the same <strong>Class</strong> block.</dd>
        <dt><em>arglist</em></dt>
        <dd>List of variables representing arguments that are passed to the <strong>Property Get</strong> procedure when it is called. Commas separate multiple arguments. The name of each argument in a <strong>Property Get</strong> procedure must be the same as the corresponding argument in a <strong>Property Let</strong> procedure (if one exists).</dd>
        <dt><em>statements</em></dt>
        <dd>Any group of statements to be executed within the body of the <strong>Property Get</strong> procedure.</dd>
        <dt><em>Set</em></dt>
        <dd>Keyword used when assigning an object as the return value of a <strong>Property Get</strong> procedure.</dd>
        <dt><em>expression</em></dt>
        <dd>Return value of the <strong>Property Get</strong> procedure. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong>Not directly supported in main test procedure section.</strong></font><br>
      <br>
      If not explicitly specified using either <strong>Public</strong> or <strong>Private</strong>, <strong>Property Get</strong> procedures are public by default, that is, they are visible to all other procedures in your script. The value of local variables in a <strong>Property Get</strong> procedure is not preserved between calls to the procedure.<br>
      <br>
      You can't define a <strong>Property Get</strong> procedure inside any other procedure (e.g. <strong>Function</strong> or <strong>Property Let</strong>).<br>
      <br>
      The <strong>Exit Property </strong>statement causes an immediate exit from a <strong>Property Get</strong> procedure. Program execution continues with the statement that follows the statement that called the <strong>Property Get</strong> procedure. Any number of <strong>Exit Property</strong> statements can appear anywhere in a <strong>Property Get</strong> procedure.<br>
      <br>
      Like a <strong>Sub</strong> and <strong>Property Let</strong> procedure, a <strong>Property Get</strong> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <strong>Sub</strong> and <strong>Property Let</strong>, you can use a <strong>Property Get</strong> procedure on the right side of an expression in the same way you use a <strong>Function</strong> or property name when you want to return the value of a property.<br></td>
  </tr>
  <tr>
    <td><strong>Statement - Property Let</strong></td>
    <td>Declares, in a <strong>Class</strong> block, the name, arguments, and code that form the body of a <strong>Property</strong> procedure that assigns (sets) the value of a property.
      <pre>[Public | Private] Property Let <em>name</em> ([<em>arglist</em>,] <em>value</em>)
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[Exit Property] 
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
End Property </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Indicates that the <strong>Property Let</strong> procedure is accessible to all other procedures in all scripts.</dd>
        <dt><em>Private</em></dt>
        <dd>Indicates that the <strong>Property Let</strong> procedure is accessible only to other procedures in the <strong>Class</strong> block where it's declared.</dd>
        <dt><em>name</em></dt>
        <dd>Name of the <strong>Property Let</strong> procedure; follows standard variable naming conventions, except that the name can be the same as a <strong>Property Get</strong> or <strong>Property Set</strong> procedure in the same <strong>Class</strong> block.</dd>
        <dt><em>arglist</em></dt>
        <dd>List of variables representing arguments that are passed to the <strong>Property Let</strong> procedure when it is called. Commas separate multiple arguments. The name of each argument in a <strong>Property Let</strong> procedure must be the same as the corresponding argument in a <strong>Property Get</strong> procedure. In addition, the <strong>Property Let</strong> procedure will always have one more argument than its corresponding <strong>Property Get</strong> procedure. That argument is the value being assigned to the property.</dd>
        <dt><em>value</em></dt>
        <dd>Variable to contain the value to be assigned to the property. When the procedure is called, this argument appears on the right side of the calling expression. </dd>
        <dt><em>statements</em></dt>
        <dd>Any group of statements to be executed within the body of the <strong>Property Let</strong> procedure.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong>Not directly supported in main test procedure section.</strong></font><br>
      <br>
      If not explicitly specified using either <strong>Public</strong> or <strong>Private</strong>, <strong>Property Let</strong> procedures are public by default, that is, they are visible to all other procedures in your script. The value of local variables in a <strong>Property Let</strong> procedure is not preserved between calls to the procedure.<br>
      <br>
      You can't define a <strong>Property Let</strong> procedure inside any other procedure (e.g. <strong>Function</strong> or <strong>Property Get</strong>).<br>
      <br>
      The <strong>Exit Property </strong>statement causes an immediate exit from a <strong>Property Let</strong> procedure. Program execution continues with the statement that follows the statement that called the <strong>Property Let</strong> procedure. Any number of <strong>Exit Property</strong> statements can appear anywhere in a <strong>Property Let</strong> procedure.
      <p class="Note"><strong></strong>Every Property Let statement must define at least one argument for the procedure it defines. That argument (or the last argument if there is more than one) contains the actual value to be assigned to the property when the procedure defined by the Property Let statement is invoked. That argument is referred to as <em>value</em> in the preceding syntax.</p>
      Like a <strong>Function</strong> and <strong>Property Get</strong> procedure, a <strong>Property Let</strong> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <strong>Function</strong> and <strong>Property Get</strong> procedure, both of which return a value, you can only use a <strong>Property Let</strong> procedure on the left side of a property assignment expression. </td>
  </tr>
  <tr>
    <td><strong>Statement - Property Set</strong></td>
    <td>Declares, in a <strong>Class</strong> block, the name, arguments, and code that form the body of a <strong>Property</strong> procedure that sets a reference to an object.
      <pre>[Public | Private] Property Set <em>name</em>([<em>arglist</em>,] <em>reference</em>)
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[Exit Property] 
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
End Property </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Indicates that the <strong>Property Set</strong> procedure is accessible to all other procedures in all scripts.</dd>
        <dt><em>Private</em></dt>
        <dd>Indicates that the <strong>Property Set</strong> procedure is accessible only to other procedures in the <strong>Class</strong> block where it's declared.</dd>
        <dt><em>name</em></dt>
        <dd>Name of the <strong>Property Set</strong> procedure; follows standard variable naming conventions, except that the name can be the same as a <strong>Property Get</strong> or <strong>Property Let</strong> procedure in the same <strong>Class</strong> block.</dd>
        <dt><em>arglist</em></dt>
        <dd>List of variables representing arguments that are passed to the <strong>Property Set</strong> procedure when it is called. Commas separate multiple arguments. In addition, the <strong>Property Set</strong> procedure will always have one more argument than its corresponding <strong>Property Get</strong> procedure. That argument is the object being assigned to the property. </dd>
        <dt><em>reference</em></dt>
        <dd>Variable containing the object reference used on the right side of the object reference assignment. </dd>
        <dt><em>statements</em></dt>
        <dd>Any group of statements to be executed within the body of the <strong>Property Set</strong> procedure.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in main test procedure section.</em></strong></font><br>
      <br>
      If not explicitly specified using either <strong>Public</strong> or <strong>Private</strong>, <strong>Property Set</strong> procedures are public by default, that is, they are visible to all other procedures in your script. The value of local variables in a <strong>Property Set</strong> procedure is not preserved between calls to the procedure.<br>
      <br>
      You can't define a <strong>Property Set</strong> procedure inside any other procedure (e.g. <strong>Function</strong> or <strong>Property Let</strong>).<br>
      <br>
      The <strong>Exit Property </strong>statement causes an immediate exit from a <strong>Property Set</strong> procedure. Program execution continues with the statement that follows the statement that called the <strong>Property Set</strong> procedure. Any number of <strong>Exit Property</strong> statements can appear anywhere in a <strong>Property Set</strong> procedure.<br>
      <p class="Note"><strong></strong>Every Property Set statement must define at least one argument for the procedure it defines. That argument (or the last argument if there is more than one) contains the actual object reference for the property when the procedure defined by the Property Set statement is invoked. That argument is referred to as <em>reference</em> in the preceding syntax.</p>
      <br>
      Like a <strong>Function</strong> and <strong>Property Get</strong> procedure, a <strong>Property Set</strong> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <strong>Function</strong> and <strong>Property Get</strong> procedure, both of which return a value, you can only use a <strong>Property Set</strong> procedure on the left side of an object reference assignment (<strong>Set</strong> statement).<br></td>
  </tr>
  <tr>
    <td><strong>Statement - Public</strong></td>
    <td>Declares public variables and allocates storage space. Declares, in a <strong>Class</strong> block, a private variable.
      <pre>Public varname[([subscripts])][, varname[([subscripts])]] . . .</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>varname</em></dt>
        <dd>Name of the variable; follows standard variable naming conventions.</dd>
        <dt><em>subscripts</em></dt>
        <dd>Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <em>subscripts</em> argument uses the following syntax:
          <pre>upper [, upper] . . . </pre>
          The lower bound of an array is always zero. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong><em>Not directly supported in main test procedure section.</em></strong></font><br>
      <br>
      <strong>Public</strong> statement variables are available to all procedures in all scripts.<br>
      <br>
      A variable that refers to an object must be assigned an existing object using the <strong>Set</strong> statement before it can be used. Until it is assigned an object, the declared object variable is initialized as Empty.<br>
      <br>
      You can also use the <strong>Public</strong> statement with empty parentheses to declare a dynamic array. After declaring a dynamic array, use the <strong>ReDim</strong> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <strong>Private</strong>, <strong>Public</strong>, or <strong>Dim</strong> statement, an error occurs.<br>
      <br>
      The following example illustrates the use of the <strong>Public</strong> statement:
      <pre><strong>Public</strong> MyNumber   ' Public Variant variable.
<strong>Public</strong> MyArray(9)   ' Public array variable.
   ' Multiple Public declarations of Variant variables.
<strong>Public</strong> MyNumber, MyVar, YourNumber</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Randmonize</strong></td>
    <td>Initializes the random-number generator.
      <pre>Randomize [<em>number</em>]</pre>
      The <em>number</em> argument can be any valid numeric expression.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <br>
      <strong>Randomize</strong> uses <em>number</em> to initialize the <strong>Rnd</strong> function's random-number generator, giving it a new seed value. If you omit <em>number, </em>the value returned by the system timer is used as the new seed value.<br>
      <br>
      If <strong>Randomize</strong> is not used, the <strong>Rnd</strong> function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last generated number as a seed value.<br>
      <p class="Note"><strong></strong>To repeat sequences of random numbers, call Rnd with a negative argument immediately before using Randomize with a numeric argument. Using Randomize with the same value for <em>number</em> does not repeat the previous sequence.</p>
      <br>
      The following example illustrates use of the <strong>Randomize</strong> statement.<br>
      <pre>Dim MyValue, Response
<strong>Randomize</strong>   ' Initialize random-number generator.
Do Until Response = vbNo
   MyValue = Int((6 * Rnd) + 1)   ' Generate random value between 1 and 6.
   MsgBox MyValue
   Response = MsgBox (&quot;Roll again? &quot;, vbYesNo)
Loop</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - ReDim</strong></td>
    <td>Declares dynamic-array variables, and allocates or reallocates storage space at procedure level.
      <pre>ReDim [Preserve] varname(subscripts) [, varname(subscripts)] . . .</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Preserve</em></dt>
        <dd>Preserves the data in an existing array when you change the size of the last dimension.</dd>
        <dt><em>varname</em></dt>
        <dd>Name of the variable; follows standard variable naming conventions.</dd>
        <dt><em>subscripts</em></dt>
        <dd>Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <em>subscripts</em> argument uses the following syntax:
          <pre>upper [, upper] . . .</pre>
          The lower bound of an array is always zero. </dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      The <strong>ReDim</strong> statement is used to size or resize a dynamic array that has already been formally declared using a <strong>Private</strong>, <strong>Public</strong>, or <strong>Dim</strong> statement with empty parentheses (without dimension subscripts). You can use the <strong>ReDim</strong> statement repeatedly to change the number of elements and dimensions in an array.<br>
      <br>
      If you use the <strong>Preserve</strong> keyword, you can resize only the last array dimension, and you can't change the number of dimensions at all. For example, if your array has only one dimension, you can resize that dimension because it is the last and only dimension. However, if your array has two or more dimensions, you can change the size of only the last dimension and still preserve the contents of the array.<br>
      <br>
      The following example shows how you can increase the size of the last dimension of a dynamic array without erasing any existing data contained in the array. <br>
      <pre><strong>ReDim</strong> X(10, 10, 10)
. . .
<strong>ReDim Preserve</strong> X(10, 10, 15)</pre>
      <p class="Caution">If you make an array smaller than it was originally, data in the eliminated elements is lost.</p>
      When variables are initialized, a numeric variable is initialized to 0 and a string variable is initialized to a zero-length string (&quot;&quot;). A variable that refers to an object must be assigned an existing object using the <strong>Set</strong> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <strong>Nothing</strong>. </td>
  </tr>
  <tr>
    <td><strong>Statement - Rem or Comment</strong></td>
    <td>Includes explanatory remarks in a program.
      <pre>Rem comment</pre>
      -or-<br>
      <pre><strong>'</strong> comment</pre>
      The <em>comment</em> argument is the text of any comment you want to include. After the <strong>Rem</strong> keyword, a space is required before <em>comment</em>.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      As shown in the syntax section, you can use an apostrophe (<strong>'</strong>) instead of the <strong>Rem</strong> keyword. If the <strong>Rem</strong> keyword follows other statements on a line, it must be separated from the statements by a colon. However, when you use an apostrophe, the colon is not required after other statements.<br>
      <br>
      The following example illustrates the use of the <strong>Rem</strong> statement.<br>
      <pre>Dim MyStr1, MyStr2
MyStr1 = &quot;Hello&quot; <code><strong>: Rem</strong></code> Comment after a statement separated by a colon.
MyStr2 = &quot;Goodbye&quot; <code><strong>'</strong></code> This is also a comment; no colon is needed.
<code><strong>Rem</strong></code> Comment on a line with no code; no colon is needed.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Select Case</strong></td>
    <td>Executes one of several groups of statements, depending on the value of an expression.
      <pre>Select Case <em>testexpression</em>
&nbsp;&nbsp;&nbsp;[Case<em> expressionlist-n</em>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<em>statements-n</em>]] <strong>. . .</strong>
&nbsp;&nbsp;&nbsp;[Case Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<em>elsestatements-n</em>]]
End Select</pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>testexpression</em></dt>
        <dd>Any numeric or string expression.</dd>
        <dt><em>expressionlist-n</em></dt>
        <dd>Required if <strong>Case</strong> appears. A comma delimited list of one or more expressions.</dd>
        <dt><em>statements-n</em></dt>
        <dd>One or more statements executed if <em>testexpression</em> matches any part of <em>expressionlist-n</em>.</dd>
        <dt><em>elsestatements-n</em></dt>
        <dd>One or more statements executed if <em>testexpression </em>doesn't match any of the <strong>Case</strong> clauses.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong>Not directly supported in main test procedure section. </strong></font><br>
      <br>
      If <em>testexpression</em> matches any <strong>Case</strong> <em>expressionlist</em> expression, the statements following that <strong>Case</strong> clause are executed up to the next <strong>Case</strong> clause, or for the last clause, up to <strong>End Select</strong>. Control then passes to the statement following <strong>End Select</strong>. If <em>testexpression</em> matches an <em>expressionlist</em> expression in more than one <strong>Case</strong> clause, only the statements following the first match are executed.<br>
      <br>
      The <strong>Case Else</strong> clause is used to indicate the <em>elsestatements</em> to be executed if no match is found between the <em>testexpression</em> and an <em>expressionlist</em> in any of the other <strong>Case</strong> selections. Although not required, it is a good idea to have a <strong>Case Else</strong> statement in your <strong>Select Case</strong> block to handle unforeseen <em>testexpression</em> values. If no <strong>Case</strong> <em>expressionlist</em> matches <em>testexpression</em> and there is no <strong>Case Else</strong> statement, execution continues at the statement following <strong>End Select</strong>.<br>
      <br>
      <strong>Select Case</strong> statements can be nested. Each nested <strong>Select Case</strong> statement must have a matching <strong>End Select</strong> statement.<br>
      <br>
      The following example illustrates the use of the <strong>Select Case</strong> statement.<br>
      <pre>Dim Color, MyVar
Sub ChangeBackground (Color)
   MyVar = lcase (Color)
   <code><strong>Select Case</strong></code> MyVar
      <code><strong>Case</strong></code> &quot;red&quot;     document.bgColor = &quot;red&quot;
      <code><strong>Case</strong></code> &quot;green&quot;   document.bgColor = &quot;green&quot;
      <code><strong>Case</strong></code> &quot;blue&quot;    document.bgColor = &quot;blue&quot;
      <code><strong>Case Else</strong></code>      MsgBox &quot;pick another color&quot;
   <code><strong>End Select</strong></code>
End Sub</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Set</strong></td>
    <td>Assigns an object reference to a variable or property, or associates a procedure reference with an event.
      <pre><strong>Set</strong> <em>objectvar</em> = {<em>objectexpression</em> | <strong>New</strong> <em>classname</em> | <strong>Nothing</strong>}</pre>
      -or-<br>
      <pre><strong>Set</strong> <em>object.eventname</em> = <strong>GetRef</strong>(<em>procname</em>)</pre>
      <strong>Parameters</strong>
      <dl>
        <dt><em>objectvar</em></dt>
        <dd>Required. Name of the variable or property; follows standard variable naming conventions.</dd>
        <dt><em>objectexpression</em></dt>
        <dd>Optional. Expression consisting of the name of an object, another declared variable of the same object type, or a function or method that returns an object of the same object type.</dd>
        <dt><strong>New</strong></dt>
        <dd>Keyword used to create a new instance of a class. If <em>objectvar</em> contained a reference to an object, that reference is released when the new one is assigned. The <strong>New</strong> keyword can only be used to create an instance of a class.</dd>
        <dt><em>classname</em></dt>
        <dd>Optional. Name of the class being created. A class and its members are defined using the <strong>Class</strong> statement.</dd>
        <dt><strong>Nothing</strong></dt>
        <dd>Optional. Discontinues association of <em>objectvar</em> with any specific object or class. Assigning <em>objectvar</em> to <strong>Nothing</strong> releases all the system and memory resources associated with the previously referenced object when no other variable refers to it.</dd>
        <dt><em>object</em></dt>
        <dd>Required. Name of the object with which <em>event</em> is associated.</dd>
        <dt><em>event</em></dt>
        <dd>Required. Name of the event to which the function is to be bound.</dd>
        <dt><em>procname</em></dt>
        <dd>Required. String containing the name of the <strong>Sub</strong> or <strong>Function</strong> being associated with the <em>event</em>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      To be valid, <em>objectvar</em> must be an object type consistent with the object being assigned to it.<br>
      <br>
      The <strong>Dim</strong>, <strong>Private</strong>, <strong>Public</strong>, or <strong>ReDim</strong> statements only declare a variable that refers to an object. No actual object is referred to until you use the <strong>Set</strong> statement to assign a specific object.<br>
      <br>
      Generally, when you use <strong>Set</strong> to assign an object reference to a variable, no copy of the object is created for that variable. Instead, a reference to the object is created. More than one object variable can refer to the same object. Because these variables are references to (rather than copies of) the object, any change in the object is reflected in all variables that refer to it.<br>
      <pre>Function ShowFreeSpace(drvPath)
   Dim fso, d, s
   Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)
   Set d = fso.GetDrive(fso.GetDriveName(drvPath))
   s = &quot;Drive &quot; &amp; UCase(drvPath) &amp; &quot; - &quot; 
   s = s &amp; d.VolumeName  &amp; &quot;&lt;BR&gt;&quot;
   s = s &amp; &quot;Free Space: &quot; &amp; FormatNumber(d.FreeSpace/1024, 0) 
   s = s &amp; &quot; Kbytes&quot;
   ShowFreeSpace = s
End Function</pre>
      Using the <strong>New</strong> keyword allows you to concurrently create an instance of a class and assign it to an object reference variable. The variable to which the instance of the class is being assigned must already have been declared with the <strong>Dim</strong> (or equivalent) statement.<br>
      <br>
      Refer to the documentation for the <strong>GetRef</strong> function for information on using <strong>Set</strong> to associate a procedure with an event.<br></td>
  </tr>
  <tr>
    <td><strong>Statement - Stop</strong></td>
    <td>Suspends execution.
      <pre>Stop</pre>
      <strong>Remarks</strong><br>
      <br>
      You can place <strong>Stop</strong> statements anywhere in procedures to suspend execution. Using the <strong>Stop</strong> statement is similar to setting a breakpoint in the code.<br>
      <br>
      The <strong>Stop</strong> statement suspends execution, but it does not close any files or clear any variables.<br>
      <p class="Note">The Stop statement has no effect unless the script is being debugged.</p>
      <strong>Example</strong><br>
      <br>
      This example uses the <strong>Stop</strong> statement to suspend execution for each iteration through the <strong>For...Next</strong> loop.<br>
      <p class="Note">To run this example, you must have a script debugger installed and the script must run in debug mode. For more information, search MSDN (<a href="http://msdn.microsoft.com" target="_blank">http://msdn.microsoft.com</a>) for the title &quot;Introducing Microsoft Script Debugger&quot; </p>
      <pre>For i = 1 To 5
   ' Print i to the Output window.
   Debug.Write &quot;loop index is &quot; &amp; i
   ' Wait for user to resume.
   <code><strong>Stop</strong></code>
Next</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - Sub</strong></td>
    <td>Declares the name, arguments, and code that form the body of a <strong>Sub</strong> procedure.
      <pre>[<strong>Public</strong> [<strong>Default</strong>] | <strong>Private</strong>] <strong>Sub</strong> <em>name</em> [<strong>(</strong><em>arglist</em><strong>)</strong>] 
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
&nbsp;&nbsp;&nbsp;[<strong>Exit Sub</strong>]
&nbsp;&nbsp;&nbsp;[<em>statements</em>]
<strong>End Sub</strong></pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>Public</em></dt>
        <dd>Indicates that the <strong>Sub</strong> procedure is accessible to all other procedures in all scripts.</dd>
        <dt><em>Default</em></dt>
        <dd>Used only with the <strong>Public</strong> keyword in a <strong>Class</strong> block to indicate that the <strong>Sub</strong> procedure is the default method for the class. An error occurs if more than one <strong>Default</strong> procedure is specified in a class.</dd>
        <dt><em>Private</em></dt>
        <dd>Indicates that the <strong>Sub</strong> procedure is accessible only to other procedures in the script where it is declared.</dd>
        <dt><em>name</em></dt>
        <dd>Name of the <strong>Sub</strong>; follows standard variable naming conventions.</dd>
        <dt><em>arglist</em></dt>
        <dd>List of variables representing arguments that are passed to the <strong>Sub</strong> procedure when it is called. Commas separate multiple variables.</dd>
        <dt><em>statements</em></dt>
        <dd>Any group of statements to be executed within the body of the <strong>Sub</strong> procedure.</dd>
      </dl>
      <br>
      The <em>arglist</em> argument has the following syntax and parts:<br>
      <pre>[<strong>ByVal </strong>| <strong>ByRef</strong>] <em>varname</em>[<strong>( )</strong>]
  </pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>ByVal</em></dt>
        <dd>Indicates that the argument is passed by value.</dd>
        <dt><em>ByRef</em></dt>
        <dd>Indicates that the argument is passed by reference.</dd>
        <dt><em>varname</em></dt>
        <dd>Name of the variable representing the argument; follows standard variable naming conventions.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong>Not directly supported in main test procedure section. </strong></font><br>
      <br>
      If not explicitly specified using either <strong>Public</strong> or <strong>Private</strong>, <strong>Sub</strong> procedures are public by default, that is, they are visible to all other procedures in your script. The value of local variables in a <strong>Sub</strong> procedure is not preserved between calls to the procedure.<br>
      <br>
      You can't define a <strong>Sub</strong> procedure inside any other procedure (e.g. <strong>Function</strong> or <strong>Property Get</strong>).<br>
      <br>
      The <strong>Exit Sub </strong>statement causes an immediate exit from a <strong>Sub</strong> procedure. Program execution continues with the statement that follows the statement that called the <strong>Sub</strong> procedure. Any number of <strong>Exit Sub</strong> statements can appear anywhere in a <strong>Sub</strong> procedure.<br>
      <br>
      Like a <strong>Function</strong> procedure, a <strong>Sub</strong> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <strong>Function</strong> procedure, which returns a value, a <strong>Sub</strong> procedure can't be used in an expression.<br>
      <br>
      You call a <strong>Sub</strong> procedure using the procedure name followed by the argument list. See the <strong>Call</strong> statement for specific information on how to call <strong>Sub</strong> procedures.<br>
      <p class="Caution">Sub procedures can be recursive, that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow.</p>
      Variables used in <strong>Sub</strong> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <strong>Dim</strong> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local, unless they are explicitly declared at some higher level outside the procedure.<br>
      <p class="Caution">A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you have defined at the script level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant or variable, it is assumed that your procedure is referring to that script-level name. To avoid this kind of conflict, use an Option Explicit statement to force explicit declaration of variables.</p></td>
  </tr>
  <tr>
    <td><strong>Statement - While...Wend</strong></td>
    <td>Executes a series of statements as long as a given condition is <strong>True</strong>.
      <pre><strong>While</strong> <em>condition</em>
&nbsp;&nbsp;&nbsp;Version [<em>statements</em>]
<strong>Wend</strong></pre>
      <strong>Arguments</strong>
      <dl>
        <dt><em>condition</em></dt>
        <dd>Numeric or string expression that evaluates to <strong>True</strong> or <strong>False</strong>. If <em>condition</em> is Null, <em>condition</em> is treated as <strong>False</strong>.</dd>
        <dt><em>statements</em></dt>
        <dd>One or more statements executed while condition is <strong>True</strong>.</dd>
      </dl>
      <strong>Remarks</strong><br>
      <br>
      If <em>condition</em> is <strong>True</strong>, all statements in <em>statements</em> are executed until the <strong>Wend</strong> statement is encountered. Control then returns to the <strong>While</strong> statement and <em>condition</em> is again checked. If <em>condition</em> is still <strong>True</strong>, the process is repeated. If it is not <strong>True</strong>, execution resumes with the statement following the <strong>Wend</strong> statement.<br>
      <br>
      <strong>While...Wend</strong> loops can be nested to any level. Each <strong>Wend</strong> matches the most recent <strong>While</strong>.<br>
      <br>
      <p class="Note">The Do...Loop statement provides a more structured and flexible way to perform looping.</p>
      <br>
      The following example illustrates use of the <strong>While...Wend</strong> statement:
      <pre>
  Dim Counter
  Counter = 0               ' Initialize variable.
  While Counter &lt; 20        ' Test value of Counter.
    Counter = Counter + 1   ' Increment Counter.
    Alert Counter
  Wend                      ' End While loop when Counter &gt; 19.</pre></td>
  </tr>
  <tr>
    <td><strong>Statement - With</strong></td>
    <td>Executes a series of statements on a single object.
      <pre><strong>With</strong> <em>object</em>
&nbsp;&nbsp;&nbsp;<em>statements</em>
<strong>End With</strong></pre>
      <strong>Arguments</strong><br>
      <br>
      <em>object</em> <br>
      Required. Name of an object or a function that returns an object. <br>
      <br>
      <em>statements</em> <br>
      Required. One or more statements to be executed on <em>object</em>.<br>
      <br>
      <strong>Remarks</strong><br>
      <br>
      <font color="red"><strong>Not directly supported in main test procedure section.</strong></font><br>
      <br>
      The <strong>With</strong> statement allows you to perform a series of statements on a specified object without requalifying the name of the object. For example, to change a number of different properties on a single object, place the property assignment statements within the <strong>With</strong> control structure, referring to the object once instead of referring to it with each property assignment. The following example illustrates use of the <strong>With</strong> statement to assign values to several properties of the same object.
      <pre>With MyLabel
   .Height = 2000
   .Width = 2000
   .Caption = &quot;This is MyLabel&quot;
End With</pre>
      While property manipulation is an important aspect of <strong>With</strong> functionality, it is not the only use. Any legal code can be used within a <strong>With</strong> block.
      <p class="Note">Once a With block is entered, <em>object</em> can't be changed. As a result, you can't use a single With statement to affect a number of different objects.</p>
      You can nest <strong>With</strong> statements by placing one <strong>With</strong> block within another. However, because members of outer <strong>With</strong> blocks are masked within the inner <strong>With</strong> blocks, you must provide a fully qualified object reference in an inner <strong>With</strong> block to any member of an object in an outer <strong>With</strong> block.<br>
      <p class="Note">Important: Do not jump into or out of With blocks. If statements in a With block are executed, but either the With or End With statement is not executed, you may get errors or unpredictable behavior.</p></td>
  </tr>
</table>
<h2 id="SampleTestProcedure">Sample Test Procedures</h2>
<p>The sample test procedures contain example tests. The commands and arguments can be typed into a text file (see <a href="?13#CreateTestProcScript">Creating 
  a Test Procedure Script</a>).</p>
<p>The sample test procedure scripts are:</p>
<ul>
  <li>Performance Curve Test Script</li>
  <li>Motoring Check Test Script</li>
  <li>Idle Leak Check Test Script</li>
</ul>
<h3 id="Performance">Performance Curve Test Script</h3>
<p>Option Explicit</p>
<p>'* 16Performance.tps<br>
  '******************************************************************************<br>
  '* AUTHOR:<br>
  '*<br>
  '* DESCRIPTION:<br>
  '* IDENTIFIER :<br>
  '*<br>
  '* DATE: 08/03/2005 11:15:26 AM<br>
  '*<br>
  '* MODIFICATIONS:<br>
  '* DATE WHO NCR DESCRIPTION<br>
  '* ---------- --- ----- --------------------------------------------------<br>
</p>
<p>' ***** LOCAL VARIABLE DECLARATIONS *****<br>
  Dim AICheckYes, lvEGTA, lvEGTB, lvEGTC, lvEGTD<br>
  Dim lvEPR0A, lvEPR0B, lvEPR0C, lvEPR0D, lvFNA<br>
  Dim lvFNB, lvFNC, lvFND, lvN1CA, lvN1CB<br>
  Dim lvN1CC, lvN1CD, lvN2CA, lvN2CB, lvN2CC<br>
  Dim lvN2CD, lvPTRHPCA, lvPTRHPCB, lvPTRHPCC, lvPTRHPCD<br>
  Dim lvPTRLPCA, lvPTRLPCB, lvPTRLPCC, lvPTRLPCD, lvPTRTURBA<br>
  Dim lvPTRTURBB, lvPTRTURBC, lvPTRTURBD, lvTSFCCA, lvTSFCCB<br>
  Dim lvTSFCCC, lvTSFCCD</p>
<p>' Channel Registration<br>
  channel &quot;eng_on, fnanom, fncnom, fnc, fnc_lbs, fnopws, aiflag, a_saved, b_saved, c_saved, d_saved, epr0, tsfcc, fi, fnbnom, fndnom, do_ppc, eprdlt_a, eprdlt_b, eprdlt_c, eprdlt_d, eprdlt, n1c, n2c, fat5c, ptrlpc, ptrhpc, ptrturbc, faepri, epr_cf_fnc_a0, epr_cf_fnc_a1, epr_cf_fnc_a2, epr_cf_fnc_a3, tsfc_cf_fnc_a0, tsfc_cf_fnc_a1, tsfc_cf_fnc_a2, tsfc_cf_fnc_a3, lpcr_cf_fnc_a0, lpcr_cf_fnc_a1, lpcr_cf_fnc_a2, lpcr_cf_fnc_a3, hpcr_cf_fnc_a0, hpcr_cf_fnc_a1, hpcr_cf_fnc_a2, hpcr_cf_fnc_a3, turb_cf_fnc_a0, turb_cf_fnc_a1, turb_cf_fnc_a2, turb_cf_fnc_a3, egt_cf_eprd_a0, egt_cf_eprd_a1, egt_cf_eprd_a2, egt_cf_eprd_a3, n1_cf_eprd_a0, n1_cf_eprd_a1, n1_cf_eprd_a2, n1_cf_eprd_a3, n2_cf_eprd_a0, n2_cf_eprd_a1, n2_cf_eprd_a2, n2_cf_eprd_a3, eprd1, eprd2, eprd3, eprd4, epr0a, epr0b, epr0c, epr0d, antiice, antiicest, aice, fan1c, fan2c, fan1crpm, fan2crpm&quot;</p>
<p>show_view &quot;RTD1&quot;, &quot;Performance&quot;, &quot;Page1&quot;</p>
<p>warning &quot;In N1 MODE, The operator controls the engine power. Power&quot;<br>
  warning &quot;lever operation must be done with CAUTION. Do Not Exceed&quot;<br>
  warning &quot;Any Engine Operating Limits&quot;</p>
<p>If cv_Eng_On = 0 Then call_tp &quot;01Start&quot;</p>
<p>set_channel A_Saved, 0<br>
  set_channel B_Saved, 0<br>
  set_channel C_Saved, 0<br>
  set_channel D_Saved, 0<br>
  set_channel Do_PPC, 0</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(a) Accelerate to BAND A 100 kp (FN Corrected).&quot;<br>
  note &quot;Stabilize the engine for 5 min.&quot;<br>
  wait &quot;FNOpwS = &quot; &amp; cv_FNANom, 120, 200, , , , SKIP, &quot;Failed to reach BAND A in 120 s&quot;<br>
  delay 280<br>
  do_fullset 10, &quot;Perf Point: BAND A&quot;, &quot;BANDA&quot;<br>
  delay 5<br>
  set_channel EPR0A, fv_EPR0<br>
  set_channel EPRDLT_A, fv_EPRDLT<br>
  set_channel A_Saved, 1</p>
<p>lvFNA = fv_FNC_LBS<br>
  lvN1CA = fv_FAN1CRPM<br>
  lvN2CA = fv_FAN2CRPM<br>
  lvEGTA = fv_FAT5C<br>
  lvEPR0A = fv_EPR0 * 1000<br>
  lvTSFCCA = fv_TSFCC * 1000<br>
  lvPTRLPCA = fv_PTRLPC * 1000<br>
  lvPTRHPCA = fv_PTRHPC * 1000<br>
  lvPTRTURBA = fv_PTRTURBC * 1000</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(e) decelerate to BAND B 100 kp (FN Corrected)&quot;<br>
  note &quot;Stabilize the engine for 3 min.&quot;<br>
  wait &quot;FNOpwS = &quot; &amp; cv_FNBNom, 120, 100, , , , SKIP, &quot;Failed to reach BAND B in 120 s&quot;<br>
  delay 160<br>
  do_fullset 10, &quot;Perf Point: BAND B&quot;, &quot;BANDB&quot;<br>
  delay 5<br>
  set_channel EPR0B, fv_EPR0<br>
  set_channel EPRDLT_B, fv_EPRDLT<br>
  set_channel B_Saved, 1</p>
<p>lvFNB = fv_FNC_LBS<br>
  lvN1CB = fv_FAN1CRPM<br>
  lvN2CB = fv_FAN2CRPM<br>
  lvEGTB = fv_FAT5C<br>
  lvEPR0B = fv_EPR0 * 1000<br>
  lvTSFCCB = fv_TSFCC * 1000<br>
  lvPTRLPCB = fv_PTRLPC * 1000<br>
  lvPTRHPCB = fv_PTRHPC * 1000<br>
  lvPTRTURBB = fv_PTRTURBC * 1000</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(f) decelerate to BAND C 100 kp (FN Corrected)&quot;<br>
  note &quot;Stabilize the engine for 3 min.&quot;<br>
  wait &quot;FNOpwS = &quot; &amp; cv_FNCNom, 120, 100, , , , SKIP, &quot;Failed to reach BAND C in 120 s&quot;<br>
  delay 160<br>
  do_fullset 10, &quot;Perf Point: BAND C&quot;, &quot;BANDC&quot;<br>
  delay 5<br>
  set_channel EPR0C, fv_EPR0<br>
  set_channel EPRDLT_C, fv_EPRDLT<br>
  set_channel C_Saved, 1</p>
<p>lvFNC = fv_FNC_LBS<br>
  lvN1CC = fv_FAN1CRPM<br>
  lvN2CC = fv_FAN2CRPM<br>
  lvEGTC = fv_FAT5C<br>
  lvEPR0C = fv_EPR0 * 1000<br>
  lvTSFCCC = fv_TSFCC * 1000<br>
  lvPTRLPCC = fv_PTRLPC * 1000<br>
  lvPTRHPCC = fv_PTRHPC * 1000<br>
  lvPTRTURBC = fv_PTRTURBC * 1000</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(g) decelerate to BAND D 100 kp (FN Corrected) and&quot;<br>
  note &quot;stabilize the engine for 3 min.&quot;<br>
  wait &quot;FNOpwS = &quot; &amp; cv_FNDNom, 120, 100, , , , SKIP, &quot;Failed to reach BAND D in 120 s&quot;<br>
  delay 160<br>
  do_fullset 10, &quot;Perf Point: BAND D&quot;, &quot;BANDD&quot;<br>
  delay 5</p>
<p>set_channel EPR0D, fv_EPR0<br>
  set_channel EPRDLT_D, fv_EPRDLT<br>
  set_channel D_Saved, 1<br>
  delay 1</p>
<p>lvFND = fv_FNC_LBS<br>
  lvN1CD = fv_FAN1CRPM<br>
  lvN2CD = fv_FAN2CRPM<br>
  lvEGTD = fv_FAT5C<br>
  lvEPR0D = fv_EPR0 * 1000<br>
  lvTSFCCD = fv_TSFCC * 1000<br>
  lvPTRLPCD = fv_PTRLPC * 1000<br>
  lvPTRHPCD = fv_PTRHPC * 1000<br>
  lvPTRTURBD = fv_PTRTURBC * 1000</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;Calculate PPC Plug&quot;<br>
  set_channel Do_PPC, 1</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(h) Open Anti-Ice valve&quot;<br>
  set_channel AIce, 0<br>
  wait &quot;AntiIceST = 0&quot;, 3, 0.1, , , , , , MSG, &quot;Anti-Ice valve not responding. Use PLC.&quot;</p>
<p>delay 30<br>
  do_fullset 0, &quot;Anti-Ice valve check in Performance&quot;, &quot;Perf_AntiIce&quot;</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.K.(12)(i) Close Anti-Ice valve&quot;<br>
  set_channel AIce, 1<br>
  wait &quot;AntiIceST = 0&quot;, 3, 0.1, , , , , , MSG, &quot;Anti-Ice valve not responding. Use PLC.&quot;</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;Select Approach Idle&quot;<br>
  wait &quot;FI = 1&quot;, 10, 0.1, , , , , , MSG, &quot;Approach Idle not selected in 10 s&quot;</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;1.M.(14)(e) decelerate slowly (60-120 seconds) to APPROACH IDLE&quot;<br>
  note &quot;Stabilize the engine for 10 min. Note: TEST PROCEDURE MUST BE COMPLETED&quot;<br>
  note &quot;OR ELSE ALL REQUIRED PERFORMANCE CALCULATIONS WILL NOT BE STORED.&quot;<br>
  wait &quot;AIFlag = 1&quot;, 120, 0.1, , , , SKIP, &quot;The engine is not at Approach Idle after 120 s.&quot;</p>
<p>fitclear<br>
  delay 2<br>
  fitstore lvFNA, lvEPR0A<br>
  fitstore lvFNB, lvEPR0B<br>
  fitstore lvFNC, lvEPR0C<br>
  fitstore lvFND, lvEPR0D</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel EPR_CF_FNC_A0, A0<br>
  set_channel EPR_CF_FNC_A1, A1<br>
  set_channel EPR_CF_FNC_A2, A2<br>
  set_channel EPR_CF_FNC_A3, A3</p>
<p>fitclear<br>
  delay 2<br>
  fitstore lvFNA, lvTSFCCA<br>
  fitstore lvFNB, lvTSFCCB<br>
  fitstore lvFNC, lvTSFCCC<br>
  fitstore lvFND, lvTSFCCD</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel TSFC_CF_FNC_A0, A0<br>
  set_channel TSFC_CF_FNC_A1, A1<br>
  set_channel TSFC_CF_FNC_A2, A2<br>
  set_channel TSFC_CF_FNC_A3, A3</p>
<p>fitclear<br>
  delay 2<br>
  fitstore lvFNA, lvPTRLPCA<br>
  fitstore lvFNB, lvPTRLPCB<br>
  fitstore lvFNC, lvPTRLPCC<br>
  fitstore lvFND, lvPTRLPCD</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel LPCR_CF_FNC_A0, A0<br>
  set_channel LPCR_CF_FNC_A1, A1<br>
  set_channel LPCR_CF_FNC_A2, A2<br>
  set_channel LPCR_CF_FNC_A3, A3</p>
<p>fitclear<br>
  delay 2<br>
  fitstore lvFNA, lvPTRHPCA<br>
  fitstore lvFNB, lvPTRHPCB<br>
  fitstore lvFNC, lvPTRHPCC<br>
  fitstore lvFND, lvPTRHPCD</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel HPCR_CF_FNC_A0, A0<br>
  set_channel HPCR_CF_FNC_A1, A1<br>
  set_channel HPCR_CF_FNC_A2, A2<br>
  set_channel HPCR_CF_FNC_A3, A3</p>
<p>fitclear<br>
  delay 2<br>
  fitstore lvFNA, lvPTRTURBA<br>
  fitstore lvFNB, lvPTRTURBB<br>
  fitstore lvFNC, lvPTRTURBC<br>
  fitstore lvFND, lvPTRTURBD</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel TURB_CF_FNC_A0, A0<br>
  set_channel TURB_CF_FNC_A1, A1<br>
  set_channel TURB_CF_FNC_A2, A2<br>
  set_channel TURB_CF_FNC_A3, A3</p>
<p>fitclear<br>
  delay 2<br>
  fitstore cv_EPRD1, lvEGTA<br>
  fitstore cv_EPRD2, lvEGTB<br>
  fitstore cv_EPRD3, lvEGTC<br>
  fitstore cv_EPRD4, lvEGTD</p>
<p>delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel EGT_CF_EPRD_A0, A0<br>
  set_channel EGT_CF_EPRD_A1, A1<br>
  set_channel EGT_CF_EPRD_A2, A2<br>
  set_channel EGT_CF_EPRD_A3, A3</p>
<p>fitclear</p>
<p>fitstore cv_EPRD1, lvN1CA<br>
  fitstore cv_EPRD2, lvN1CB<br>
  fitstore cv_EPRD3, lvN1CC<br>
  fitstore cv_EPRD4, lvN1CD<br>
  delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel N1_CF_EPRD_A0, A0<br>
  set_channel N1_CF_EPRD_A1, A1<br>
  set_channel N1_CF_EPRD_A2, A2<br>
  set_channel N1_CF_EPRD_A3, A3</p>
<p>fitclear<br>
  fitstore cv_EPRD1, lvN2CA<br>
  fitstore cv_EPRD2, lvN2CB<br>
  fitstore cv_EPRD3, lvN2CC<br>
  fitstore cv_EPRD4, lvN2CD<br>
  delay 2<br>
  fitcalc POLY, 3<br>
  delay 5<br>
  set_channel N2_CF_EPRD_A0, A0<br>
  set_channel N2_CF_EPRD_A1, A1<br>
  set_channel N2_CF_EPRD_A2, A2<br>
  set_channel N2_CF_EPRD_A3, A3<br>
  delay 2<br>
  fitclear<br>
  do_fullset 0, &quot;After Perf Points Stored&quot;, &quot;Performance1&quot;</p>
<p>'*** INSTRUCTION ***<br>
  instruction &quot;Take a fullset at 18 minutes of Idle stabilization period, &quot;, SKIP<br>
  note &quot;or press skip.&quot;<br>
  If Not skipgv Then do_fullset 10, &quot;After Perf AI&quot;, &quot;Perf_AI&quot;<br>
  prompt_boo &quot;Do you want to start the Approach Idle Check&quot;, AICheckYes<br>
  If AICheckYes Then autostart &quot;ApproachIdleCheck&quot;</p>
<h3 id="MotoringCheck">Motoring Check Test Script</h3>
<p>Option Explicit</p>
<p>'* &lt;script.tps&gt;<br>
  '******************************************************************************<br>
  '*  AUTHOR: &lt;Jacques Simard&gt;<br>
  '*<br>
  '*  DESCRIPTION:<br>
  '*  &lt;Dry Motoring&gt;<br>
  '*<br>
  '*  DATE: 11/05/2014 3:15:27 PM<br>
  '*<br>
  '*  MODIFICATIONS:<br>
  '*    DATE         WHO  NCR    DESCRIPTION<br>
  '*    ----------   ---  -----  --------------------------------------------------<br>
  '*  Ver   Date        By  Description<br>
  '* <br>
  '* <br>
  '* <br>
  '* <br>
  '* <br>
  '* <br>
  '*<br>
  '******************************************************************************</p>
<p>' ***** LOCAL VARIABLE DECLARATIONS *****<br>
  Dim In_ExhOK, TestYes, FuelLk1, OilLk1, OilService1, StartServ1, lvOilLevel1, ECUChkYes1, OilService2, StartServ2, In_ExhOK1</p>
<p>' Channel Registration<br>
  channel &quot;Eng_On, SW_EECPwrA, SW_EECPwrB, FuelEnable, TRA_A, Flight_Idle, MIFB, Ignitor1FB, Ignitor2FB, Ignit1ST, Ignit2ST, P_Fuel_Fac, SW_Start, SWStartBit14, SWStartBit15, StrtReset, SW_AUTOStart, AutoStart, P_AirStart, N1, N2, PEO&quot;</p>
<p>' [lookup]<br>
  ' channel &quot;&quot;<br>
  ' [validation]<br>
  ' security=1<br>
  ' modification=&quot;3017230253&quot;<br>
  ' [test script]<br>
  ' name=DryMotoring<br>
  '/ *<br>
  '*  /<br>
  '*  Motoring<br>
  '*  Ref: 72-00-00 Testing 002<br>
  '*  Modification History</p>
<p>show_view &quot;rtd2host&quot;, &quot;View 0&quot;, &quot;Start.v&quot;</p>
<p>'*  SEQUENCE# 1</p>
<p> If cv_Eng_On = 1 Then<br>
  quit<br>
  End If</p>
<p>set_channel StrtReset, 1<br>
  delay 2<br>
  set_channel StrtReset, 0<br>
</p>
<p>'*  SEQUENCE# 2</p>
<p>instruction &quot;Ensure the cowling is open for leak check&quot;</p>
<p>prompt_boo &quot;Were oil levels serviced before Motoring?&quot;, OilService2<br>
  If OilService2 Then<br>
  result &quot;Oil levels were serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Oil levels were not serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Was Starter serviced?&quot;, StartServ2<br>
  If StartServ2 Then<br>
  result &quot;Starter was serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Starter was not serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Was inlet and exhaust check satisfactory?&quot;, In_ExhOK1<br>
  If In_ExhOK1 Then<br>
  result &quot;Inlet and exhaust checked OK.&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;A problem was found in the inlet or exhaust.&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 3</p>
<p>instruction &quot;With the engine coupled to bed, turn&quot;<br>
  note &quot;Electrical Power ON (28 V DC and 115 V AC at 400 Hz)&quot;</p>
<p> If cv_SW_EECPwrA = 0 Then<br>
  instruction &quot;Energize channel A of ECU&quot;<br>
  wait &quot;SW_EECPwrA = 1&quot;, 3, 0.1, , , , , , MSG, &quot;ECU channel A switch not activated.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped ECU channel A power check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;ECU channel A is ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;ECU channel A is ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p> If cv_SW_EECPwrB = 0 Then<br>
  instruction &quot;Energize channel B of ECU&quot;<br>
  wait &quot;SW_EECPwrB = 1&quot;, 3, 0.1, , , , , , MSG, &quot;ECU channel B switch not activated.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped ECU channel B power check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;ECU channel B is ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;ECU channel B is ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
</p>
<p>'*  SEQUENCE# 4</p>
<p>instruction &quot;Set Master Fuel Shutoff Lever to CLOSE (HP cock)&quot;<br>
  wait &quot;FuelEnable = 0&quot;, 10, 0.1, , , , , , MSG, &quot;Master Fuel CutOff Lever was not set to CLOSE in 10 s&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Master Lever OFF check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Master Fuel Sutoff Lever is CLOSE&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 5</p>
<p>instruction &quot;Set throttle lever to 35.00 degrees.&quot;<br>
  wait &quot;TRA_A = 35&quot;, 10, 0.5, , , , , , MSG, &quot;Throttle lever is not at IDLE position after 10 s&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped TRA IDLE check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;TRA is at 35.00 degree&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
</p>
<p>'*  SEQUENCE# 6</p>
<p>instruction &quot;Set selector switch to Minimun Idle&quot;<br>
  If cv_Flight_Idle = 1 Then<br>
  wait &quot;Flight_Idle = 0&quot;, 3, 0.1, , , , , , MSG, &quot;MIN IDLE Selector Switch not responding after 3 secs&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Selector Switch MIN IDLE instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Selector Switch selected to MIN IDLE&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Selector Switch is in MIN IDLE position&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 7</p>
<p>instruction &quot;Set Ignitor No 1 and No 2 switch to OFF&quot;<br>
  If cv_Ignit1ST = 1 Then<br>
  instruction &quot;Set Ignitor 1 to OFF&quot;<br>
  wait &quot;Ignitor1FB = 0&quot;, 3, 0.1, , , , , , MSG, &quot;Ignitor 1 Switch not responding after 3 secs.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Ignitor 1 Switch OFF instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Ignitor 1 Switch selected to OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Ignitor 1 Switch selected to OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p> If cv_Ignit2ST = 1 Then<br>
  instruction &quot;Set Ignitor 2 to OFF&quot;<br>
  wait &quot;Ignitor2FB = 0&quot;, 3, 0.1, , , , , , MSG, &quot;Ignitor 1 Switch not responding after 3 secs.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Ignitor 2 Switch OFF instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Ignitor 2 Switch selected to OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Ignitor 2 Switch selected to OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
</p>
<p>'*  SEQUENCE# 8</p>
<p>If cv_SW_AUTOStart = 1 Then<br>
  instruction &quot;Set AutoStart switch to OFF.&quot;<br>
  wait &quot;AutoStart = 0&quot;, 3, 0.1, , , , , , MSG, &quot;AutoStart Selector Switch not responding after 3 secs&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Selector Switch AUTOSTART instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Selector Switch selected to AUTOSTART OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;AUTOSTART switch is OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 9</p>
<p> If cv_P_Fuel_Fac &lt; 10 Then<br>
  instruction &quot;Select Main Fuel Pump ON&quot;<br>
  wait &quot;P_Fuel_Fac &gt; 10&quot;, 3, 0.1, , , , , , MSG, &quot;Fuel Pump not responding.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Fuel Pump On instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Fuel Pump turned On&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Main Fuel Pump is ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 10</p>
<p> If cv_P_AirStart &lt;= 35.5 Or cv_P_AirStart &gt;= 37.5 Then<br>
  instruction &quot;Set Facility Air Supply ON&quot;<br>
  wait &quot;P_AirStart &gt; 36.5&quot;, 3, 0.5, , , , , , MSG, &quot;Facility Air not responding.&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Start Air ON instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Start Air turned ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Start Air was already ON&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 11</p>
<p> instruction &quot;Set Rotary switch to START - Starter Switch ON&quot;<br>
  wait &quot;SWStartBit14 = 0&quot;, 3, 0.1, , , , , , MSG, &quot; Starter valve is not ON after 3 s&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Manual Start ON check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Starter valve is ON &quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
</p>
<p>'*  SEQUENCE# 12</p>
<p>wait &quot;N2 &gt; 1100&quot;, 25, 100, , , , SKIP, &quot;N2 did not reach motoring RPM of 1000 RPM in 25 s&quot;<br>
  If cv_PEO &gt;= 1.0 Then<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot; psi - Positive Indication&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot; psi - FAULTY&quot;, REPORT &amp; &quot;Motoring&quot;, RED<br>
  End If</p>
<p>instruction &quot;Stabilize N2 at motoring speed RPM&quot;<br>
  wait &quot;N2 &gt; 2100&quot;, 25, 100, , , , SKIP, &quot;N2 did not reach motoring RPM of 2000 RPM in 25 s&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped N2 max = 3500 rpm motoring check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;N2 reached 2000 rpm&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  result &quot;N2 = &quot; &amp; cv_N2 &amp; &quot; rpm&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  delay 5<br>
  If cv_N2 &gt;= 3500 Then<br>
  result &quot;N2 is over 3500 rpm, adjust.&quot;<br>
  Else<br>
  If cv_N1 &gt; 100 Then<br>
  result &quot;N1 = &quot; &amp; cv_N1 &amp; &quot; rpm - Positive Indication&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;N1 = &quot; &amp; cv_N1 &amp; &quot; rpm - FAULTY - VERIFY &quot;, REPORT &amp; &quot;Motoring&quot;, RED<br>
  End If <br>
  End If<br>
</p>
<p>'*  SEQUENCE# 13</p>
<p>If cv_PEO &gt;= 2.0 Then<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot; psi - Positive Indication&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot; psi - FAULTY&quot;, REPORT &amp; &quot;Motoring&quot;, RED<br>
  End If<br>
</p>
<p> do_fullset 1, &quot;Motoring - Dry motoring&quot;, &quot;Motoring&quot;<br>
</p>
<p> prompt_boo &quot;Do you want to perform an ECU check?&quot;, ECUChkYes1<br>
  If ECUChkYes1 Then<br>
  call_tp &quot;ECUCheck&quot;<br>
  End If</p>
<p>'*  SEQUENCE# 14</p>
<p>instruction &quot;Set Rotary switch to NORM - Starter Switch OFF.&quot;<br>
  wait &quot;SWStartBit15 = 0&quot;, 3, 0.1, , , , , , MSG, &quot; Starter valve is not OFF after 3 s&quot;<br>
  wait &quot;N2 &lt; 1500&quot;, 25, 100, , , , SKIP, &quot;N2 did not reach motoring RPM of 1500 RPM in 25 s&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Manual Start ON check&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot; Starter valve is OFF &quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>note &quot;NOTE1: Make a check for leaks and unusual noises during&quot;<br>
  note &quot;       coastdown.  Report any unusual noises to Enigneering.&quot;<br>
</p>
<p>'*  SEQUENCE# 15</p>
<p> If cv_P_AirStart &lt;= 35.5 Or cv_P_AirStart &gt;= 37.5 Then<br>
  instruction &quot;Set Facility Air Supply OFF&quot;<br>
  wait &quot;P_AirStart &lt; 35.5&quot;, 3, 0.5, , , , , , MSG, &quot;Start Air is not OFF&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped Start Air ON instruction&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Start Air turned OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If<br>
  Else<br>
  result &quot;Start Air was already OFF&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p> wait &quot;N2 &lt; 100&quot;, 120, 100, , , , SKIP, &quot;N2 did not reach motoring RPM of 100 RPM in 120 s&quot;<br>
</p>
<p>'*  SEQUENCE# 16</p>
<p>prompt_boo &quot;Are there fuel leaks?&quot;, FuelLk1<br>
  If FuelLk1 Then<br>
  result &quot;There are fuel leaks&quot;, REPORT &amp; &quot;Motoring&quot;, RED<br>
  Else<br>
  result &quot;There are no fuel leaks&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Are there oil leaks?&quot;, OilLk1<br>
  If OilLk1 Then<br>
  result &quot;There are oil leaks&quot;, REPORT &amp; &quot;Motoring&quot;, RED<br>
  Else<br>
  result &quot;There are no oil leaks&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Were Oil levels found satisfactory after Motoring?&quot;, lvOilLevel1<br>
  If lvOilLevel1 Then<br>
  result &quot;Oil Levels OK&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Oil Levels NOT OK&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Were oil levels serviced after Motoring?&quot;, OilService1<br>
  If OilService1 Then<br>
  result &quot;Oil levels were serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Oil levels were not serviced&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Was Starter oil level satisfactory?&quot;, StartServ1<br>
  If StartServ1 Then<br>
  result &quot;Starter was satisfactory&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;Starter was not satisfactory&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>prompt_boo &quot;Was inlet and exhaust check satisfactory?&quot;, In_ExhOK<br>
  If In_ExhOK Then<br>
  result &quot;Inlet and exhaust checked OK.&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  Else<br>
  result &quot;A problem was found in the inlet or exhaust.&quot;, REPORT &amp; &quot;Motoring&quot;<br>
  End If</p>
<p>note &quot;NOTE2       Check oil level, top up as required.&quot;<br>
  note &quot;	     Do not overfill oil tank.  Keep level down below&quot;<br>
  note &quot;       middle of sightglass&quot;</p>
<p>note &quot;NOTE: If next operation is performing the leak check at idle&quot;<br>
  note &quot;      power, the cowlings can remain opened.  &quot;<br>
</p>
<p>'*  SEQUENCE# 17<br>
</p>
<p>prompt_boo &quot;Is Motoring completed?&quot;, TestYes<br>
  If TestYes Then<br>
  result &quot;Test Motoring completed and authorized.&quot;, REPORT &amp; &quot;Test2&quot;<br>
  End If</p>
<h3 id="IdleLeakCheck">Idle Leak Check Test Script</h3>
<p>Option Explicit</p>
<p>'* &lt;script.tps&gt;<br>
  '******************************************************************************<br>
  '*  AUTHOR: &lt;your name goes here&gt;<br>
  '*<br>
  '*  DESCRIPTION:<br>
  '*  &lt;describe the script here&gt;<br>
  '*<br>
  '*  DATE: 26/03/2014 4:59:25 PM<br>
  '*<br>
  '*  MODIFICATIONS:<br>
  '*    DATE         WHO  NCR    DESCRIPTION<br>
  '*    ----------   ---  -----  --------------------------------------------------<br>
  '* <br>
  '*<br>
  '******************************************************************************</p>
<p>' ***** LOCAL VARIABLE DECLARATIONS *****<br>
  Dim StartYes, lvshutdown, ECUChkYes1</p>
<p>' Channel Registration<br>
  channel &quot;tAtMI, FL_MI, Flight_Idle, FL_AI, OilQty_GE90, N1, N2, EGT, PEO, OilQty_GE90, Eng_On, A146_15, B146_15&quot;<br>
  channel &quot;FuelEnable, tAtMI, Eng_On, SW_EECPwrA, SW_EECPwrB, TRA_A, Flight_Idle, MIFB, Ignitor1FB, Ignitor2FB, Ignit1ST, Ignit2ST, P_Fuel_Fac, SW_Start, SWStartBit14, SWStartBit15, StrtReset, SW_AUTOStart, AutoStart, P_AirStart, N1, N2, PEO, EndStartL, tToIdle_GE90, tToLite&quot;<br>
  channel &quot;FuelEnable, tAtMI, Eng_On, SW_EECPwrA, SW_EECPwrB, TRA_A, Flight_Idle, MIFB, Ignitor1FB, Ignitor2FB, Ignit1ST, Ignit2ST, P_Fuel_Fac, SW_Start, SWStartBit14, SWStartBit15, StrtReset, SW_AUTOStart, AutoStart, P_AirStart, N1, N2, PEO, EndStartL, tToIdle_GE90, tToLite&quot;<br>
  channel &quot;NADownL,NBDownL, NARDWN, NBRDWN, FL_MI, tAtMI, FuelEnable&quot;</p>
<p>note &quot;NOTE: Make sure that all lines, blanking plugs and harnesses&quot;<br>
  note &quot;      are properly secured for Idle leak check.&quot;</p>
<p>instruction &quot;Stabilize engine at Minimum Idle for 5 minutes&quot;<br>
  If cv_Eng_On = 0 Then<br>
  prompt_boo &quot;Press YES for AUTOSTART and NO for Manual START&quot;, StartYes<br>
  If StartYes Then<br>
  call_tp &quot;AutoStart&quot;<br>
  Else<br>
  call_tp &quot;ManualStart&quot;<br>
  End If<br>
  End If</p>
<p> wait &quot;FL_MI = 1&quot;, 30, 0.1, , , , , , MSG, &quot;N2 did not reach GI in 30 secs &quot;<br>
  wait &quot;tAtMI &gt; 300&quot;, 300, 10, , , , , , MSG, &quot;Engine is not at GI&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped 5 min stabilization at AI&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Engine is at Minimum Idle for at least 5 minutes&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  End If</p>
<p> if cv_A146_15 = 1 and cv_B146_15 = 1 Then<br>
  result &quot;Label 146 Bit 15 is set to 1&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  result &quot;N2 is scheduling properly&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Label 146 Bit 15 is set to 0&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  result &quot;N2 is NOT scheduling properly&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  End If</p>
<p> If cv_N1 &lt; 450 or cv_N1 &gt; 600 Then<br>
  result &quot;N1 ACTUAL = &quot; &amp; cv_N1 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;N1 ACTUAL = &quot; &amp; cv_N1 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;N1 below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_N2 &lt; 5945 or cv_N2 &gt; 6300 Then<br>
  result &quot;N2 ACTUAL = &quot; &amp; cv_N2 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;N2 ACTUAL = &quot; &amp; cv_N2 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;N2 below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_EGT &lt; 450 or cv_EGT &gt; 600 Then<br>
  result &quot;EGT ACTUAL = &quot; &amp; cv_EGT &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;EGT ACTUAL = &quot; &amp; cv_EGT &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;EGT below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_PEO &lt; 10 or cv_PEO &gt; 50 Then<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot;psid.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot;psid.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;Oil Pressure below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_OilQty_GE90 &lt; 9 or cv_OilQty_GE90 &gt; 28 Then<br>
  result &quot;Oil Quantity = &quot; &amp; cv_OilQty_GE90 &amp; &quot;liters.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Oil Quantity = &quot; &amp; cv_OilQty_GE90 &amp; &quot;liters.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;Oil Quantity below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If<br>
</p>
<p>instruction &quot;Set Flight Idle and stabilize for 5 minutes at Approach Idle&quot;<br>
  wait &quot;Flight_Idle = 1&quot;, 30, 0.1, , , , , , MSG, &quot;Flight Idle is not ON &quot;<br>
  wait &quot;FL_AI = 1&quot;, 30, 0.1, , , , , , MSG, &quot;N2 did not reach AI in 30 secs &quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped 5 min stabilization at AI&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Engine is at Approach Idle for at least 5 minutes&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  End If<br>
  delay 300<br>
</p>
<p>if cv_A146_15 = 1 Then<br>
  result &quot;Label 146 Bit 15 is set to 1&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  result &quot;N2 is scheduling properly&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Label 146 Bit 15 is set to 0&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  result &quot;N2 is NOT scheduling properly&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  End If</p>
<p> If cv_N1 &lt; 650 or cv_N1 &gt; 900 Then<br>
  result &quot;N1 ACTUAL = &quot; &amp; cv_N1 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;N1 ACTUAL = &quot; &amp; cv_N1 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;N1 below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_N2 &lt; 7200 or cv_N2 &gt; 7800 Then<br>
  result &quot;N2 ACTUAL = &quot; &amp; cv_N2 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;N2 ACTUAL = &quot; &amp; cv_N2 &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;N2 below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_EGT &lt; 450 or cv_EGT &gt; 600 Then<br>
  result &quot;EGT ACTUAL = &quot; &amp; cv_EGT &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;EGT ACTUAL = &quot; &amp; cv_EGT &amp; &quot;rpm.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;EGT below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_PEO &lt; 10 or cv_PEO &gt; 50 Then<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot;psid.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Oil Pressure = &quot; &amp; cv_PEO &amp; &quot;psid.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;Oil Pressure below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p> If cv_OilQty_GE90 &lt; 9 or cv_OilQty_GE90 &gt; 28 Then<br>
  result &quot;Oil Quantity = &quot; &amp; cv_OilQty_GE90 &amp; &quot;liters.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Oil Quantity = &quot; &amp; cv_OilQty_GE90 &amp; &quot;liters.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;, RED<br>
  result &quot;Oil Quantity below guidelines.&quot;, REPORT &amp; &quot;IdleLeakCheck&quot; , RED<br>
  End If</p>
<p>instruction &quot;Set Flight Idle OFF and Stabilize at Minimum Idle for 5 minutes&quot;<br>
  wait &quot;FL_MI = 1&quot;, 30, 0.1, , , , , , MSG, &quot;N2 did not reach GI in 30 secs &quot;<br>
  wait &quot;tAtMI &gt; 300&quot;, 300, 10, , , , , , MSG, &quot;Engine is not at GI&quot;<br>
  If skipgv Then<br>
  result &quot;Operator skipped 5 min stabilization at AI&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  Else<br>
  result &quot;Engine is at Minimum Idle for at least 5 minutes&quot;, REPORT &amp; &quot;IdleLeakCheck&quot;<br>
  End If</p>
<p>prompt_boo &quot;Do you want to perform an ECU check?&quot;, ECUChkYes1<br>
  If ECUChkYes1 Then<br>
  call_tp &quot;ECUCheck&quot;<br>
  End If</p>
<p>prompt_boo &quot;Do you want to shutdown?&quot;, lvshutdown<br>
  If lvshutdown Then<br>
  call_tp &quot;Shutdown&quot;<br>
  End If<br>
</p>
<br>
<br>
<!-- #EndEditable -->
</body>

<!-- #EndTemplate --></html>
<script type="text/javascript">highlight();</script>
